{
  "address": "0xE08cEE27Cfa6F9c2F92Fd9cc6b7206282787f282",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "contract OracleMock",
          "name": "_oracle",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "maker",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "newNonce",
          "type": "uint256"
        }
      ],
      "name": "NonceIncreased",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "maker",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "bytes32",
          "name": "orderHash",
          "type": "bytes32"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "remainingRaw",
          "type": "uint256"
        }
      ],
      "name": "OrderCanceled",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "maker",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "bytes32",
          "name": "orderHash",
          "type": "bytes32"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "remaining",
          "type": "uint256"
        }
      ],
      "name": "OrderFilled",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "DOMAIN_SEPARATOR",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "LIMIT_ORDER_TYPEHASH",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "salt",
              "type": "uint256"
            },
            {
              "internalType": "address",
              "name": "asset",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "underlyingAsset",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "maker",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "receiver",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "allowedSender",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "fixedTokens",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "variableTokens",
              "type": "uint256"
            },
            {
              "internalType": "bool",
              "name": "isFixedTaker",
              "type": "bool"
            },
            {
              "internalType": "uint256",
              "name": "beginTimestamp",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "endTimestamp",
              "type": "uint256"
            },
            {
              "internalType": "int128",
              "name": "t",
              "type": "int128"
            },
            {
              "internalType": "bytes",
              "name": "makerAssetData",
              "type": "bytes"
            },
            {
              "internalType": "bytes",
              "name": "takerAssetData",
              "type": "bytes"
            },
            {
              "internalType": "bytes",
              "name": "getMakerAmount",
              "type": "bytes"
            },
            {
              "internalType": "bytes",
              "name": "getTakerAmount",
              "type": "bytes"
            },
            {
              "internalType": "bytes",
              "name": "predicate",
              "type": "bytes"
            },
            {
              "internalType": "bytes",
              "name": "permit",
              "type": "bytes"
            },
            {
              "internalType": "bytes",
              "name": "interaction",
              "type": "bytes"
            }
          ],
          "internalType": "struct OrderMixin.Order",
          "name": "order",
          "type": "tuple"
        },
        {
          "internalType": "address",
          "name": "participant",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "addMargin",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint8",
          "name": "amount",
          "type": "uint8"
        }
      ],
      "name": "advanceNonce",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address[]",
          "name": "targets",
          "type": "address[]"
        },
        {
          "internalType": "bytes[]",
          "name": "data",
          "type": "bytes[]"
        }
      ],
      "name": "and",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "target",
          "type": "address"
        },
        {
          "internalType": "bytes",
          "name": "data",
          "type": "bytes"
        }
      ],
      "name": "arbitraryStaticCall",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "assetAlpha",
      "outputs": [
        {
          "internalType": "int128",
          "name": "",
          "type": "int128"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "assetBeta",
      "outputs": [
        {
          "internalType": "int128",
          "name": "",
          "type": "int128"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "assetLowerBoundMul",
      "outputs": [
        {
          "internalType": "int128",
          "name": "",
          "type": "int128"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "assetSigma",
      "outputs": [
        {
          "internalType": "int128",
          "name": "",
          "type": "int128"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "assetUpperBoundMul",
      "outputs": [
        {
          "internalType": "int128",
          "name": "",
          "type": "int128"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "salt",
              "type": "uint256"
            },
            {
              "internalType": "address",
              "name": "asset",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "underlyingAsset",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "maker",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "receiver",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "allowedSender",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "fixedTokens",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "variableTokens",
              "type": "uint256"
            },
            {
              "internalType": "bool",
              "name": "isFixedTaker",
              "type": "bool"
            },
            {
              "internalType": "uint256",
              "name": "beginTimestamp",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "endTimestamp",
              "type": "uint256"
            },
            {
              "internalType": "int128",
              "name": "t",
              "type": "int128"
            },
            {
              "internalType": "bytes",
              "name": "makerAssetData",
              "type": "bytes"
            },
            {
              "internalType": "bytes",
              "name": "takerAssetData",
              "type": "bytes"
            },
            {
              "internalType": "bytes",
              "name": "getMakerAmount",
              "type": "bytes"
            },
            {
              "internalType": "bytes",
              "name": "getTakerAmount",
              "type": "bytes"
            },
            {
              "internalType": "bytes",
              "name": "predicate",
              "type": "bytes"
            },
            {
              "internalType": "bytes",
              "name": "permit",
              "type": "bytes"
            },
            {
              "internalType": "bytes",
              "name": "interaction",
              "type": "bytes"
            }
          ],
          "internalType": "struct OrderMixin.Order",
          "name": "order",
          "type": "tuple"
        }
      ],
      "name": "cancelOrder",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "salt",
              "type": "uint256"
            },
            {
              "internalType": "address",
              "name": "asset",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "underlyingAsset",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "maker",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "receiver",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "allowedSender",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "fixedTokens",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "variableTokens",
              "type": "uint256"
            },
            {
              "internalType": "bool",
              "name": "isFixedTaker",
              "type": "bool"
            },
            {
              "internalType": "uint256",
              "name": "beginTimestamp",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "endTimestamp",
              "type": "uint256"
            },
            {
              "internalType": "int128",
              "name": "t",
              "type": "int128"
            },
            {
              "internalType": "bytes",
              "name": "makerAssetData",
              "type": "bytes"
            },
            {
              "internalType": "bytes",
              "name": "takerAssetData",
              "type": "bytes"
            },
            {
              "internalType": "bytes",
              "name": "getMakerAmount",
              "type": "bytes"
            },
            {
              "internalType": "bytes",
              "name": "getTakerAmount",
              "type": "bytes"
            },
            {
              "internalType": "bytes",
              "name": "predicate",
              "type": "bytes"
            },
            {
              "internalType": "bytes",
              "name": "permit",
              "type": "bytes"
            },
            {
              "internalType": "bytes",
              "name": "interaction",
              "type": "bytes"
            }
          ],
          "internalType": "struct OrderMixin.Order",
          "name": "order",
          "type": "tuple"
        }
      ],
      "name": "checkPredicate",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "name": "defaultedFunds",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract AggregatorV3Interface",
          "name": "oracle1",
          "type": "address"
        },
        {
          "internalType": "contract AggregatorV3Interface",
          "name": "oracle2",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "spread",
          "type": "uint256"
        },
        {
          "internalType": "int256",
          "name": "decimalsScale",
          "type": "int256"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "doublePrice",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "value",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "target",
          "type": "address"
        },
        {
          "internalType": "bytes",
          "name": "data",
          "type": "bytes"
        }
      ],
      "name": "eq",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "salt",
              "type": "uint256"
            },
            {
              "internalType": "address",
              "name": "asset",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "underlyingAsset",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "maker",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "receiver",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "allowedSender",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "fixedTokens",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "variableTokens",
              "type": "uint256"
            },
            {
              "internalType": "bool",
              "name": "isFixedTaker",
              "type": "bool"
            },
            {
              "internalType": "uint256",
              "name": "beginTimestamp",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "endTimestamp",
              "type": "uint256"
            },
            {
              "internalType": "int128",
              "name": "t",
              "type": "int128"
            },
            {
              "internalType": "bytes",
              "name": "makerAssetData",
              "type": "bytes"
            },
            {
              "internalType": "bytes",
              "name": "takerAssetData",
              "type": "bytes"
            },
            {
              "internalType": "bytes",
              "name": "getMakerAmount",
              "type": "bytes"
            },
            {
              "internalType": "bytes",
              "name": "getTakerAmount",
              "type": "bytes"
            },
            {
              "internalType": "bytes",
              "name": "predicate",
              "type": "bytes"
            },
            {
              "internalType": "bytes",
              "name": "permit",
              "type": "bytes"
            },
            {
              "internalType": "bytes",
              "name": "interaction",
              "type": "bytes"
            }
          ],
          "internalType": "struct OrderMixin.Order",
          "name": "order",
          "type": "tuple"
        },
        {
          "internalType": "bytes",
          "name": "signature",
          "type": "bytes"
        },
        {
          "internalType": "uint256",
          "name": "fixedTokens",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "variableTokens",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "thresholdTokens",
          "type": "uint256"
        }
      ],
      "name": "fillOrder",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "salt",
              "type": "uint256"
            },
            {
              "internalType": "address",
              "name": "asset",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "underlyingAsset",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "maker",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "receiver",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "allowedSender",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "fixedTokens",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "variableTokens",
              "type": "uint256"
            },
            {
              "internalType": "bool",
              "name": "isFixedTaker",
              "type": "bool"
            },
            {
              "internalType": "uint256",
              "name": "beginTimestamp",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "endTimestamp",
              "type": "uint256"
            },
            {
              "internalType": "int128",
              "name": "t",
              "type": "int128"
            },
            {
              "internalType": "bytes",
              "name": "makerAssetData",
              "type": "bytes"
            },
            {
              "internalType": "bytes",
              "name": "takerAssetData",
              "type": "bytes"
            },
            {
              "internalType": "bytes",
              "name": "getMakerAmount",
              "type": "bytes"
            },
            {
              "internalType": "bytes",
              "name": "getTakerAmount",
              "type": "bytes"
            },
            {
              "internalType": "bytes",
              "name": "predicate",
              "type": "bytes"
            },
            {
              "internalType": "bytes",
              "name": "permit",
              "type": "bytes"
            },
            {
              "internalType": "bytes",
              "name": "interaction",
              "type": "bytes"
            }
          ],
          "internalType": "struct OrderMixin.Order",
          "name": "order",
          "type": "tuple"
        },
        {
          "internalType": "bytes",
          "name": "signature",
          "type": "bytes"
        },
        {
          "internalType": "uint256",
          "name": "fixedTokens",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "variableTokens",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "thresholdTokens",
          "type": "uint256"
        }
      ],
      "name": "fillOrderTo",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "salt",
              "type": "uint256"
            },
            {
              "internalType": "address",
              "name": "asset",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "underlyingAsset",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "maker",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "receiver",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "allowedSender",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "fixedTokens",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "variableTokens",
              "type": "uint256"
            },
            {
              "internalType": "bool",
              "name": "isFixedTaker",
              "type": "bool"
            },
            {
              "internalType": "uint256",
              "name": "beginTimestamp",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "endTimestamp",
              "type": "uint256"
            },
            {
              "internalType": "int128",
              "name": "t",
              "type": "int128"
            },
            {
              "internalType": "bytes",
              "name": "makerAssetData",
              "type": "bytes"
            },
            {
              "internalType": "bytes",
              "name": "takerAssetData",
              "type": "bytes"
            },
            {
              "internalType": "bytes",
              "name": "getMakerAmount",
              "type": "bytes"
            },
            {
              "internalType": "bytes",
              "name": "getTakerAmount",
              "type": "bytes"
            },
            {
              "internalType": "bytes",
              "name": "predicate",
              "type": "bytes"
            },
            {
              "internalType": "bytes",
              "name": "permit",
              "type": "bytes"
            },
            {
              "internalType": "bytes",
              "name": "interaction",
              "type": "bytes"
            }
          ],
          "internalType": "struct OrderMixin.Order",
          "name": "order",
          "type": "tuple"
        },
        {
          "internalType": "bytes",
          "name": "signature",
          "type": "bytes"
        },
        {
          "internalType": "uint256",
          "name": "fixedTokens",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "variableTokens",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "thresholdTokens",
          "type": "uint256"
        },
        {
          "internalType": "bytes",
          "name": "permit",
          "type": "bytes"
        }
      ],
      "name": "fillOrderToWithPermit",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "asset",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "underlyingAsset",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "startTimestamp",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "endTimestamp",
          "type": "uint256"
        }
      ],
      "name": "getAverageAccruedAPYBetweenTimestamps",
      "outputs": [
        {
          "internalType": "int128",
          "name": "apy",
          "type": "int128"
        },
        {
          "internalType": "int128",
          "name": "ewma",
          "type": "int128"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "salt",
              "type": "uint256"
            },
            {
              "internalType": "address",
              "name": "asset",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "underlyingAsset",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "maker",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "receiver",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "allowedSender",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "fixedTokens",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "variableTokens",
              "type": "uint256"
            },
            {
              "internalType": "bool",
              "name": "isFixedTaker",
              "type": "bool"
            },
            {
              "internalType": "uint256",
              "name": "beginTimestamp",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "endTimestamp",
              "type": "uint256"
            },
            {
              "internalType": "int128",
              "name": "t",
              "type": "int128"
            },
            {
              "internalType": "bytes",
              "name": "makerAssetData",
              "type": "bytes"
            },
            {
              "internalType": "bytes",
              "name": "takerAssetData",
              "type": "bytes"
            },
            {
              "internalType": "bytes",
              "name": "getMakerAmount",
              "type": "bytes"
            },
            {
              "internalType": "bytes",
              "name": "getTakerAmount",
              "type": "bytes"
            },
            {
              "internalType": "bytes",
              "name": "predicate",
              "type": "bytes"
            },
            {
              "internalType": "bytes",
              "name": "permit",
              "type": "bytes"
            },
            {
              "internalType": "bytes",
              "name": "interaction",
              "type": "bytes"
            }
          ],
          "internalType": "struct OrderMixin.Order",
          "name": "order",
          "type": "tuple"
        },
        {
          "internalType": "bytes32",
          "name": "orderHash",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "participant",
          "type": "address"
        }
      ],
      "name": "getInitialMarginReq",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "orderMakerAmount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "orderTakerAmount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "swapTakerAmount",
          "type": "uint256"
        }
      ],
      "name": "getMakerAmount",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "salt",
              "type": "uint256"
            },
            {
              "internalType": "address",
              "name": "asset",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "underlyingAsset",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "maker",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "receiver",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "allowedSender",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "fixedTokens",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "variableTokens",
              "type": "uint256"
            },
            {
              "internalType": "bool",
              "name": "isFixedTaker",
              "type": "bool"
            },
            {
              "internalType": "uint256",
              "name": "beginTimestamp",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "endTimestamp",
              "type": "uint256"
            },
            {
              "internalType": "int128",
              "name": "t",
              "type": "int128"
            },
            {
              "internalType": "bytes",
              "name": "makerAssetData",
              "type": "bytes"
            },
            {
              "internalType": "bytes",
              "name": "takerAssetData",
              "type": "bytes"
            },
            {
              "internalType": "bytes",
              "name": "getMakerAmount",
              "type": "bytes"
            },
            {
              "internalType": "bytes",
              "name": "getTakerAmount",
              "type": "bytes"
            },
            {
              "internalType": "bytes",
              "name": "predicate",
              "type": "bytes"
            },
            {
              "internalType": "bytes",
              "name": "permit",
              "type": "bytes"
            },
            {
              "internalType": "bytes",
              "name": "interaction",
              "type": "bytes"
            }
          ],
          "internalType": "struct OrderMixin.Order",
          "name": "order",
          "type": "tuple"
        },
        {
          "internalType": "bytes32",
          "name": "orderHash",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "participant",
          "type": "address"
        }
      ],
      "name": "getMarginReq",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "orderMakerAmount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "orderTakerAmount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "swapMakerAmount",
          "type": "uint256"
        }
      ],
      "name": "getTakerAmount",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "value",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "target",
          "type": "address"
        },
        {
          "internalType": "bytes",
          "name": "data",
          "type": "bytes"
        }
      ],
      "name": "gt",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "salt",
              "type": "uint256"
            },
            {
              "internalType": "address",
              "name": "asset",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "underlyingAsset",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "maker",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "receiver",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "allowedSender",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "fixedTokens",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "variableTokens",
              "type": "uint256"
            },
            {
              "internalType": "bool",
              "name": "isFixedTaker",
              "type": "bool"
            },
            {
              "internalType": "uint256",
              "name": "beginTimestamp",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "endTimestamp",
              "type": "uint256"
            },
            {
              "internalType": "int128",
              "name": "t",
              "type": "int128"
            },
            {
              "internalType": "bytes",
              "name": "makerAssetData",
              "type": "bytes"
            },
            {
              "internalType": "bytes",
              "name": "takerAssetData",
              "type": "bytes"
            },
            {
              "internalType": "bytes",
              "name": "getMakerAmount",
              "type": "bytes"
            },
            {
              "internalType": "bytes",
              "name": "getTakerAmount",
              "type": "bytes"
            },
            {
              "internalType": "bytes",
              "name": "predicate",
              "type": "bytes"
            },
            {
              "internalType": "bytes",
              "name": "permit",
              "type": "bytes"
            },
            {
              "internalType": "bytes",
              "name": "interaction",
              "type": "bytes"
            }
          ],
          "internalType": "struct OrderMixin.Order",
          "name": "order",
          "type": "tuple"
        }
      ],
      "name": "hashOrder",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "increaseNonce",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "name": "isOrderDefaulted",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "salt",
              "type": "uint256"
            },
            {
              "internalType": "address",
              "name": "asset",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "underlyingAsset",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "maker",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "receiver",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "allowedSender",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "fixedTokens",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "variableTokens",
              "type": "uint256"
            },
            {
              "internalType": "bool",
              "name": "isFixedTaker",
              "type": "bool"
            },
            {
              "internalType": "uint256",
              "name": "beginTimestamp",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "endTimestamp",
              "type": "uint256"
            },
            {
              "internalType": "int128",
              "name": "t",
              "type": "int128"
            },
            {
              "internalType": "bytes",
              "name": "makerAssetData",
              "type": "bytes"
            },
            {
              "internalType": "bytes",
              "name": "takerAssetData",
              "type": "bytes"
            },
            {
              "internalType": "bytes",
              "name": "getMakerAmount",
              "type": "bytes"
            },
            {
              "internalType": "bytes",
              "name": "getTakerAmount",
              "type": "bytes"
            },
            {
              "internalType": "bytes",
              "name": "predicate",
              "type": "bytes"
            },
            {
              "internalType": "bytes",
              "name": "permit",
              "type": "bytes"
            },
            {
              "internalType": "bytes",
              "name": "interaction",
              "type": "bytes"
            }
          ],
          "internalType": "struct OrderMixin.Order",
          "name": "order",
          "type": "tuple"
        },
        {
          "internalType": "address",
          "name": "defaulter",
          "type": "address"
        }
      ],
      "name": "liquidate",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "liquidatorMargin",
      "outputs": [
        {
          "internalType": "int128",
          "name": "",
          "type": "int128"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "value",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "target",
          "type": "address"
        },
        {
          "internalType": "bytes",
          "name": "data",
          "type": "bytes"
        }
      ],
      "name": "lt",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "nonce",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "makerAddress",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "makerNonce",
          "type": "uint256"
        }
      ],
      "name": "nonceEquals",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "oppositePartyMargin",
      "outputs": [
        {
          "internalType": "int128",
          "name": "",
          "type": "int128"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "oppositePartyMarginNoLiquidator",
      "outputs": [
        {
          "internalType": "int128",
          "name": "",
          "type": "int128"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address[]",
          "name": "targets",
          "type": "address[]"
        },
        {
          "internalType": "bytes[]",
          "name": "data",
          "type": "bytes[]"
        }
      ],
      "name": "or",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "orderParticipantFixedTokens",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "orderParticipantMargin",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "orderParticipantVariableTokens",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "orderHash",
          "type": "bytes32"
        }
      ],
      "name": "remaining",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "orderHash",
          "type": "bytes32"
        }
      ],
      "name": "remainingRaw",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "asset",
          "type": "address"
        },
        {
          "internalType": "int128",
          "name": "alpha",
          "type": "int128"
        }
      ],
      "name": "setAssetAlpha",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "asset",
          "type": "address"
        },
        {
          "internalType": "int128",
          "name": "beta",
          "type": "int128"
        }
      ],
      "name": "setAssetBeta",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "asset",
          "type": "address"
        },
        {
          "internalType": "int128",
          "name": "lowerBoundMul",
          "type": "int128"
        }
      ],
      "name": "setAssetLowerBoundMul",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "asset",
          "type": "address"
        },
        {
          "internalType": "int128",
          "name": "sigma",
          "type": "int128"
        }
      ],
      "name": "setAssetSigma",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "asset",
          "type": "address"
        },
        {
          "internalType": "int128",
          "name": "upperBoundMul",
          "type": "int128"
        }
      ],
      "name": "setAssetUpperBoundMul",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "int128",
          "name": "_liquidatorMargin",
          "type": "int128"
        }
      ],
      "name": "setLiquidatorMargin",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "int128",
          "name": "_oppositePartyMargin",
          "type": "int128"
        }
      ],
      "name": "setOppositePartyMargin",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "int128",
          "name": "_oppositePartyMarginNoLiquidator",
          "type": "int128"
        }
      ],
      "name": "setOppositePartyMarginNoLiquidator",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "salt",
              "type": "uint256"
            },
            {
              "internalType": "address",
              "name": "asset",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "underlyingAsset",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "maker",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "receiver",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "allowedSender",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "fixedTokens",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "variableTokens",
              "type": "uint256"
            },
            {
              "internalType": "bool",
              "name": "isFixedTaker",
              "type": "bool"
            },
            {
              "internalType": "uint256",
              "name": "beginTimestamp",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "endTimestamp",
              "type": "uint256"
            },
            {
              "internalType": "int128",
              "name": "t",
              "type": "int128"
            },
            {
              "internalType": "bytes",
              "name": "makerAssetData",
              "type": "bytes"
            },
            {
              "internalType": "bytes",
              "name": "takerAssetData",
              "type": "bytes"
            },
            {
              "internalType": "bytes",
              "name": "getMakerAmount",
              "type": "bytes"
            },
            {
              "internalType": "bytes",
              "name": "getTakerAmount",
              "type": "bytes"
            },
            {
              "internalType": "bytes",
              "name": "predicate",
              "type": "bytes"
            },
            {
              "internalType": "bytes",
              "name": "permit",
              "type": "bytes"
            },
            {
              "internalType": "bytes",
              "name": "interaction",
              "type": "bytes"
            }
          ],
          "internalType": "struct OrderMixin.Order",
          "name": "order",
          "type": "tuple"
        },
        {
          "internalType": "address",
          "name": "settler",
          "type": "address"
        }
      ],
      "name": "settleOrder",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address[]",
          "name": "targets",
          "type": "address[]"
        },
        {
          "internalType": "bytes[]",
          "name": "data",
          "type": "bytes[]"
        }
      ],
      "name": "simulateCalls",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract AggregatorV3Interface",
          "name": "oracle",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "inverseAndSpread",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "singlePrice",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "time",
          "type": "uint256"
        }
      ],
      "name": "timestampBelow",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0xb7f898d0ed2a8ef7752b06d784b39dfbbb99ba08fbdf25cd1d2131b4b7ca75be",
  "receipt": {
    "to": null,
    "from": "0x39521925DaF14B0d64452B8A1d14A850f1C75B34",
    "contractAddress": "0xE08cEE27Cfa6F9c2F92Fd9cc6b7206282787f282",
    "transactionIndex": 3,
    "gasUsed": "5356308",
    "logsBloom": "0x
    "blockHash": "0x7ca63a3374500d4b2bd1a936339a870604f41e83215d8c524110a4df206152d2",
    "transactionHash": "0xb7f898d0ed2a8ef7752b06d784b39dfbbb99ba08fbdf25cd1d2131b4b7ca75be",
    "logs": [],
    "blockNumber": 10254616,
    "cumulativeGasUsed": "6526204",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0x40a0bCf1CD1A31157D77BF5F2340218F5d7fAf72"
  ],
  "numDeployments": 1,
  "solcInputHash": "80635ab936506e7e25a865a672cbbb56",
  "metadata": "{\"compiler\":{\"version\":\"0.8.11+commit.d7f03943\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"contract OracleMock\",\"name\":\"_oracle\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"maker\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newNonce\",\"type\":\"uint256\"}],\"name\":\"NonceIncreased\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"maker\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"orderHash\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"remainingRaw\",\"type\":\"uint256\"}],\"name\":\"OrderCanceled\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"maker\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"orderHash\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"remaining\",\"type\":\"uint256\"}],\"name\":\"OrderFilled\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"DOMAIN_SEPARATOR\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"LIMIT_ORDER_TYPEHASH\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"salt\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"asset\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"underlyingAsset\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"maker\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"allowedSender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"fixedTokens\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"variableTokens\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"isFixedTaker\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"beginTimestamp\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"endTimestamp\",\"type\":\"uint256\"},{\"internalType\":\"int128\",\"name\":\"t\",\"type\":\"int128\"},{\"internalType\":\"bytes\",\"name\":\"makerAssetData\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"takerAssetData\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"getMakerAmount\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"getTakerAmount\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"predicate\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"permit\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"interaction\",\"type\":\"bytes\"}],\"internalType\":\"struct OrderMixin.Order\",\"name\":\"order\",\"type\":\"tuple\"},{\"internalType\":\"address\",\"name\":\"participant\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"addMargin\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"amount\",\"type\":\"uint8\"}],\"name\":\"advanceNonce\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"targets\",\"type\":\"address[]\"},{\"internalType\":\"bytes[]\",\"name\":\"data\",\"type\":\"bytes[]\"}],\"name\":\"and\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"target\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"arbitraryStaticCall\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"assetAlpha\",\"outputs\":[{\"internalType\":\"int128\",\"name\":\"\",\"type\":\"int128\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"assetBeta\",\"outputs\":[{\"internalType\":\"int128\",\"name\":\"\",\"type\":\"int128\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"assetLowerBoundMul\",\"outputs\":[{\"internalType\":\"int128\",\"name\":\"\",\"type\":\"int128\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"assetSigma\",\"outputs\":[{\"internalType\":\"int128\",\"name\":\"\",\"type\":\"int128\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"assetUpperBoundMul\",\"outputs\":[{\"internalType\":\"int128\",\"name\":\"\",\"type\":\"int128\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"salt\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"asset\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"underlyingAsset\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"maker\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"allowedSender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"fixedTokens\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"variableTokens\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"isFixedTaker\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"beginTimestamp\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"endTimestamp\",\"type\":\"uint256\"},{\"internalType\":\"int128\",\"name\":\"t\",\"type\":\"int128\"},{\"internalType\":\"bytes\",\"name\":\"makerAssetData\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"takerAssetData\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"getMakerAmount\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"getTakerAmount\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"predicate\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"permit\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"interaction\",\"type\":\"bytes\"}],\"internalType\":\"struct OrderMixin.Order\",\"name\":\"order\",\"type\":\"tuple\"}],\"name\":\"cancelOrder\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"salt\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"asset\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"underlyingAsset\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"maker\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"allowedSender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"fixedTokens\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"variableTokens\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"isFixedTaker\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"beginTimestamp\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"endTimestamp\",\"type\":\"uint256\"},{\"internalType\":\"int128\",\"name\":\"t\",\"type\":\"int128\"},{\"internalType\":\"bytes\",\"name\":\"makerAssetData\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"takerAssetData\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"getMakerAmount\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"getTakerAmount\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"predicate\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"permit\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"interaction\",\"type\":\"bytes\"}],\"internalType\":\"struct OrderMixin.Order\",\"name\":\"order\",\"type\":\"tuple\"}],\"name\":\"checkPredicate\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"name\":\"defaultedFunds\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract AggregatorV3Interface\",\"name\":\"oracle1\",\"type\":\"address\"},{\"internalType\":\"contract AggregatorV3Interface\",\"name\":\"oracle2\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"spread\",\"type\":\"uint256\"},{\"internalType\":\"int256\",\"name\":\"decimalsScale\",\"type\":\"int256\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"doublePrice\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"target\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"eq\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"salt\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"asset\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"underlyingAsset\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"maker\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"allowedSender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"fixedTokens\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"variableTokens\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"isFixedTaker\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"beginTimestamp\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"endTimestamp\",\"type\":\"uint256\"},{\"internalType\":\"int128\",\"name\":\"t\",\"type\":\"int128\"},{\"internalType\":\"bytes\",\"name\":\"makerAssetData\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"takerAssetData\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"getMakerAmount\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"getTakerAmount\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"predicate\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"permit\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"interaction\",\"type\":\"bytes\"}],\"internalType\":\"struct OrderMixin.Order\",\"name\":\"order\",\"type\":\"tuple\"},{\"internalType\":\"bytes\",\"name\":\"signature\",\"type\":\"bytes\"},{\"internalType\":\"uint256\",\"name\":\"fixedTokens\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"variableTokens\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"thresholdTokens\",\"type\":\"uint256\"}],\"name\":\"fillOrder\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"salt\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"asset\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"underlyingAsset\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"maker\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"allowedSender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"fixedTokens\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"variableTokens\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"isFixedTaker\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"beginTimestamp\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"endTimestamp\",\"type\":\"uint256\"},{\"internalType\":\"int128\",\"name\":\"t\",\"type\":\"int128\"},{\"internalType\":\"bytes\",\"name\":\"makerAssetData\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"takerAssetData\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"getMakerAmount\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"getTakerAmount\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"predicate\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"permit\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"interaction\",\"type\":\"bytes\"}],\"internalType\":\"struct OrderMixin.Order\",\"name\":\"order\",\"type\":\"tuple\"},{\"internalType\":\"bytes\",\"name\":\"signature\",\"type\":\"bytes\"},{\"internalType\":\"uint256\",\"name\":\"fixedTokens\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"variableTokens\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"thresholdTokens\",\"type\":\"uint256\"}],\"name\":\"fillOrderTo\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"salt\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"asset\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"underlyingAsset\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"maker\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"allowedSender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"fixedTokens\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"variableTokens\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"isFixedTaker\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"beginTimestamp\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"endTimestamp\",\"type\":\"uint256\"},{\"internalType\":\"int128\",\"name\":\"t\",\"type\":\"int128\"},{\"internalType\":\"bytes\",\"name\":\"makerAssetData\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"takerAssetData\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"getMakerAmount\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"getTakerAmount\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"predicate\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"permit\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"interaction\",\"type\":\"bytes\"}],\"internalType\":\"struct OrderMixin.Order\",\"name\":\"order\",\"type\":\"tuple\"},{\"internalType\":\"bytes\",\"name\":\"signature\",\"type\":\"bytes\"},{\"internalType\":\"uint256\",\"name\":\"fixedTokens\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"variableTokens\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"thresholdTokens\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"permit\",\"type\":\"bytes\"}],\"name\":\"fillOrderToWithPermit\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"asset\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"underlyingAsset\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"startTimestamp\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"endTimestamp\",\"type\":\"uint256\"}],\"name\":\"getAverageAccruedAPYBetweenTimestamps\",\"outputs\":[{\"internalType\":\"int128\",\"name\":\"apy\",\"type\":\"int128\"},{\"internalType\":\"int128\",\"name\":\"ewma\",\"type\":\"int128\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"salt\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"asset\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"underlyingAsset\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"maker\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"allowedSender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"fixedTokens\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"variableTokens\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"isFixedTaker\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"beginTimestamp\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"endTimestamp\",\"type\":\"uint256\"},{\"internalType\":\"int128\",\"name\":\"t\",\"type\":\"int128\"},{\"internalType\":\"bytes\",\"name\":\"makerAssetData\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"takerAssetData\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"getMakerAmount\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"getTakerAmount\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"predicate\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"permit\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"interaction\",\"type\":\"bytes\"}],\"internalType\":\"struct OrderMixin.Order\",\"name\":\"order\",\"type\":\"tuple\"},{\"internalType\":\"bytes32\",\"name\":\"orderHash\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"participant\",\"type\":\"address\"}],\"name\":\"getInitialMarginReq\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"orderMakerAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"orderTakerAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"swapTakerAmount\",\"type\":\"uint256\"}],\"name\":\"getMakerAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"salt\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"asset\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"underlyingAsset\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"maker\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"allowedSender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"fixedTokens\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"variableTokens\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"isFixedTaker\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"beginTimestamp\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"endTimestamp\",\"type\":\"uint256\"},{\"internalType\":\"int128\",\"name\":\"t\",\"type\":\"int128\"},{\"internalType\":\"bytes\",\"name\":\"makerAssetData\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"takerAssetData\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"getMakerAmount\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"getTakerAmount\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"predicate\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"permit\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"interaction\",\"type\":\"bytes\"}],\"internalType\":\"struct OrderMixin.Order\",\"name\":\"order\",\"type\":\"tuple\"},{\"internalType\":\"bytes32\",\"name\":\"orderHash\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"participant\",\"type\":\"address\"}],\"name\":\"getMarginReq\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"orderMakerAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"orderTakerAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"swapMakerAmount\",\"type\":\"uint256\"}],\"name\":\"getTakerAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"target\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"gt\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"salt\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"asset\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"underlyingAsset\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"maker\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"allowedSender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"fixedTokens\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"variableTokens\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"isFixedTaker\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"beginTimestamp\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"endTimestamp\",\"type\":\"uint256\"},{\"internalType\":\"int128\",\"name\":\"t\",\"type\":\"int128\"},{\"internalType\":\"bytes\",\"name\":\"makerAssetData\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"takerAssetData\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"getMakerAmount\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"getTakerAmount\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"predicate\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"permit\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"interaction\",\"type\":\"bytes\"}],\"internalType\":\"struct OrderMixin.Order\",\"name\":\"order\",\"type\":\"tuple\"}],\"name\":\"hashOrder\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"increaseNonce\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"name\":\"isOrderDefaulted\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"salt\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"asset\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"underlyingAsset\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"maker\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"allowedSender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"fixedTokens\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"variableTokens\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"isFixedTaker\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"beginTimestamp\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"endTimestamp\",\"type\":\"uint256\"},{\"internalType\":\"int128\",\"name\":\"t\",\"type\":\"int128\"},{\"internalType\":\"bytes\",\"name\":\"makerAssetData\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"takerAssetData\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"getMakerAmount\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"getTakerAmount\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"predicate\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"permit\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"interaction\",\"type\":\"bytes\"}],\"internalType\":\"struct OrderMixin.Order\",\"name\":\"order\",\"type\":\"tuple\"},{\"internalType\":\"address\",\"name\":\"defaulter\",\"type\":\"address\"}],\"name\":\"liquidate\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"liquidatorMargin\",\"outputs\":[{\"internalType\":\"int128\",\"name\":\"\",\"type\":\"int128\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"target\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"lt\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"nonce\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"makerAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"makerNonce\",\"type\":\"uint256\"}],\"name\":\"nonceEquals\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"oppositePartyMargin\",\"outputs\":[{\"internalType\":\"int128\",\"name\":\"\",\"type\":\"int128\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"oppositePartyMarginNoLiquidator\",\"outputs\":[{\"internalType\":\"int128\",\"name\":\"\",\"type\":\"int128\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"targets\",\"type\":\"address[]\"},{\"internalType\":\"bytes[]\",\"name\":\"data\",\"type\":\"bytes[]\"}],\"name\":\"or\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"orderParticipantFixedTokens\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"orderParticipantMargin\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"orderParticipantVariableTokens\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"orderHash\",\"type\":\"bytes32\"}],\"name\":\"remaining\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"orderHash\",\"type\":\"bytes32\"}],\"name\":\"remainingRaw\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"asset\",\"type\":\"address\"},{\"internalType\":\"int128\",\"name\":\"alpha\",\"type\":\"int128\"}],\"name\":\"setAssetAlpha\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"asset\",\"type\":\"address\"},{\"internalType\":\"int128\",\"name\":\"beta\",\"type\":\"int128\"}],\"name\":\"setAssetBeta\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"asset\",\"type\":\"address\"},{\"internalType\":\"int128\",\"name\":\"lowerBoundMul\",\"type\":\"int128\"}],\"name\":\"setAssetLowerBoundMul\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"asset\",\"type\":\"address\"},{\"internalType\":\"int128\",\"name\":\"sigma\",\"type\":\"int128\"}],\"name\":\"setAssetSigma\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"asset\",\"type\":\"address\"},{\"internalType\":\"int128\",\"name\":\"upperBoundMul\",\"type\":\"int128\"}],\"name\":\"setAssetUpperBoundMul\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"int128\",\"name\":\"_liquidatorMargin\",\"type\":\"int128\"}],\"name\":\"setLiquidatorMargin\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"int128\",\"name\":\"_oppositePartyMargin\",\"type\":\"int128\"}],\"name\":\"setOppositePartyMargin\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"int128\",\"name\":\"_oppositePartyMarginNoLiquidator\",\"type\":\"int128\"}],\"name\":\"setOppositePartyMarginNoLiquidator\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"salt\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"asset\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"underlyingAsset\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"maker\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"allowedSender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"fixedTokens\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"variableTokens\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"isFixedTaker\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"beginTimestamp\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"endTimestamp\",\"type\":\"uint256\"},{\"internalType\":\"int128\",\"name\":\"t\",\"type\":\"int128\"},{\"internalType\":\"bytes\",\"name\":\"makerAssetData\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"takerAssetData\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"getMakerAmount\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"getTakerAmount\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"predicate\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"permit\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"interaction\",\"type\":\"bytes\"}],\"internalType\":\"struct OrderMixin.Order\",\"name\":\"order\",\"type\":\"tuple\"},{\"internalType\":\"address\",\"name\":\"settler\",\"type\":\"address\"}],\"name\":\"settleOrder\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"targets\",\"type\":\"address[]\"},{\"internalType\":\"bytes[]\",\"name\":\"data\",\"type\":\"bytes[]\"}],\"name\":\"simulateCalls\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract AggregatorV3Interface\",\"name\":\"oracle\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"inverseAndSpread\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"singlePrice\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"time\",\"type\":\"uint256\"}],\"name\":\"timestampBelow\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"and(address[],bytes[])\":{\"returns\":{\"_0\":\"Result True if calls to all targets returned True. Otherwise, false\"}},\"arbitraryStaticCall(address,bytes)\":{\"returns\":{\"_0\":\"Result Bytes transmuted to uint256\"}},\"doublePrice(address,address,uint256,int256,uint256)\":{\"returns\":{\"_0\":\"Result Token A relative price times amount\"}},\"eq(uint256,address,bytes)\":{\"params\":{\"value\":\"Value to test\"},\"returns\":{\"_0\":\"Result True if call to target returns the same value as `value`. Otherwise, false\"}},\"fillOrder((uint256,address,address,address,address,address,uint256,uint256,bool,uint256,uint256,int128,bytes,bytes,bytes,bytes,bytes,bytes,bytes),bytes,uint256,uint256,uint256)\":{\"params\":{\"fixedTokens\":\"Fixed Tokens\",\"order\":\"Order quote to fill\",\"signature\":\"Signature to confirm quote ownership\",\"thresholdTokens\":\"Specifies maximum allowed takingAmount when takingAmount is zero, otherwise specifies minimum allowed makingAmount\",\"variableTokens\":\"Variable Tokens\"}},\"fillOrderTo((uint256,address,address,address,address,address,uint256,uint256,bool,uint256,uint256,int128,bytes,bytes,bytes,bytes,bytes,bytes,bytes),bytes,uint256,uint256,uint256)\":{\"params\":{\"fixedTokens\":\"Fixed Tokens\",\"order\":\"Order quote to fill\",\"signature\":\"Signature to confirm quote ownership\",\"thresholdTokens\":\"Specifies maximum allowed takingAmount when takingAmount is zero, otherwise specifies minimum allowed makingAmount\",\"variableTokens\":\"Variable Tokens\"}},\"fillOrderToWithPermit((uint256,address,address,address,address,address,uint256,uint256,bool,uint256,uint256,int128,bytes,bytes,bytes,bytes,bytes,bytes,bytes),bytes,uint256,uint256,uint256,bytes)\":{\"details\":\"See tests for examples\",\"params\":{\"fixedTokens\":\"Fixed Tokens\",\"order\":\"Order quote to fill\",\"permit\":\"Should consist of abiencoded token address and encoded `IERC20Permit.permit` call.\",\"signature\":\"Signature to confirm quote ownership\",\"thresholdTokens\":\"Specifies maximum allowed takingAmount when takingAmount is zero, otherwise specifies minimum allowed makingAmount\",\"variableTokens\":\"Variable Tokens\"}},\"getMakerAmount(uint256,uint256,uint256)\":{\"returns\":{\"_0\":\"Result Ceiled maker amount\"}},\"getTakerAmount(uint256,uint256,uint256)\":{\"returns\":{\"_0\":\"Result Floored taker amount\"}},\"gt(uint256,address,bytes)\":{\"params\":{\"value\":\"Value to test\"},\"returns\":{\"_0\":\"Result True if call to target returns value which is bigger than `value`. Otherwise, false\"}},\"lt(uint256,address,bytes)\":{\"params\":{\"value\":\"Value to test\"},\"returns\":{\"_0\":\"Result True if call to target returns value which is lower than `value`. Otherwise, false\"}},\"nonceEquals(address,uint256)\":{\"returns\":{\"_0\":\"Result True if `makerAddress` has specified nonce. Otherwise, false\"}},\"or(address[],bytes[])\":{\"returns\":{\"_0\":\"Result True if call to any target returned True. Otherwise, false\"}},\"remainingRaw(bytes32)\":{\"returns\":{\"_0\":\"Result Unfilled amount of order plus one if order exists. Otherwise 0\"}},\"simulateCalls(address[],bytes[])\":{\"params\":{\"data\":\"Array of data that will be passed to each call\",\"targets\":\"Array of addresses that will be called\"}},\"singlePrice(address,uint256,uint256)\":{\"params\":{\"inverseAndSpread\":\"concatenated inverse flag and spread. Lowest 254 bits specify spread amount. Spread is scaled by 1e9, i.e. 101% = 1.01e9, 99% = 0.99e9. Highest bit is set when oracle price should be inverted, e.g. for DAI-ETH oracle, inverse=false means that we request DAI price in ETH and inverse=true means that we request ETH price in DAI\"},\"returns\":{\"_0\":\"Amount * spread * oracle price\"}},\"timestampBelow(uint256)\":{\"returns\":{\"_0\":\"Result True if current block timestamp is lower than `time`. Otherwise, false\"}}},\"title\":\"1inch Limit Order Protocol v2\",\"version\":1},\"userdoc\":{\"events\":{\"OrderCanceled(address,bytes32,uint256)\":{\"notice\":\"Emitted when order gets cancelled\"},\"OrderFilled(address,bytes32,uint256)\":{\"notice\":\"Emitted every time order gets filled, including partial fills\"}},\"kind\":\"user\",\"methods\":{\"advanceNonce(uint8)\":{\"notice\":\"Advances nonce by specified amount\"},\"and(address[],bytes[])\":{\"notice\":\"Calls every target with corresponding data\"},\"arbitraryStaticCall(address,bytes)\":{\"notice\":\"Performs an arbitrary call to target with data\"},\"cancelOrder((uint256,address,address,address,address,address,uint256,uint256,bool,uint256,uint256,int128,bytes,bytes,bytes,bytes,bytes,bytes,bytes))\":{\"notice\":\"Cancels order by setting remaining amount to zero\"},\"checkPredicate((uint256,address,address,address,address,address,uint256,uint256,bool,uint256,uint256,int128,bytes,bytes,bytes,bytes,bytes,bytes,bytes))\":{\"notice\":\"Checks order predicate\"},\"doublePrice(address,address,uint256,int256,uint256)\":{\"notice\":\"Calculates price of token A relative to token B. Note that order is important\"},\"eq(uint256,address,bytes)\":{\"notice\":\"Calls target with specified data and tests if it's equal to the value\"},\"fillOrder((uint256,address,address,address,address,address,uint256,uint256,bool,uint256,uint256,int128,bytes,bytes,bytes,bytes,bytes,bytes,bytes),bytes,uint256,uint256,uint256)\":{\"notice\":\"Fills an order. If one doesn't exist (first fill) it will be created using order.makerAssetData\"},\"fillOrderTo((uint256,address,address,address,address,address,uint256,uint256,bool,uint256,uint256,int128,bytes,bytes,bytes,bytes,bytes,bytes,bytes),bytes,uint256,uint256,uint256)\":{\"notice\":\"Same as `fillOrder` but allows to specify funds destination instead of `msg.sender`\"},\"fillOrderToWithPermit((uint256,address,address,address,address,address,uint256,uint256,bool,uint256,uint256,int128,bytes,bytes,bytes,bytes,bytes,bytes,bytes),bytes,uint256,uint256,uint256,bytes)\":{\"notice\":\"Same as `fillOrder` but calls permit first, allowing to approve token spending and make a swap in one transaction. Also allows to specify funds destination instead of `msg.sender`\"},\"getMakerAmount(uint256,uint256,uint256)\":{\"notice\":\"Calculates maker amount\"},\"getTakerAmount(uint256,uint256,uint256)\":{\"notice\":\"Calculates taker amount\"},\"gt(uint256,address,bytes)\":{\"notice\":\"Calls target with specified data and tests if it's bigger than value\"},\"increaseNonce()\":{\"notice\":\"Advances nonce by one\"},\"lt(uint256,address,bytes)\":{\"notice\":\"Calls target with specified data and tests if it's lower than value\"},\"nonceEquals(address,uint256)\":{\"notice\":\"Checks if `makerAddress` has specified `makerNonce`\"},\"or(address[],bytes[])\":{\"notice\":\"Calls every target with corresponding data\"},\"remaining(bytes32)\":{\"notice\":\"Returns unfilled amount for order. Throws if order does not exist\"},\"remainingRaw(bytes32)\":{\"notice\":\"Returns unfilled amount for order\"},\"simulateCalls(address[],bytes[])\":{\"notice\":\"Calls every target with corresponding data. Then reverts with CALL_RESULTS_0101011 where zeroes and ones denote failure or success of the corresponding call\"},\"singlePrice(address,uint256,uint256)\":{\"notice\":\"Calculates price of token relative to oracle unit (ETH or USD)\"},\"timestampBelow(uint256)\":{\"notice\":\"Checks passed time against block timestamp\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/LimitOrderProtocol.sol\":\"LimitOrderProtocol\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":1000},\"remappings\":[]},\"sources\":{\"@chainlink/contracts/src/v0.8/interfaces/AggregatorInterface.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ninterface AggregatorInterface {\\n  function latestAnswer() external view returns (int256);\\n\\n  function latestTimestamp() external view returns (uint256);\\n\\n  function latestRound() external view returns (uint256);\\n\\n  function getAnswer(uint256 roundId) external view returns (int256);\\n\\n  function getTimestamp(uint256 roundId) external view returns (uint256);\\n\\n  event AnswerUpdated(int256 indexed current, uint256 indexed roundId, uint256 updatedAt);\\n\\n  event NewRound(uint256 indexed roundId, address indexed startedBy, uint256 startedAt);\\n}\\n\",\"keccak256\":\"0xb496651006b9a2a07920ffe116928b11e2a6458e21361cecca51409522488ca7\",\"license\":\"MIT\"},\"@chainlink/contracts/src/v0.8/interfaces/AggregatorV2V3Interface.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport \\\"./AggregatorInterface.sol\\\";\\nimport \\\"./AggregatorV3Interface.sol\\\";\\n\\ninterface AggregatorV2V3Interface is AggregatorInterface, AggregatorV3Interface {}\\n\",\"keccak256\":\"0x4a7757ff7bbafe044cd49c2a45c7c18ec50eff7c7af6869face5e1e9cda976f2\",\"license\":\"MIT\"},\"@chainlink/contracts/src/v0.8/interfaces/AggregatorV3Interface.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ninterface AggregatorV3Interface {\\n  function decimals() external view returns (uint8);\\n\\n  function description() external view returns (string memory);\\n\\n  function version() external view returns (uint256);\\n\\n  // getRoundData and latestRoundData should both raise \\\"No data present\\\"\\n  // if they do not have data to report, instead of returning unset values\\n  // which could be misinterpreted as actual reported values.\\n  function getRoundData(uint80 _roundId)\\n    external\\n    view\\n    returns (\\n      uint80 roundId,\\n      int256 answer,\\n      uint256 startedAt,\\n      uint256 updatedAt,\\n      uint80 answeredInRound\\n    );\\n\\n  function latestRoundData()\\n    external\\n    view\\n    returns (\\n      uint80 roundId,\\n      int256 answer,\\n      uint256 startedAt,\\n      uint256 updatedAt,\\n      uint80 answeredInRound\\n    );\\n}\\n\",\"keccak256\":\"0xf2b6c9adb3552254df1445b73563cf014434ff5e78663e9b961b6c059506ceb5\",\"license\":\"MIT\"},\"@openzeppelin/contracts/interfaces/IERC1271.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (interfaces/IERC1271.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC1271 standard signature validation method for\\n * contracts as defined in https://eips.ethereum.org/EIPS/eip-1271[ERC-1271].\\n *\\n * _Available since v4.1._\\n */\\ninterface IERC1271 {\\n    /**\\n     * @dev Should return whether the signature provided is valid for the provided data\\n     * @param hash      Hash of the data to be signed\\n     * @param signature Signature byte array associated with _data\\n     */\\n    function isValidSignature(bytes32 hash, bytes memory signature) external view returns (bytes4 magicValue);\\n}\\n\",\"keccak256\":\"0x0705a4b1b86d7b0bd8432118f226ba139c44b9dcaba0a6eafba2dd7d0639c544\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\",\"keccak256\":\"0xbbc8ac883ac3c0078ce5ad3e288fbb3ffcc8a30c3a98c0fda0114d64fc44fca2\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/extensions/draft-IERC20Permit.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/draft-IERC20Permit.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in\\n * https://eips.ethereum.org/EIPS/eip-2612[EIP-2612].\\n *\\n * Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by\\n * presenting a message signed by the account. By not relying on {IERC20-approve}, the token holder account doesn't\\n * need to send a transaction, and thus is not required to hold Ether at all.\\n */\\ninterface IERC20Permit {\\n    /**\\n     * @dev Sets `value` as the allowance of `spender` over ``owner``'s tokens,\\n     * given ``owner``'s signed approval.\\n     *\\n     * IMPORTANT: The same issues {IERC20-approve} has related to transaction\\n     * ordering also apply here.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `deadline` must be a timestamp in the future.\\n     * - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner`\\n     * over the EIP712-formatted function arguments.\\n     * - the signature must use ``owner``'s current nonce (see {nonces}).\\n     *\\n     * For more information on the signature format, see the\\n     * https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP\\n     * section].\\n     */\\n    function permit(\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external;\\n\\n    /**\\n     * @dev Returns the current nonce for `owner`. This value must be\\n     * included whenever a signature is generated for {permit}.\\n     *\\n     * Every successful call to {permit} increases ``owner``'s nonce by one. This\\n     * prevents a signature from being used multiple times.\\n     */\\n    function nonces(address owner) external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the domain separator used in the encoding of the signature for {permit}, as defined by {EIP712}.\\n     */\\n    // solhint-disable-next-line func-name-mixedcase\\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\\n}\\n\",\"keccak256\":\"0xf41ca991f30855bf80ffd11e9347856a517b977f0a6c2d52e6421a99b7840329\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x2ccf9d2313a313d41a791505f2b5abfdc62191b5d4334f7f7a82691c088a1c87\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Strings.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Strings.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary Strings {\\n    bytes16 private constant _HEX_SYMBOLS = \\\"0123456789abcdef\\\";\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        // Inspired by OraclizeAPI's implementation - MIT licence\\n        // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\\n\\n        if (value == 0) {\\n            return \\\"0\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 digits;\\n        while (temp != 0) {\\n            digits++;\\n            temp /= 10;\\n        }\\n        bytes memory buffer = new bytes(digits);\\n        while (value != 0) {\\n            digits -= 1;\\n            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\\n            value /= 10;\\n        }\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        if (value == 0) {\\n            return \\\"0x00\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 length = 0;\\n        while (temp != 0) {\\n            length++;\\n            temp >>= 8;\\n        }\\n        return toHexString(value, length);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _HEX_SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n}\\n\",\"keccak256\":\"0x32c202bd28995dd20c4347b7c6467a6d3241c74c8ad3edcbb610cd9205916c45\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/cryptography/ECDSA.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (utils/cryptography/ECDSA.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../Strings.sol\\\";\\n\\n/**\\n * @dev Elliptic Curve Digital Signature Algorithm (ECDSA) operations.\\n *\\n * These functions can be used to verify that a message was signed by the holder\\n * of the private keys of a given address.\\n */\\nlibrary ECDSA {\\n    enum RecoverError {\\n        NoError,\\n        InvalidSignature,\\n        InvalidSignatureLength,\\n        InvalidSignatureS,\\n        InvalidSignatureV\\n    }\\n\\n    function _throwError(RecoverError error) private pure {\\n        if (error == RecoverError.NoError) {\\n            return; // no error: do nothing\\n        } else if (error == RecoverError.InvalidSignature) {\\n            revert(\\\"ECDSA: invalid signature\\\");\\n        } else if (error == RecoverError.InvalidSignatureLength) {\\n            revert(\\\"ECDSA: invalid signature length\\\");\\n        } else if (error == RecoverError.InvalidSignatureS) {\\n            revert(\\\"ECDSA: invalid signature 's' value\\\");\\n        } else if (error == RecoverError.InvalidSignatureV) {\\n            revert(\\\"ECDSA: invalid signature 'v' value\\\");\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the address that signed a hashed message (`hash`) with\\n     * `signature` or error string. This address can then be used for verification purposes.\\n     *\\n     * The `ecrecover` EVM opcode allows for malleable (non-unique) signatures:\\n     * this function rejects them by requiring the `s` value to be in the lower\\n     * half order, and the `v` value to be either 27 or 28.\\n     *\\n     * IMPORTANT: `hash` _must_ be the result of a hash operation for the\\n     * verification to be secure: it is possible to craft signatures that\\n     * recover to arbitrary addresses for non-hashed data. A safe way to ensure\\n     * this is by receiving a hash of the original message (which may otherwise\\n     * be too long), and then calling {toEthSignedMessageHash} on it.\\n     *\\n     * Documentation for signature generation:\\n     * - with https://web3js.readthedocs.io/en/v1.3.4/web3-eth-accounts.html#sign[Web3.js]\\n     * - with https://docs.ethers.io/v5/api/signer/#Signer-signMessage[ethers]\\n     *\\n     * _Available since v4.3._\\n     */\\n    function tryRecover(bytes32 hash, bytes memory signature) internal pure returns (address, RecoverError) {\\n        // Check the signature length\\n        // - case 65: r,s,v signature (standard)\\n        // - case 64: r,vs signature (cf https://eips.ethereum.org/EIPS/eip-2098) _Available since v4.1._\\n        if (signature.length == 65) {\\n            bytes32 r;\\n            bytes32 s;\\n            uint8 v;\\n            // ecrecover takes the signature parameters, and the only way to get them\\n            // currently is to use assembly.\\n            assembly {\\n                r := mload(add(signature, 0x20))\\n                s := mload(add(signature, 0x40))\\n                v := byte(0, mload(add(signature, 0x60)))\\n            }\\n            return tryRecover(hash, v, r, s);\\n        } else if (signature.length == 64) {\\n            bytes32 r;\\n            bytes32 vs;\\n            // ecrecover takes the signature parameters, and the only way to get them\\n            // currently is to use assembly.\\n            assembly {\\n                r := mload(add(signature, 0x20))\\n                vs := mload(add(signature, 0x40))\\n            }\\n            return tryRecover(hash, r, vs);\\n        } else {\\n            return (address(0), RecoverError.InvalidSignatureLength);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the address that signed a hashed message (`hash`) with\\n     * `signature`. This address can then be used for verification purposes.\\n     *\\n     * The `ecrecover` EVM opcode allows for malleable (non-unique) signatures:\\n     * this function rejects them by requiring the `s` value to be in the lower\\n     * half order, and the `v` value to be either 27 or 28.\\n     *\\n     * IMPORTANT: `hash` _must_ be the result of a hash operation for the\\n     * verification to be secure: it is possible to craft signatures that\\n     * recover to arbitrary addresses for non-hashed data. A safe way to ensure\\n     * this is by receiving a hash of the original message (which may otherwise\\n     * be too long), and then calling {toEthSignedMessageHash} on it.\\n     */\\n    function recover(bytes32 hash, bytes memory signature) internal pure returns (address) {\\n        (address recovered, RecoverError error) = tryRecover(hash, signature);\\n        _throwError(error);\\n        return recovered;\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-tryRecover} that receives the `r` and `vs` short-signature fields separately.\\n     *\\n     * See https://eips.ethereum.org/EIPS/eip-2098[EIP-2098 short signatures]\\n     *\\n     * _Available since v4.3._\\n     */\\n    function tryRecover(\\n        bytes32 hash,\\n        bytes32 r,\\n        bytes32 vs\\n    ) internal pure returns (address, RecoverError) {\\n        bytes32 s = vs & bytes32(0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff);\\n        uint8 v = uint8((uint256(vs) >> 255) + 27);\\n        return tryRecover(hash, v, r, s);\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-recover} that receives the `r and `vs` short-signature fields separately.\\n     *\\n     * _Available since v4.2._\\n     */\\n    function recover(\\n        bytes32 hash,\\n        bytes32 r,\\n        bytes32 vs\\n    ) internal pure returns (address) {\\n        (address recovered, RecoverError error) = tryRecover(hash, r, vs);\\n        _throwError(error);\\n        return recovered;\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-tryRecover} that receives the `v`,\\n     * `r` and `s` signature fields separately.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function tryRecover(\\n        bytes32 hash,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) internal pure returns (address, RecoverError) {\\n        // EIP-2 still allows signature malleability for ecrecover(). Remove this possibility and make the signature\\n        // unique. Appendix F in the Ethereum Yellow paper (https://ethereum.github.io/yellowpaper/paper.pdf), defines\\n        // the valid range for s in (301): 0 < s < secp256k1n \\u00f7 2 + 1, and for v in (302): v \\u2208 {27, 28}. Most\\n        // signatures from current libraries generate a unique signature with an s-value in the lower half order.\\n        //\\n        // If your library generates malleable signatures, such as s-values in the upper range, calculate a new s-value\\n        // with 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEBAAEDCE6AF48A03BBFD25E8CD0364141 - s1 and flip v from 27 to 28 or\\n        // vice versa. If your library also generates signatures with 0/1 for v instead 27/28, add 27 to v to accept\\n        // these malleable signatures as well.\\n        if (uint256(s) > 0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF5D576E7357A4501DDFE92F46681B20A0) {\\n            return (address(0), RecoverError.InvalidSignatureS);\\n        }\\n        if (v != 27 && v != 28) {\\n            return (address(0), RecoverError.InvalidSignatureV);\\n        }\\n\\n        // If the signature is valid (and not malleable), return the signer address\\n        address signer = ecrecover(hash, v, r, s);\\n        if (signer == address(0)) {\\n            return (address(0), RecoverError.InvalidSignature);\\n        }\\n\\n        return (signer, RecoverError.NoError);\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-recover} that receives the `v`,\\n     * `r` and `s` signature fields separately.\\n     */\\n    function recover(\\n        bytes32 hash,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) internal pure returns (address) {\\n        (address recovered, RecoverError error) = tryRecover(hash, v, r, s);\\n        _throwError(error);\\n        return recovered;\\n    }\\n\\n    /**\\n     * @dev Returns an Ethereum Signed Message, created from a `hash`. This\\n     * produces hash corresponding to the one signed with the\\n     * https://eth.wiki/json-rpc/API#eth_sign[`eth_sign`]\\n     * JSON-RPC method as part of EIP-191.\\n     *\\n     * See {recover}.\\n     */\\n    function toEthSignedMessageHash(bytes32 hash) internal pure returns (bytes32) {\\n        // 32 is the length in bytes of hash,\\n        // enforced by the type signature above\\n        return keccak256(abi.encodePacked(\\\"\\\\x19Ethereum Signed Message:\\\\n32\\\", hash));\\n    }\\n\\n    /**\\n     * @dev Returns an Ethereum Signed Message, created from `s`. This\\n     * produces hash corresponding to the one signed with the\\n     * https://eth.wiki/json-rpc/API#eth_sign[`eth_sign`]\\n     * JSON-RPC method as part of EIP-191.\\n     *\\n     * See {recover}.\\n     */\\n    function toEthSignedMessageHash(bytes memory s) internal pure returns (bytes32) {\\n        return keccak256(abi.encodePacked(\\\"\\\\x19Ethereum Signed Message:\\\\n\\\", Strings.toString(s.length), s));\\n    }\\n\\n    /**\\n     * @dev Returns an Ethereum Signed Typed Data, created from a\\n     * `domainSeparator` and a `structHash`. This produces hash corresponding\\n     * to the one signed with the\\n     * https://eips.ethereum.org/EIPS/eip-712[`eth_signTypedData`]\\n     * JSON-RPC method as part of EIP-712.\\n     *\\n     * See {recover}.\\n     */\\n    function toTypedDataHash(bytes32 domainSeparator, bytes32 structHash) internal pure returns (bytes32) {\\n        return keccak256(abi.encodePacked(\\\"\\\\x19\\\\x01\\\", domainSeparator, structHash));\\n    }\\n}\\n\",\"keccak256\":\"0x3c07f43e60e099b3b157243b3152722e73b80eeb7985c2cd73712828d7f7da29\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/cryptography/SignatureChecker.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (utils/cryptography/SignatureChecker.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./ECDSA.sol\\\";\\nimport \\\"../Address.sol\\\";\\nimport \\\"../../interfaces/IERC1271.sol\\\";\\n\\n/**\\n * @dev Signature verification helper that can be used instead of `ECDSA.recover` to seamlessly support both ECDSA\\n * signatures from externally owned accounts (EOAs) as well as ERC1271 signatures from smart contract wallets like\\n * Argent and Gnosis Safe.\\n *\\n * _Available since v4.1._\\n */\\nlibrary SignatureChecker {\\n    /**\\n     * @dev Checks if a signature is valid for a given signer and data hash. If the signer is a smart contract, the\\n     * signature is validated against that smart contract using ERC1271, otherwise it's validated using `ECDSA.recover`.\\n     *\\n     * NOTE: Unlike ECDSA signatures, contract signatures are revocable, and the outcome of this function can thus\\n     * change through time. It could return true at block N and false at block N+1 (or the opposite).\\n     */\\n    function isValidSignatureNow(\\n        address signer,\\n        bytes32 hash,\\n        bytes memory signature\\n    ) internal view returns (bool) {\\n        (address recovered, ECDSA.RecoverError error) = ECDSA.tryRecover(hash, signature);\\n        if (error == ECDSA.RecoverError.NoError && recovered == signer) {\\n            return true;\\n        }\\n\\n        (bool success, bytes memory result) = signer.staticcall(\\n            abi.encodeWithSelector(IERC1271.isValidSignature.selector, hash, signature)\\n        );\\n        return (success && result.length == 32 && abi.decode(result, (bytes4)) == IERC1271.isValidSignature.selector);\\n    }\\n}\\n\",\"keccak256\":\"0xc8add71d80d05a1390e1c656686a0ea10ffaebfcc433cc397a63fd725f376b7e\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/cryptography/draft-EIP712.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/cryptography/draft-EIP712.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./ECDSA.sol\\\";\\n\\n/**\\n * @dev https://eips.ethereum.org/EIPS/eip-712[EIP 712] is a standard for hashing and signing of typed structured data.\\n *\\n * The encoding specified in the EIP is very generic, and such a generic implementation in Solidity is not feasible,\\n * thus this contract does not implement the encoding itself. Protocols need to implement the type-specific encoding\\n * they need in their contracts using a combination of `abi.encode` and `keccak256`.\\n *\\n * This contract implements the EIP 712 domain separator ({_domainSeparatorV4}) that is used as part of the encoding\\n * scheme, and the final step of the encoding to obtain the message digest that is then signed via ECDSA\\n * ({_hashTypedDataV4}).\\n *\\n * The implementation of the domain separator was designed to be as efficient as possible while still properly updating\\n * the chain id to protect against replay attacks on an eventual fork of the chain.\\n *\\n * NOTE: This contract implements the version of the encoding known as \\\"v4\\\", as implemented by the JSON RPC method\\n * https://docs.metamask.io/guide/signing-data.html[`eth_signTypedDataV4` in MetaMask].\\n *\\n * _Available since v3.4._\\n */\\nabstract contract EIP712 {\\n    /* solhint-disable var-name-mixedcase */\\n    // Cache the domain separator as an immutable value, but also store the chain id that it corresponds to, in order to\\n    // invalidate the cached domain separator if the chain id changes.\\n    bytes32 private immutable _CACHED_DOMAIN_SEPARATOR;\\n    uint256 private immutable _CACHED_CHAIN_ID;\\n    address private immutable _CACHED_THIS;\\n\\n    bytes32 private immutable _HASHED_NAME;\\n    bytes32 private immutable _HASHED_VERSION;\\n    bytes32 private immutable _TYPE_HASH;\\n\\n    /* solhint-enable var-name-mixedcase */\\n\\n    /**\\n     * @dev Initializes the domain separator and parameter caches.\\n     *\\n     * The meaning of `name` and `version` is specified in\\n     * https://eips.ethereum.org/EIPS/eip-712#definition-of-domainseparator[EIP 712]:\\n     *\\n     * - `name`: the user readable name of the signing domain, i.e. the name of the DApp or the protocol.\\n     * - `version`: the current major version of the signing domain.\\n     *\\n     * NOTE: These parameters cannot be changed except through a xref:learn::upgrading-smart-contracts.adoc[smart\\n     * contract upgrade].\\n     */\\n    constructor(string memory name, string memory version) {\\n        bytes32 hashedName = keccak256(bytes(name));\\n        bytes32 hashedVersion = keccak256(bytes(version));\\n        bytes32 typeHash = keccak256(\\n            \\\"EIP712Domain(string name,string version,uint256 chainId,address verifyingContract)\\\"\\n        );\\n        _HASHED_NAME = hashedName;\\n        _HASHED_VERSION = hashedVersion;\\n        _CACHED_CHAIN_ID = block.chainid;\\n        _CACHED_DOMAIN_SEPARATOR = _buildDomainSeparator(typeHash, hashedName, hashedVersion);\\n        _CACHED_THIS = address(this);\\n        _TYPE_HASH = typeHash;\\n    }\\n\\n    /**\\n     * @dev Returns the domain separator for the current chain.\\n     */\\n    function _domainSeparatorV4() internal view returns (bytes32) {\\n        if (address(this) == _CACHED_THIS && block.chainid == _CACHED_CHAIN_ID) {\\n            return _CACHED_DOMAIN_SEPARATOR;\\n        } else {\\n            return _buildDomainSeparator(_TYPE_HASH, _HASHED_NAME, _HASHED_VERSION);\\n        }\\n    }\\n\\n    function _buildDomainSeparator(\\n        bytes32 typeHash,\\n        bytes32 nameHash,\\n        bytes32 versionHash\\n    ) private view returns (bytes32) {\\n        return keccak256(abi.encode(typeHash, nameHash, versionHash, block.chainid, address(this)));\\n    }\\n\\n    /**\\n     * @dev Given an already https://eips.ethereum.org/EIPS/eip-712#definition-of-hashstruct[hashed struct], this\\n     * function returns the hash of the fully encoded EIP712 message for this domain.\\n     *\\n     * This hash can be used together with {ECDSA-recover} to obtain the signer of a message. For example:\\n     *\\n     * ```solidity\\n     * bytes32 digest = _hashTypedDataV4(keccak256(abi.encode(\\n     *     keccak256(\\\"Mail(address to,string contents)\\\"),\\n     *     mailTo,\\n     *     keccak256(bytes(mailContents))\\n     * )));\\n     * address signer = ECDSA.recover(digest, signature);\\n     * ```\\n     */\\n    function _hashTypedDataV4(bytes32 structHash) internal view virtual returns (bytes32) {\\n        return ECDSA.toTypedDataHash(_domainSeparatorV4(), structHash);\\n    }\\n}\\n\",\"keccak256\":\"0x6688fad58b9ec0286d40fa957152e575d5d8bd4c3aa80985efdb11b44f776ae7\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/SafeCast.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/math/SafeCast.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Wrappers over Solidity's uintXX/intXX casting operators with added overflow\\n * checks.\\n *\\n * Downcasting from uint256/int256 in Solidity does not revert on overflow. This can\\n * easily result in undesired exploitation or bugs, since developers usually\\n * assume that overflows raise errors. `SafeCast` restores this intuition by\\n * reverting the transaction when such an operation overflows.\\n *\\n * Using this library instead of the unchecked operations eliminates an entire\\n * class of bugs, so it's recommended to use it always.\\n *\\n * Can be combined with {SafeMath} and {SignedSafeMath} to extend it to smaller types, by performing\\n * all math on `uint256` and `int256` and then downcasting.\\n */\\nlibrary SafeCast {\\n    /**\\n     * @dev Returns the downcasted uint224 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint224).\\n     *\\n     * Counterpart to Solidity's `uint224` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 224 bits\\n     */\\n    function toUint224(uint256 value) internal pure returns (uint224) {\\n        require(value <= type(uint224).max, \\\"SafeCast: value doesn't fit in 224 bits\\\");\\n        return uint224(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint128 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint128).\\n     *\\n     * Counterpart to Solidity's `uint128` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 128 bits\\n     */\\n    function toUint128(uint256 value) internal pure returns (uint128) {\\n        require(value <= type(uint128).max, \\\"SafeCast: value doesn't fit in 128 bits\\\");\\n        return uint128(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint96 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint96).\\n     *\\n     * Counterpart to Solidity's `uint96` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 96 bits\\n     */\\n    function toUint96(uint256 value) internal pure returns (uint96) {\\n        require(value <= type(uint96).max, \\\"SafeCast: value doesn't fit in 96 bits\\\");\\n        return uint96(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint64 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint64).\\n     *\\n     * Counterpart to Solidity's `uint64` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 64 bits\\n     */\\n    function toUint64(uint256 value) internal pure returns (uint64) {\\n        require(value <= type(uint64).max, \\\"SafeCast: value doesn't fit in 64 bits\\\");\\n        return uint64(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint32 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint32).\\n     *\\n     * Counterpart to Solidity's `uint32` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 32 bits\\n     */\\n    function toUint32(uint256 value) internal pure returns (uint32) {\\n        require(value <= type(uint32).max, \\\"SafeCast: value doesn't fit in 32 bits\\\");\\n        return uint32(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint16 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint16).\\n     *\\n     * Counterpart to Solidity's `uint16` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 16 bits\\n     */\\n    function toUint16(uint256 value) internal pure returns (uint16) {\\n        require(value <= type(uint16).max, \\\"SafeCast: value doesn't fit in 16 bits\\\");\\n        return uint16(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint8 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint8).\\n     *\\n     * Counterpart to Solidity's `uint8` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 8 bits.\\n     */\\n    function toUint8(uint256 value) internal pure returns (uint8) {\\n        require(value <= type(uint8).max, \\\"SafeCast: value doesn't fit in 8 bits\\\");\\n        return uint8(value);\\n    }\\n\\n    /**\\n     * @dev Converts a signed int256 into an unsigned uint256.\\n     *\\n     * Requirements:\\n     *\\n     * - input must be greater than or equal to 0.\\n     */\\n    function toUint256(int256 value) internal pure returns (uint256) {\\n        require(value >= 0, \\\"SafeCast: value must be positive\\\");\\n        return uint256(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int128 from int256, reverting on\\n     * overflow (when the input is less than smallest int128 or\\n     * greater than largest int128).\\n     *\\n     * Counterpart to Solidity's `int128` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 128 bits\\n     *\\n     * _Available since v3.1._\\n     */\\n    function toInt128(int256 value) internal pure returns (int128) {\\n        require(value >= type(int128).min && value <= type(int128).max, \\\"SafeCast: value doesn't fit in 128 bits\\\");\\n        return int128(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int64 from int256, reverting on\\n     * overflow (when the input is less than smallest int64 or\\n     * greater than largest int64).\\n     *\\n     * Counterpart to Solidity's `int64` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 64 bits\\n     *\\n     * _Available since v3.1._\\n     */\\n    function toInt64(int256 value) internal pure returns (int64) {\\n        require(value >= type(int64).min && value <= type(int64).max, \\\"SafeCast: value doesn't fit in 64 bits\\\");\\n        return int64(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int32 from int256, reverting on\\n     * overflow (when the input is less than smallest int32 or\\n     * greater than largest int32).\\n     *\\n     * Counterpart to Solidity's `int32` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 32 bits\\n     *\\n     * _Available since v3.1._\\n     */\\n    function toInt32(int256 value) internal pure returns (int32) {\\n        require(value >= type(int32).min && value <= type(int32).max, \\\"SafeCast: value doesn't fit in 32 bits\\\");\\n        return int32(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int16 from int256, reverting on\\n     * overflow (when the input is less than smallest int16 or\\n     * greater than largest int16).\\n     *\\n     * Counterpart to Solidity's `int16` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 16 bits\\n     *\\n     * _Available since v3.1._\\n     */\\n    function toInt16(int256 value) internal pure returns (int16) {\\n        require(value >= type(int16).min && value <= type(int16).max, \\\"SafeCast: value doesn't fit in 16 bits\\\");\\n        return int16(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int8 from int256, reverting on\\n     * overflow (when the input is less than smallest int8 or\\n     * greater than largest int8).\\n     *\\n     * Counterpart to Solidity's `int8` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 8 bits.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function toInt8(int256 value) internal pure returns (int8) {\\n        require(value >= type(int8).min && value <= type(int8).max, \\\"SafeCast: value doesn't fit in 8 bits\\\");\\n        return int8(value);\\n    }\\n\\n    /**\\n     * @dev Converts an unsigned uint256 into a signed int256.\\n     *\\n     * Requirements:\\n     *\\n     * - input must be less than or equal to maxInt256.\\n     */\\n    function toInt256(uint256 value) internal pure returns (int256) {\\n        // Note: Unsafe cast below is okay because `type(int256).max` is guaranteed to be positive\\n        require(value <= uint256(type(int256).max), \\\"SafeCast: value doesn't fit in an int256\\\");\\n        return int256(value);\\n    }\\n}\\n\",\"keccak256\":\"0x5c6caab697d302ad7eb59c234a4d2dbc965c1bae87709bd2850060b7695b28c7\",\"license\":\"MIT\"},\"contracts/LimitOrderProtocol.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.11;\\n\\nimport \\\"@openzeppelin/contracts/utils/cryptography/draft-EIP712.sol\\\";\\nimport \\\"./OrderMixin.sol\\\";\\nimport \\\"./mocks/OracleMock.sol\\\";\\n\\n/// @title 1inch Limit Order Protocol v2\\ncontract LimitOrderProtocol is\\n    EIP712(\\\"IRS Limit Order Protocol\\\", \\\"1\\\"),\\n    OrderMixin\\n{\\n    // solhint-disable-next-line\\n    constructor(OracleMock _oracle) OrderMixin(_oracle) {}\\n\\n    // solhint-disable-next-line func-name-mixedcase\\n    function DOMAIN_SEPARATOR() external view returns (bytes32) {\\n        return _domainSeparatorV4();\\n    }\\n}\\n\",\"keccak256\":\"0x64d68751d6a0d0bea66df5b768ab84aae69cfb21cf76b87f78b2fe1ee9afc569\",\"license\":\"MIT\"},\"contracts/OrderMixin.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.11;\\n\\nimport \\\"@openzeppelin/contracts/utils/Address.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/cryptography/draft-EIP712.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/cryptography/SignatureChecker.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\n\\nimport \\\"./helpers/AmountCalculator.sol\\\";\\nimport \\\"./helpers/ChainlinkCalculator.sol\\\";\\nimport \\\"./helpers/NonceManager.sol\\\";\\nimport \\\"./helpers/PredicateHelper.sol\\\";\\nimport \\\"./interfaces/InteractiveNotificationReceiver.sol\\\";\\nimport \\\"./libraries/MarginLib.sol\\\";\\nimport \\\"./libraries/ArgumentsDecoder.sol\\\";\\nimport \\\"./libraries/Permitable.sol\\\";\\nimport \\\"./mocks/OracleMock.sol\\\";\\n\\n/// @title Regular Limit Order mixin\\n// solhint-disable-next-line \\nabstract contract OrderMixin is\\n    EIP712,\\n    AmountCalculator,\\n    ChainlinkCalculator,\\n    NonceManager,\\n    PredicateHelper,\\n    Permitable\\n{\\n    using Address for address;\\n    using ArgumentsDecoder for bytes;\\n\\n    /// @notice Emitted every time order gets filled, including partial fills\\n    event OrderFilled(\\n        address indexed maker,\\n        bytes32 orderHash,\\n        uint256 remaining\\n    );\\n\\n    /// @notice Emitted when order gets cancelled\\n    event OrderCanceled(\\n        address indexed maker,\\n        bytes32 orderHash,\\n        uint256 remainingRaw\\n    );\\n\\n    // Fixed-size order part with core information\\n    struct StaticOrder {\\n        uint256 salt;\\n        address asset;\\n        address underlyingAsset;\\n        address maker;\\n        address receiver;\\n        address allowedSender; // equals to Zero address on public orders\\n        uint256 fixedTokens;\\n        uint256 variableTokens;\\n        bool isFixedTaker;\\n        uint256 beginTimestamp;\\n        uint256 endTimestamp;\\n        int128 t; // Fixed Point Q64.64 term of the order in years\\n    }\\n\\n    // `StaticOrder` extension including variable-sized additional order meta information\\n    struct Order {\\n        uint256 salt;\\n        address asset;\\n        address underlyingAsset;\\n        address maker;\\n        address receiver;\\n        address allowedSender; // equals to Zero address on public orders\\n        uint256 fixedTokens;\\n        uint256 variableTokens;\\n        bool isFixedTaker;\\n        uint256 beginTimestamp;\\n        uint256 endTimestamp;\\n        int128 t; // Fixed Point Q64.64 term of the order in years\\n        bytes makerAssetData;\\n        bytes takerAssetData;\\n        bytes getMakerAmount; // this.staticcall(abi.encodePacked(bytes, swapTakerAmount)) => (swapMakerAmount)\\n        bytes getTakerAmount; // this.staticcall(abi.encodePacked(bytes, swapMakerAmount)) => (swapTakerAmount)\\n        bytes predicate; // this.staticcall(bytes) => (bool)\\n        bytes permit; // On first fill: permit.1.call(abi.encodePacked(permit.selector, permit.2))\\n        bytes interaction;\\n    }\\n\\n    address public owner;\\n    OracleMock private _oracle;\\n    bool private _unlocked = true;\\n    int128 public liquidatorMargin = 0x00000000000000003333333333333333;\\n    int128 public oppositePartyMargin = 0x00000000000000006666666666666666;\\n    int128 public oppositePartyMarginNoLiquidator =\\n        0x000000000000008000000000000000;\\n\\n    bytes32 public constant LIMIT_ORDER_TYPEHASH =\\n        keccak256(\\n            \\\"Order(uint256 salt,address asset,address underlyingAsset,address maker,address receiver,address allowedSender,uint256 fixedTokens,uint256 variableTokens,bool isFixedTaker,uint256 beginTimestamp,uint256 endTimestamp,int128 t,bytes makerAssetData,bytes takerAssetData,bytes getMakerAmount,bytes getTakerAmount,bytes predicate,bytes permit,bytes interaction)\\\"\\n        );\\n    uint256 private constant _ORDER_DOES_NOT_EXIST = 0;\\n    uint256 private constant _ORDER_FILLED = 1;\\n\\n    /// @notice Stores unfilled amounts for each order plus one.\\n    /// Therefore 0 means order doesn't exist and 1 means order was filled\\n    mapping(bytes32 => uint256) private _remaining;\\n    mapping(bytes32 => uint256) private _orderNumTakers;\\n    mapping(bytes32 => mapping(address => uint256))\\n        public orderParticipantFixedTokens;\\n    mapping(bytes32 => mapping(address => uint256))\\n        public orderParticipantVariableTokens;\\n    mapping(bytes32 => mapping(address => uint256))\\n        public orderParticipantMargin;\\n    mapping(bytes32 => bool) public isOrderDefaulted;\\n    mapping(bytes32 => uint256) public defaultedFunds;\\n\\n    mapping(address => int128) public assetAlpha;\\n    mapping(address => int128) public assetBeta;\\n    mapping(address => int128) public assetSigma;\\n    mapping(address => int128) public assetLowerBoundMul;\\n    mapping(address => int128) public assetUpperBoundMul;\\n\\n    function setAssetAlpha(address asset, int128 alpha) external onlyOwner {\\n        assetAlpha[asset] = alpha;\\n    }\\n\\n    function setAssetBeta(address asset, int128 beta) external onlyOwner {\\n        assetBeta[asset] = beta;\\n    }\\n\\n    function setAssetSigma(address asset, int128 sigma) external onlyOwner {\\n        assetSigma[asset] = sigma;\\n    }\\n\\n    function setAssetLowerBoundMul(address asset, int128 lowerBoundMul)\\n        external\\n        onlyOwner\\n    {\\n        assetLowerBoundMul[asset] = lowerBoundMul;\\n    }\\n\\n    function setAssetUpperBoundMul(address asset, int128 upperBoundMul)\\n        external\\n        onlyOwner\\n    {\\n        assetUpperBoundMul[asset] = upperBoundMul;\\n    }\\n\\n    function setLiquidatorMargin(int128 _liquidatorMargin) external onlyOwner {\\n        liquidatorMargin = _liquidatorMargin;\\n    }\\n\\n    function setOppositePartyMargin(int128 _oppositePartyMargin)\\n        external\\n        onlyOwner\\n    {\\n        oppositePartyMargin = _oppositePartyMargin;\\n    }\\n\\n    function setOppositePartyMarginNoLiquidator(\\n        int128 _oppositePartyMarginNoLiquidator\\n    ) external onlyOwner {\\n        oppositePartyMarginNoLiquidator = _oppositePartyMarginNoLiquidator;\\n    }\\n\\n    constructor(OracleMock oracle) {\\n        owner = msg.sender;\\n        _oracle = oracle;\\n    }\\n\\n    modifier onlyOwner() {\\n        require(msg.sender == owner, \\\"LOP: Only owner allowed\\\");\\n        _;\\n    }\\n\\n    modifier lock() {\\n        require(_unlocked, \\\"LOP: Locked state\\\");\\n        _unlocked = false;\\n        _;\\n        _unlocked = true;\\n    }\\n\\n    /// @notice Returns unfilled amount for order. Throws if order does not exist\\n    function remaining(bytes32 orderHash) external view returns (uint256) {\\n        uint256 amount = _remaining[orderHash];\\n        require(amount != _ORDER_DOES_NOT_EXIST, \\\"LOP: Unknown order\\\");\\n        unchecked {\\n            amount -= 1;\\n        }\\n        return amount;\\n    }\\n\\n    /// @notice Returns unfilled amount for order\\n    /// @return Result Unfilled amount of order plus one if order exists. Otherwise 0\\n    function remainingRaw(bytes32 orderHash) external view returns (uint256) {\\n        return _remaining[orderHash];\\n    }\\n\\n    /**\\n     * @notice Calls every target with corresponding data. Then reverts with CALL_RESULTS_0101011 where zeroes and ones\\n     * denote failure or success of the corresponding call\\n     * @param targets Array of addresses that will be called\\n     * @param data Array of data that will be passed to each call\\n     */\\n    function simulateCalls(address[] calldata targets, bytes[] calldata data)\\n        external\\n    {\\n        require(targets.length == data.length, \\\"LOP: array size mismatch\\\");\\n        bytes memory reason = new bytes(targets.length);\\n        for (uint256 i = 0; i < targets.length; i++) {\\n            // solhint-disable-next-line avoid-low-level-calls\\n            (bool success, bytes memory result) = targets[i].call(data[i]);\\n            if (success && result.length > 0) {\\n                success = result.length == 32 && result.decodeBool();\\n            }\\n            reason[i] = success ? bytes1(\\\"1\\\") : bytes1(\\\"0\\\");\\n        }\\n\\n        // Always revert and provide per call results\\n        revert(string(abi.encodePacked(\\\"CALL_RESULTS_\\\", reason)));\\n    }\\n\\n    /// @notice Cancels order by setting remaining amount to zero\\n    function cancelOrder(Order memory order) external {\\n        require(order.maker == msg.sender, \\\"LOP: Access denied\\\");\\n\\n        bytes32 orderHash = hashOrder(order);\\n        uint256 orderRemaining = _remaining[orderHash];\\n        require(orderRemaining != _ORDER_FILLED, \\\"LOP: already filled\\\");\\n        emit OrderCanceled(msg.sender, orderHash, orderRemaining);\\n        _remaining[orderHash] = _ORDER_FILLED;\\n    }\\n\\n    struct FillOrderParams {\\n        address maker;\\n        address asset;\\n        address underlyingAsset;\\n        bool ft;\\n    }\\n\\n    /// @notice Fills an order. If one doesn't exist (first fill) it will be created using order.makerAssetData\\n    /// @param order Order quote to fill\\n    /// @param signature Signature to confirm quote ownership\\n    /// @param fixedTokens Fixed Tokens\\n    /// @param variableTokens Variable Tokens\\n    /// @param thresholdTokens Specifies maximum allowed takingAmount when takingAmount is zero, otherwise specifies minimum allowed makingAmount\\n    function fillOrder(\\n        Order memory order,\\n        bytes calldata signature,\\n        uint256 fixedTokens,\\n        uint256 variableTokens,\\n        uint256 thresholdTokens\\n    )\\n        external\\n        returns (\\n            uint256, /* actualMakingAmount */\\n            uint256 /* actualTakingAmount */\\n        )\\n    {\\n        return\\n            fillOrderTo(\\n                order,\\n                signature,\\n                fixedTokens,\\n                variableTokens,\\n                thresholdTokens\\n            );\\n    }\\n\\n    /// @notice Same as `fillOrder` but calls permit first,\\n    /// allowing to approve token spending and make a swap in one transaction.\\n    /// Also allows to specify funds destination instead of `msg.sender`\\n    /// @param order Order quote to fill\\n    /// @param signature Signature to confirm quote ownership\\n    /// @param fixedTokens Fixed Tokens\\n    /// @param variableTokens Variable Tokens\\n    /// @param thresholdTokens Specifies maximum allowed takingAmount when takingAmount is zero, otherwise specifies minimum allowed makingAmount\\n    /// @param permit Should consist of abiencoded token address and encoded `IERC20Permit.permit` call.\\n    /// @dev See tests for examples\\n    function fillOrderToWithPermit(\\n        Order memory order,\\n        bytes calldata signature,\\n        uint256 fixedTokens,\\n        uint256 variableTokens,\\n        uint256 thresholdTokens,\\n        bytes calldata permit\\n    )\\n        external\\n        returns (\\n            uint256, /* actualMakingAmount */\\n            uint256 /* actualTakingAmount */\\n        )\\n    {\\n        require(permit.length >= 20, \\\"LOP: permit length too low\\\");\\n        (address token, bytes calldata permitData) = permit\\n            .decodeTargetAndData();\\n        _permit(token, permitData);\\n        return\\n            fillOrderTo(\\n                order,\\n                signature,\\n                fixedTokens,\\n                variableTokens,\\n                thresholdTokens\\n            );\\n    }\\n\\n    /// @notice Same as `fillOrder` but allows to specify funds destination instead of `msg.sender`\\n    /// @param order Order quote to fill\\n    /// @param signature Signature to confirm quote ownership\\n    /// @param fixedTokens Fixed Tokens\\n    /// @param variableTokens Variable Tokens\\n    /// @param thresholdTokens Specifies maximum allowed takingAmount when takingAmount is zero, otherwise specifies minimum allowed makingAmount\\n    function fillOrderTo(\\n        Order memory order,\\n        bytes calldata signature,\\n        uint256 fixedTokens,\\n        uint256 variableTokens,\\n        uint256 thresholdTokens\\n    )\\n        public\\n        lock\\n        returns (\\n            uint256, /* actualMakingAmount */\\n            uint256 /* actualTakingAmount */\\n        )\\n    {\\n        require(msg.sender != order.maker, \\\"LOP: same maker and taker\\\");\\n        require(\\n            block.timestamp <= order.endTimestamp, // solhint-disable-line\\n            \\\"LOP: Order already matured\\\"\\n        );\\n        bytes32 orderHash = hashOrder(order);\\n        require(!isOrderDefaulted[orderHash], \\\"LOP: Order defaulted\\\");\\n        require(\\n            orderParticipantMargin[orderHash][msg.sender] == 0,\\n            \\\"LOP: Sender is a participant\\\"\\n        );\\n\\n        FillOrderParams memory params = FillOrderParams({\\n            maker: order.maker,\\n            asset: order.asset,\\n            underlyingAsset: order.underlyingAsset,\\n            ft: order.isFixedTaker\\n        });\\n\\n        {\\n            // Stack too deep\\n            uint256 remainingTokens = _remaining[orderHash];\\n            require(\\n                remainingTokens != _ORDER_FILLED,\\n                \\\"LOP: remaining amount is 0\\\"\\n            );\\n            require(\\n                order.allowedSender == address(0) ||\\n                    order.allowedSender == msg.sender,\\n                \\\"LOP: private order\\\"\\n            );\\n            if (remainingTokens == _ORDER_DOES_NOT_EXIST) {\\n                // First fill: validate order and permit maker asset\\n                require(\\n                    SignatureChecker.isValidSignatureNow(\\n                        order.maker,\\n                        orderHash,\\n                        signature\\n                    ),\\n                    \\\"LOP: bad signature\\\"\\n                );\\n                if (order.isFixedTaker) {\\n                    remainingTokens = order.variableTokens;\\n                } else {\\n                    remainingTokens = order.fixedTokens;\\n                }\\n                if (order.permit.length >= 20) {\\n                    // proceed only if permit length is enough to store address\\n                    (address token, bytes memory permit) = order\\n                        .permit\\n                        .decodeTargetAndCalldata();\\n                    _permitMemory(token, permit);\\n                    require(\\n                        _remaining[orderHash] == _ORDER_DOES_NOT_EXIST,\\n                        \\\"LOP: reentrancy detected\\\"\\n                    );\\n                }\\n            } else {\\n                unchecked {\\n                    remainingTokens -= 1;\\n                }\\n            }\\n\\n            // Check if order is valid\\n            if (order.predicate.length > 0) {\\n                require(checkPredicate(order), \\\"LOP: predicate returned false\\\");\\n            }\\n\\n            // Compute maker and taker assets amount\\n            if ((fixedTokens == 0) == (variableTokens == 0)) {\\n                revert(\\\"LOP: only one amount should be 0\\\");\\n            }\\n            if (fixedTokens == 0) {\\n                uint256 requestedVariableTokens = variableTokens;\\n                if (order.isFixedTaker) {\\n                    if (variableTokens > remainingTokens) {\\n                        variableTokens = remainingTokens;\\n                    }\\n                    fixedTokens = _callGetter(\\n                        order.getMakerAmount,\\n                        order.variableTokens,\\n                        order.fixedTokens,\\n                        variableTokens\\n                    );\\n                    require(\\n                        fixedTokens * requestedVariableTokens <=\\n                            thresholdTokens * variableTokens,\\n                        \\\"LOP: Tokens less than threshold\\\"\\n                    );\\n                } else {\\n                    fixedTokens = _callGetter(\\n                        order.getTakerAmount,\\n                        order.variableTokens,\\n                        order.fixedTokens,\\n                        variableTokens\\n                    );\\n                    if (fixedTokens > remainingTokens) {\\n                        fixedTokens = remainingTokens;\\n                        variableTokens = _callGetter(\\n                            order.getMakerAmount,\\n                            order.fixedTokens,\\n                            order.variableTokens,\\n                            fixedTokens\\n                        );\\n                    }\\n                    require(\\n                        fixedTokens * requestedVariableTokens >=\\n                            thresholdTokens * variableTokens,\\n                        \\\"LOP: Tokens less than threshold\\\"\\n                    );\\n                }\\n            } else {\\n                uint256 requestedFixedTokens = fixedTokens;\\n                if (order.isFixedTaker) {\\n                    variableTokens = _callGetter(\\n                        order.getTakerAmount,\\n                        order.fixedTokens,\\n                        order.variableTokens,\\n                        fixedTokens\\n                    );\\n                    if (variableTokens > remainingTokens) {\\n                        variableTokens = remainingTokens;\\n                        fixedTokens = _callGetter(\\n                            order.getMakerAmount,\\n                            order.variableTokens,\\n                            order.fixedTokens,\\n                            variableTokens\\n                        );\\n                    }\\n                    require(\\n                        variableTokens * requestedFixedTokens >=\\n                            thresholdTokens * fixedTokens,\\n                        \\\"LOP: Tokens less than threshold\\\"\\n                    );\\n                } else {\\n                    if (fixedTokens > remainingTokens) {\\n                        fixedTokens = remainingTokens;\\n                    }\\n                    variableTokens = _callGetter(\\n                        order.getMakerAmount,\\n                        order.fixedTokens,\\n                        order.variableTokens,\\n                        fixedTokens\\n                    );\\n                    require(\\n                        variableTokens * requestedFixedTokens <=\\n                            thresholdTokens * fixedTokens,\\n                        \\\"LOP: Tokens less than threshold\\\"\\n                    );\\n                }\\n            }\\n            require(\\n                fixedTokens > 0 && variableTokens > 0,\\n                \\\"LOP: can't swap 0 amount\\\"\\n            );\\n\\n            // Update remaining amount in storage\\n            unchecked {\\n                if (order.isFixedTaker) {\\n                    remainingTokens = remainingTokens - variableTokens;\\n                } else {\\n                    remainingTokens = remainingTokens - fixedTokens;\\n                }\\n                _remaining[orderHash] = remainingTokens + 1;\\n                _orderNumTakers[orderHash] = _orderNumTakers[orderHash] + 1;\\n            }\\n            emit OrderFilled(msg.sender, orderHash, remainingTokens);\\n        }\\n\\n        unchecked {\\n            orderParticipantFixedTokens[orderHash][order.maker] =\\n                orderParticipantFixedTokens[orderHash][order.maker] +\\n                fixedTokens;\\n            orderParticipantVariableTokens[orderHash][order.maker] =\\n                orderParticipantVariableTokens[orderHash][order.maker] +\\n                variableTokens;\\n            orderParticipantFixedTokens[orderHash][msg.sender] = fixedTokens;\\n            orderParticipantVariableTokens[orderHash][\\n                msg.sender\\n            ] = variableTokens;\\n        }\\n        {\\n            // Calculate margin requirements for order maker and taker\\n            uint256 initialMarginMaker = getInitialMarginReq(\\n                order,\\n                orderHash,\\n                order.maker\\n            );\\n            uint256 initialMarginTaker = getInitialMarginReq(\\n                order,\\n                orderHash,\\n                msg.sender\\n            );\\n            \\n            uint256 balanceBefore = _balance(params.underlyingAsset);\\n            // Taker => This\\n            _makeCall(\\n                params.underlyingAsset,\\n                abi.encodePacked(\\n                    IERC20.transferFrom.selector,\\n                    uint256(uint160(msg.sender)),\\n                    uint256(uint160(address(this))),\\n                    initialMarginTaker\\n                )\\n            );\\n            require(\\n                balanceBefore + initialMarginTaker <=\\n                    _balance(params.underlyingAsset),\\n                \\\"LOP: Margin not enough\\\"\\n            );\\n\\n            balanceBefore = _balance(params.underlyingAsset);\\n            // Maker => This\\n            _makeCall(\\n                params.underlyingAsset,\\n                abi.encodePacked(\\n                    IERC20.transferFrom.selector,\\n                    uint256(uint160(params.maker)),\\n                    uint256(uint160(address(this))),\\n                    initialMarginMaker\\n                )\\n            );\\n            require(\\n                balanceBefore + initialMarginMaker <=\\n                    _balance(params.underlyingAsset),\\n                \\\"LOP: Margin not enough\\\"\\n            );\\n        }\\n        return (fixedTokens, variableTokens);\\n    }\\n\\n    /// @notice Checks order predicate\\n    function checkPredicate(Order memory order) public view returns (bool) {\\n        bytes memory result = address(this).functionStaticCall(\\n            order.predicate,\\n            \\\"LOP: predicate call failed\\\"\\n        );\\n        require(result.length == 32, \\\"LOP: invalid predicate return\\\");\\n        return result.decodeBool();\\n    }\\n\\n    function hashOrder(Order memory order) public view returns (bytes32) {\\n        StaticOrder memory staticOrder;\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly {\\n            staticOrder := order\\n        }\\n        return\\n            _hashTypedDataV4(\\n                keccak256(\\n                    abi.encode(\\n                        LIMIT_ORDER_TYPEHASH,\\n                        staticOrder,\\n                        keccak256(order.makerAssetData),\\n                        keccak256(order.takerAssetData),\\n                        keccak256(order.getMakerAmount),\\n                        keccak256(order.getTakerAmount),\\n                        keccak256(order.predicate),\\n                        keccak256(order.permit),\\n                        keccak256(order.interaction)\\n                    )\\n                )\\n            );\\n    }\\n\\n    function settleOrder(Order memory order, address settler)\\n        external\\n        lock\\n        returns (uint256)\\n    {\\n        bytes32 orderHash = hashOrder(order);\\n        require(\\n            block.timestamp > order.endTimestamp || isOrderDefaulted[orderHash], // solhint-disable-line\\n            \\\"LOP: Order yet not matured\\\"\\n        );\\n        uint256 fixedTokens = orderParticipantFixedTokens[orderHash][settler];\\n        uint256 variableTokens = orderParticipantVariableTokens[orderHash][settler];\\n        uint256 margin = orderParticipantMargin[orderHash][settler];\\n        require(margin > 0, \\\"LOP: No margin provided\\\");\\n        // Get actual APY over the order period\\n        (int128 orderPeriodActualAPY, ) = getAverageAccruedAPYBetweenTimestamps(\\n            order.asset,\\n            order.underlyingAsset,\\n            order.beginTimestamp,\\n            order.endTimestamp\\n        );\\n        uint256 onePercentFixedTokens = fixedTokens;\\n        uint256 onePercentVariableTokens = MarginLib.mulu(\\n            orderPeriodActualAPY,\\n            variableTokens\\n        ) * 100;\\n        int128 term = order.t;\\n        uint256 orderReturn;\\n        if (isOrderDefaulted[orderHash]) {\\n            uint256 defaultedFundsShare = defaultedFunds[orderHash] /\\n                _orderNumTakers[orderHash];\\n            orderReturn = margin + defaultedFundsShare;\\n        } else {\\n            bool forFixedTaker;\\n            if(order.isFixedTaker && settler == order.maker) forFixedTaker = true;\\n            if(!order.isFixedTaker && settler != order.maker) forFixedTaker = true;\\n            orderReturn = MarginLib.getReturnAfterMaturity(\\n                onePercentFixedTokens,\\n                onePercentVariableTokens,\\n                margin,\\n                forFixedTaker,\\n                term\\n            );\\n        }\\n        _resetParticipant(orderHash, settler);\\n        // Transfer orderReturn underlying tokens to the settler\\n        _makeCall(\\n            order.underlyingAsset,\\n            abi.encodeWithSelector(\\n                IERC20.transfer.selector,\\n                settler,\\n                orderReturn\\n            )\\n        );\\n        return orderReturn;\\n    }\\n\\n    function _defaultOrder(\\n        Order memory order,\\n        bytes32 orderHash,\\n        uint256 defFunds\\n    ) private {\\n        _resetDefaulter(orderHash, order.maker);\\n        isOrderDefaulted[orderHash] = true;\\n        defaultedFunds[orderHash] = defFunds;\\n    }\\n\\n    function _resetDefaulter(bytes32 orderHash, address defaulter) private {\\n        _resetParticipant(orderHash, defaulter);\\n    }\\n\\n    function _resetParticipant(bytes32 orderHash, address defaulter) private {\\n        orderParticipantFixedTokens[orderHash][defaulter] = 0;\\n        orderParticipantVariableTokens[orderHash][defaulter] = 0;\\n        orderParticipantMargin[orderHash][defaulter] = 0;\\n    }\\n\\n    function _decreaseMakerFixedTokens(\\n        Order memory order,\\n        bytes32 orderHash,\\n        uint256 fixedTokens\\n    ) private {\\n        orderParticipantFixedTokens[orderHash][order.maker] -= fixedTokens;\\n    }\\n\\n    function _decreaseMakerVariableTokens(\\n        Order memory order,\\n        bytes32 orderHash,\\n        uint256 variableTokens\\n    ) private {\\n        orderParticipantVariableTokens[orderHash][\\n            order.maker\\n        ] -= variableTokens;\\n    }\\n\\n    function addMargin(\\n        Order memory order,\\n        address participant,\\n        uint256 amount\\n    ) external {\\n        require(amount > 0, \\\"LOP: zero amount\\\");\\n        // solhint-disable-next-line\\n        require(block.timestamp <= order.endTimestamp, \\\"LOP: Order matured\\\");\\n        bytes32 orderHash = hashOrder(order);\\n        require(!isOrderDefaulted[orderHash], \\\"LOP: Order is defaulted\\\");\\n        require(\\n            orderParticipantMargin[orderHash][participant] > 0,\\n            \\\"LOP: No margin provided\\\"\\n        );\\n        orderParticipantMargin[orderHash][participant] += amount;\\n\\n        uint256 balanceBefore = _balance(order.underlyingAsset);\\n        _makeCall(\\n            order.underlyingAsset,\\n            abi.encodePacked(\\n                IERC20.transferFrom.selector,\\n                uint256(uint160(msg.sender)),\\n                uint256(uint160(address(this))),\\n                amount\\n            )\\n        );\\n        require(\\n            balanceBefore + amount <= _balance(order.underlyingAsset),\\n            \\\"LOP: Margin not enough\\\"\\n        );\\n    }\\n\\n    function liquidate(Order memory order, address defaulter) external lock {\\n        // solhint-disable-next-line\\n        require(block.timestamp <= order.endTimestamp, \\\"LOP: Order matured\\\");\\n        bytes32 orderHash = hashOrder(order);\\n        require(!isOrderDefaulted[orderHash], \\\"LOP: Order is defaulted\\\");\\n\\n        uint256 fixedTokens = orderParticipantFixedTokens[orderHash][defaulter];\\n        uint256 variableTokens = orderParticipantVariableTokens[orderHash][defaulter];\\n        uint256 margin = orderParticipantMargin[orderHash][defaulter];\\n        require(margin != 0, \\\"LOP: Margin cannot be 0\\\");\\n        uint256 reqMargin = getMarginReq(order, orderHash, defaulter);\\n        require(margin < reqMargin, \\\"LOP: Margin is sufficient\\\");\\n\\n        uint256 liquidatorFee = 0;\\n        if (defaulter != msg.sender) {\\n            liquidatorFee = MarginLib.mulu(liquidatorMargin, margin);\\n        }\\n        uint256 leftMargin = margin - liquidatorFee;\\n        uint256 oppositePartyReward;\\n        if (defaulter != msg.sender) {\\n            oppositePartyReward = MarginLib.mulu(\\n                oppositePartyMargin,\\n                leftMargin\\n            );\\n        } else {\\n            oppositePartyReward = MarginLib.mulu(\\n                oppositePartyMarginNoLiquidator,\\n                leftMargin\\n            );\\n        }\\n        uint256 defaulterReturn = 0;\\n        if (leftMargin > oppositePartyReward) {\\n            defaulterReturn = leftMargin - oppositePartyReward;\\n        }\\n\\n        if (defaulter == order.maker) {\\n            _defaultOrder(order, orderHash, oppositePartyReward);\\n        } else {\\n            _resetDefaulter(orderHash, defaulter);\\n            _decreaseMakerFixedTokens(order, orderHash, fixedTokens);\\n            _decreaseMakerVariableTokens(order, orderHash, variableTokens);\\n        }\\n        {\\n            address underlyingAsset = order.underlyingAsset;\\n            address maker = order.maker;\\n\\n            // Transfer funds to liquidator, order maker, defaulter\\n            if (liquidatorFee > 0) {\\n                _makeCall(\\n                    underlyingAsset,\\n                    abi.encodeWithSelector(\\n                        IERC20.transfer.selector,\\n                        msg.sender,\\n                        liquidatorFee\\n                    )\\n                );\\n            }\\n            if (defaulter != maker && oppositePartyReward > 0) {\\n                _makeCall(\\n                    underlyingAsset,\\n                    abi.encodeWithSelector(\\n                        IERC20.transfer.selector,\\n                        maker,\\n                        oppositePartyReward\\n                    )\\n                );\\n            }\\n            if (defaulterReturn > 0) {\\n                _makeCall(\\n                    underlyingAsset,\\n                    abi.encodeWithSelector(\\n                        IERC20.transfer.selector,\\n                        defaulter,\\n                        defaulterReturn\\n                    )\\n                );\\n            }\\n        }\\n    }\\n\\n    function getInitialMarginReq(\\n        Order memory order,\\n        bytes32 orderHash,\\n        address participant\\n    ) public view returns (uint256) {\\n        return\\n            _getMarginReqWithMuls(\\n                order,\\n                orderHash,\\n                participant,\\n                1 << 64,\\n                1 << 64\\n            );\\n    }\\n\\n    function getMarginReq(\\n        Order memory order,\\n        bytes32 orderHash,\\n        address participant\\n    ) public view returns (uint256) {\\n        return\\n            _getMarginReqWithMuls(\\n                order,\\n                orderHash,\\n                participant,\\n                1 << 64,\\n                1 << 64\\n            );\\n    }\\n\\n    function _getMarginReqWithMuls(\\n        Order memory order,\\n        bytes32 orderHash,\\n        address participant,\\n        int128 tl,\\n        int128 tu\\n    ) private view returns (uint256) {\\n        require(order.endTimestamp >= block.timestamp, \\\"LOP: Order matured\\\"); // solhint-disable-line\\n        require(!isOrderDefaulted[orderHash], \\\"LOP: Order defaulted\\\");\\n        \\n        bool forFixedTaker;\\n        if(order.isFixedTaker && participant == order.maker) forFixedTaker = true;\\n        if(!order.isFixedTaker && participant != order.maker) forFixedTaker = true;\\n\\n        MarginLib.OrderInfo memory orderInfo = MarginLib.OrderInfo({\\n            orderHash: orderHash,\\n            beginTimestamp: order.beginTimestamp,\\n            endTimestamp: order.endTimestamp,\\n            isOrderDefaulted: isOrderDefaulted[orderHash],\\n            term: order.t,\\n            fixedTokens: orderParticipantFixedTokens[orderHash][\\n                participant\\n            ],\\n            variableTokens: orderParticipantVariableTokens[orderHash][\\n                participant\\n            ],\\n            forFixedTaker: forFixedTaker\\n        });\\n\\n        MarginLib.AssetInfo memory assetInfo = MarginLib.AssetInfo({\\n            asset: order.asset,\\n            underlyingAsset: order.underlyingAsset,\\n            alpha: assetAlpha[order.asset],\\n            beta: assetBeta[order.asset],\\n            sigma: assetSigma[order.asset],\\n            lowerBoundMul: assetLowerBoundMul[order.asset],\\n            upperBoundMul: assetUpperBoundMul[order.asset]\\n        });\\n\\n        return MarginLib.getMarginReqWithMuls(\\n            _oracle,\\n            orderInfo,\\n            assetInfo,\\n            tl,\\n            tu\\n        );\\n    }\\n\\n    function getAverageAccruedAPYBetweenTimestamps(\\n        address asset,\\n        address underlyingAsset,\\n        uint256 startTimestamp,\\n        uint256 endTimestamp\\n    ) public view returns (int128 apy, int128 ewma) {\\n        return MarginLib.getAverageAccruedAPYBetweenTimestamps(\\n            _oracle,\\n            asset,\\n            underlyingAsset,\\n            startTimestamp,\\n            endTimestamp\\n        );\\n    }\\n\\n    function _balance(address token) private view returns (uint256) {\\n        bytes memory result = token.functionStaticCall(\\n            abi.encodeWithSelector(IERC20.balanceOf.selector, address(this))\\n        );\\n        require(result.length == 32, \\\"LOP: invalid call result\\\");\\n        return result.decodeUint256();\\n    }\\n\\n    function _makeCall(address asset, bytes memory assetData) private {\\n        bytes memory result = asset.functionCall(\\n            assetData,\\n            \\\"LOP: asset.call failed\\\"\\n        );\\n        if (result.length > 0) {\\n            require(\\n                result.length == 32 && result.decodeBool(),\\n                \\\"LOP: asset.call bad result\\\"\\n            );\\n        }\\n    }\\n\\n    function _callGetter(\\n        bytes memory getter,\\n        uint256 orderExpectedAmount,\\n        uint256 orderResultAmount,\\n        uint256 amount\\n    ) private view returns (uint256) {\\n        if (getter.length == 0) {\\n            // On empty getter calldata only exact amount is allowed\\n            require(amount == orderExpectedAmount, \\\"LOP: wrong amount\\\");\\n            return orderResultAmount;\\n        } else {\\n            bytes memory result = address(this).functionStaticCall(\\n                abi.encodePacked(getter, amount),\\n                \\\"LOP: getAmount call failed\\\"\\n            );\\n            require(result.length == 32, \\\"LOP: invalid getAmount return\\\");\\n            return result.decodeUint256();\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xe363ce49315e987706012e895f5dbd71aa3539558310a860520aa9d360011d2d\",\"license\":\"MIT\"},\"contracts/helpers/AmountCalculator.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.11;\\npragma abicoder v1;\\n\\nimport \\\"@openzeppelin/contracts/utils/Address.sol\\\";\\n\\n/// @title A helper contract for calculations related to order amounts\\ncontract AmountCalculator {\\n    using Address for address;\\n\\n    /// @notice Calculates maker amount\\n    /// @return Result Ceiled maker amount\\n    function getMakerAmount(\\n        uint256 orderMakerAmount,\\n        uint256 orderTakerAmount,\\n        uint256 swapTakerAmount\\n    ) public pure returns (uint256) {\\n        return\\n            (swapTakerAmount * orderMakerAmount + orderTakerAmount - 1) /\\n            orderTakerAmount;\\n    }\\n\\n    /// @notice Calculates taker amount\\n    /// @return Result Floored taker amount\\n    function getTakerAmount(\\n        uint256 orderMakerAmount,\\n        uint256 orderTakerAmount,\\n        uint256 swapMakerAmount\\n    ) public pure returns (uint256) {\\n        return (swapMakerAmount * orderTakerAmount) / orderMakerAmount;\\n    }\\n\\n    /// @notice Performs an arbitrary call to target with data\\n    /// @return Result Bytes transmuted to uint256\\n    function arbitraryStaticCall(address target, bytes memory data)\\n        external\\n        view\\n        returns (uint256)\\n    {\\n        bytes memory result = target.functionStaticCall(\\n            data,\\n            \\\"AC: arbitraryStaticCall\\\"\\n        );\\n        return abi.decode(result, (uint256));\\n    }\\n}\\n\",\"keccak256\":\"0x9563afce134c4dc3643aec2a7f47f9ab3b3b9277ea625cf7f4af317e1fa6784d\",\"license\":\"MIT\"},\"contracts/helpers/ChainlinkCalculator.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.11;\\npragma abicoder v1;\\n\\nimport \\\"@chainlink/contracts/src/v0.8/interfaces/AggregatorV3Interface.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/math/SafeCast.sol\\\";\\n\\n/// @title A helper contract for interactions with https://docs.chain.link\\ncontract ChainlinkCalculator {\\n    using SafeCast for int256;\\n\\n    uint256 private constant _SPREAD_DENOMINATOR = 1e9;\\n    uint256 private constant _INVERSE_MASK = 1 << 255;\\n\\n    /// @notice Calculates price of token relative to oracle unit (ETH or USD)\\n    /// @param inverseAndSpread concatenated inverse flag and spread.\\n    /// Lowest 254 bits specify spread amount. Spread is scaled by 1e9, i.e. 101% = 1.01e9, 99% = 0.99e9.\\n    /// Highest bit is set when oracle price should be inverted,\\n    /// e.g. for DAI-ETH oracle, inverse=false means that we request DAI price in ETH\\n    /// and inverse=true means that we request ETH price in DAI\\n    /// @return Amount * spread * oracle price\\n    function singlePrice(\\n        AggregatorV3Interface oracle,\\n        uint256 inverseAndSpread,\\n        uint256 amount\\n    ) external view returns (uint256) {\\n        (, int256 latestAnswer, , , ) = oracle.latestRoundData();\\n        bool inverse = inverseAndSpread & _INVERSE_MASK > 0;\\n        uint256 spread = inverseAndSpread & (~_INVERSE_MASK);\\n        if (inverse) {\\n            return\\n                ((1 << 64) * amount * spread) /\\n                (latestAnswer.toUint256() * 100) /\\n                _SPREAD_DENOMINATOR;\\n        } else {\\n            return\\n                (latestAnswer.toUint256() * 100 * amount * spread) /\\n                (1 << 64) /\\n                _SPREAD_DENOMINATOR;\\n        }\\n    }\\n\\n    /// @notice Calculates price of token A relative to token B. Note that order is important\\n    /// @return Result Token A relative price times amount\\n    function doublePrice(\\n        AggregatorV3Interface oracle1,\\n        AggregatorV3Interface oracle2,\\n        uint256 spread,\\n        int256 decimalsScale,\\n        uint256 amount\\n    ) external view returns (uint256) {\\n        require(\\n            oracle1.decimals() == oracle2.decimals(),\\n            \\\"CC: oracle decimals don't match\\\"\\n        );\\n        (, int256 latestAnswer1, , , ) = oracle1.latestRoundData();\\n        (, int256 latestAnswer2, , , ) = oracle2.latestRoundData();\\n        if (decimalsScale > 0) {\\n            return\\n                (amount *\\n                    spread *\\n                    latestAnswer1.toUint256() *\\n                    (10**decimalsScale.toUint256())) /\\n                latestAnswer2.toUint256() /\\n                _SPREAD_DENOMINATOR;\\n        } else if (decimalsScale < 0) {\\n            return\\n                (amount * spread * latestAnswer1.toUint256()) /\\n                latestAnswer2.toUint256() /\\n                _SPREAD_DENOMINATOR /\\n                (10**(-decimalsScale).toUint256());\\n        } else {\\n            return\\n                (amount * spread * latestAnswer1.toUint256()) /\\n                latestAnswer2.toUint256() /\\n                _SPREAD_DENOMINATOR;\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x2bf9d8f976e52376bb071a94fa3f033acd01fc65c769a943a42ff75abd086325\",\"license\":\"MIT\"},\"contracts/helpers/NonceManager.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.11;\\npragma abicoder v1;\\n\\n/// @title A helper contract for managing nonce of tx sender\\ncontract NonceManager {\\n    event NonceIncreased(address indexed maker, uint256 newNonce);\\n\\n    mapping(address => uint256) public nonce;\\n\\n    /// @notice Advances nonce by one\\n    function increaseNonce() external {\\n        advanceNonce(1);\\n    }\\n\\n    /// @notice Advances nonce by specified amount\\n    function advanceNonce(uint8 amount) public {\\n        uint256 newNonce = nonce[msg.sender] + amount;\\n        nonce[msg.sender] = newNonce;\\n        emit NonceIncreased(msg.sender, newNonce);\\n    }\\n\\n    /// @notice Checks if `makerAddress` has specified `makerNonce`\\n    /// @return Result True if `makerAddress` has specified nonce. Otherwise, false\\n    function nonceEquals(address makerAddress, uint256 makerNonce)\\n        external\\n        view\\n        returns (bool)\\n    {\\n        return nonce[makerAddress] == makerNonce;\\n    }\\n}\\n\",\"keccak256\":\"0x9baae9701541a514b5d2d8b33fc6d1f12367808b994d15bfec6a7bd6df311e1b\",\"license\":\"MIT\"},\"contracts/helpers/PredicateHelper.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.11;\\n\\nimport \\\"@openzeppelin/contracts/utils/Address.sol\\\";\\n\\n/// @title A helper contract for executing boolean functions on arbitrary target call results\\ncontract PredicateHelper {\\n    using Address for address;\\n\\n    /// @notice Calls every target with corresponding data\\n    /// @return Result True if call to any target returned True. Otherwise, false\\n    function or(address[] calldata targets, bytes[] calldata data)\\n        external\\n        view\\n        returns (bool)\\n    {\\n        require(targets.length == data.length, \\\"PH: input array size mismatch\\\");\\n        for (uint256 i = 0; i < targets.length; i++) {\\n            bytes memory result = targets[i].functionStaticCall(\\n                data[i],\\n                \\\"PH: 'or' subcall failed\\\"\\n            );\\n            require(result.length == 32, \\\"PH: invalid call result\\\");\\n            if (abi.decode(result, (bool))) {\\n                return true;\\n            }\\n        }\\n        return false;\\n    }\\n\\n    /// @notice Calls every target with corresponding data\\n    /// @return Result True if calls to all targets returned True. Otherwise, false\\n    function and(address[] calldata targets, bytes[] calldata data)\\n        external\\n        view\\n        returns (bool)\\n    {\\n        require(targets.length == data.length, \\\"PH: input array size mismatch\\\");\\n        for (uint256 i = 0; i < targets.length; i++) {\\n            bytes memory result = targets[i].functionStaticCall(\\n                data[i],\\n                \\\"PH: 'and' subcall failed\\\"\\n            );\\n            require(result.length == 32, \\\"PH: invalid call result\\\");\\n            if (!abi.decode(result, (bool))) {\\n                return false;\\n            }\\n        }\\n        return true;\\n    }\\n\\n    /// @notice Calls target with specified data and tests if it's equal to the value\\n    /// @param value Value to test\\n    /// @return Result True if call to target returns the same value as `value`. Otherwise, false\\n    function eq(\\n        uint256 value,\\n        address target,\\n        bytes memory data\\n    ) external view returns (bool) {\\n        bytes memory result = target.functionStaticCall(data, \\\"PH: eq\\\");\\n        require(result.length == 32, \\\"PH: invalid call result\\\");\\n        return abi.decode(result, (uint256)) == value;\\n    }\\n\\n    /// @notice Calls target with specified data and tests if it's lower than value\\n    /// @param value Value to test\\n    /// @return Result True if call to target returns value which is lower than `value`. Otherwise, false\\n    function lt(\\n        uint256 value,\\n        address target,\\n        bytes memory data\\n    ) external view returns (bool) {\\n        bytes memory result = target.functionStaticCall(data, \\\"PH: lt\\\");\\n        require(result.length == 32, \\\"PH: invalid call result\\\");\\n        return abi.decode(result, (uint256)) < value;\\n    }\\n\\n    /// @notice Calls target with specified data and tests if it's bigger than value\\n    /// @param value Value to test\\n    /// @return Result True if call to target returns value which is bigger than `value`. Otherwise, false\\n    function gt(\\n        uint256 value,\\n        address target,\\n        bytes memory data\\n    ) external view returns (bool) {\\n        bytes memory result = target.functionStaticCall(data, \\\"PH: gt\\\");\\n        require(result.length == 32, \\\"PH: invalid call result\\\");\\n        return abi.decode(result, (uint256)) > value;\\n    }\\n\\n    /// @notice Checks passed time against block timestamp\\n    /// @return Result True if current block timestamp is lower than `time`. Otherwise, false\\n    function timestampBelow(uint256 time) external view returns (bool) {\\n        return block.timestamp < time; // solhint-disable-line not-rely-on-time\\n    }\\n}\\n\",\"keccak256\":\"0xdbae6cd603d96b7c56db93c932d36d9d34d8f7b898c099a580e66e76e4e74afc\",\"license\":\"MIT\"},\"contracts/interfaces/IDaiLikePermit.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.11;\\npragma abicoder v1;\\n\\n/// @title Interface for DAI-style permits\\ninterface IDaiLikePermit {\\n    function permit(\\n        address holder,\\n        address spender,\\n        uint256 nonce,\\n        uint256 expiry,\\n        bool allowed,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external;\\n}\\n\",\"keccak256\":\"0xfac5b018eeefdfa46deb4839b59d8df0dc8cdef9e441a0b7513e18a448dde0fa\",\"license\":\"MIT\"},\"contracts/interfaces/InteractiveNotificationReceiver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.11;\\npragma abicoder v1;\\n\\n/// @title Interface for interactor which acts between `maker => taker` and `taker => maker` transfers.\\ninterface InteractiveNotificationReceiver {\\n    /// @notice Callback method that gets called after taker transferred funds to maker but before\\n    /// the opposite transfer happened\\n    function notifyFillOrder(\\n        address taker,\\n        address asset,\\n        address underlyingAsset,\\n        bool isFixedTaker,\\n        uint256 fixedTokens,\\n        uint256 variableTokens,\\n        bytes memory interactiveData\\n    ) external;\\n}\\n\",\"keccak256\":\"0x7d2095a57f6599c69a4f82bd799ba986da3140bcd246d72c4ffbf8e9f4454641\",\"license\":\"MIT\"},\"contracts/libraries/ArgumentsDecoder.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.11;\\npragma abicoder v1;\\n\\n/// @title Library with gas efficient alternatives to `abi.decode`\\nlibrary ArgumentsDecoder {\\n    function decodeUint256(bytes memory data) internal pure returns (uint256) {\\n        uint256 value;\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly {\\n            value := mload(add(data, 0x20))\\n        }\\n        return value;\\n    }\\n\\n    function decodeInt256(bytes memory data) internal pure returns (int256) {\\n        int256 value;\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly {\\n            value := mload(add(data, 0x20))\\n        }\\n        return value;\\n    }\\n\\n    function decodeBool(bytes memory data) internal pure returns (bool) {\\n        bool value;\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly {\\n            value := eq(mload(add(data, 0x20)), 1)\\n        }\\n        return value;\\n    }\\n\\n    function decodeTargetAndCalldata(bytes memory data)\\n        internal\\n        pure\\n        returns (address, bytes memory)\\n    {\\n        address target;\\n        bytes memory args;\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly {\\n            target := mload(add(data, 0x14))\\n            args := add(data, 0x14)\\n            mstore(args, sub(mload(data), 0x14))\\n        }\\n        return (target, args);\\n    }\\n\\n    function decodeTargetAndData(bytes calldata data)\\n        internal\\n        pure\\n        returns (address, bytes calldata)\\n    {\\n        address target;\\n        bytes calldata args;\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly {\\n            target := shr(96, calldataload(data.offset))\\n        }\\n        args = data[20:];\\n        return (target, args);\\n    }\\n}\\n\",\"keccak256\":\"0xcc4825570542f5820109f6dfa00d6ba92c4d1f6e88e221ec23d091d27864eccf\",\"license\":\"MIT\"},\"contracts/libraries/MarginLib.sol\":{\"content\":\"// SPDX-License-Identifier: BSD-4-Clause\\n/*\\n * ABDK Math 64.64 Smart Contract Library.  Copyright \\u00a9 2019 by ABDK Consulting.\\n * Author: Mikhail Vladimirov <mikhail.vladimirov@gmail.com>\\n */\\npragma solidity ^0.8.0;\\n\\nimport \\\"../mocks/OracleMock.sol\\\";\\n\\n/**\\n * Smart contract library of mathematical functions operating with signed\\n * 64.64-bit fixed point numbers.  Signed 64.64-bit fixed point number is\\n * basically a simple fraction whose numerator is signed 128-bit integer and\\n * denominator is 2^64.  As long as denominator is always the same, there is no\\n * need to store it, thus in Solidity signed 64.64-bit fixed point numbers are\\n * represented by int128 type holding only the numerator.\\n */\\nlibrary MarginLib {\\n    /*\\n     * Minimum value signed 64.64-bit fixed point number may have.\\n     */\\n    int128 private constant _MIN64X64 = -0x80000000000000000000000000000000;\\n\\n    /*\\n     * Maximum value signed 64.64-bit fixed point number may have.\\n     */\\n    int128 private constant _MAX64X64 = 0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF;\\n\\n    /*\\n     * Log e with base 2 in signed 64.64-bit fixed point format.\\n     */\\n    int128 private constant _LOG2E = 0x000000000000000171547652B83A2E3E;\\n\\n    /*\\n     * 1 / 2 in signed 64.64-bit fixed point format.\\n     */\\n    int128 private constant _ONEBYTWO = 0x00000000000000008000000000000000;\\n\\n    /*\\n     * 1 / 100 in signed 64.64-bit fixed point format.\\n     */\\n    int128 private constant _ONEBYHUNDRED = 0x0000000000000000028F5C28F5C28F5C;\\n\\n    struct AssetInfo {\\n        address asset;\\n        address underlyingAsset;\\n        int128 alpha;\\n        int128 beta;\\n        int128 sigma;\\n        int128 lowerBoundMul;\\n        int128 upperBoundMul;\\n    }\\n\\n    struct OrderInfo {\\n        bytes32 orderHash;\\n        uint256 beginTimestamp;\\n        uint256 endTimestamp;\\n        bool isOrderDefaulted;\\n        int128 term;\\n        uint256 fixedTokens;\\n        uint256 variableTokens;\\n        bool forFixedTaker;\\n    }\\n\\n    /**\\n     * Calculate x + y.  Revert on overflow.\\n     *\\n     * @param x signed 64.64-bit fixed point number\\n     * @param y signed 64.64-bit fixed point number\\n     * @return signed 64.64-bit fixed point number\\n     */\\n    function _add(int128 x, int128 y) private pure returns (int128) {\\n        unchecked {\\n            int256 result = int256(x) + y;\\n            require(\\n                result >= _MIN64X64 && result <= _MAX64X64,\\n                \\\"LOP: Overflow\\\"\\n            );\\n            return int128(result);\\n        }\\n    }\\n\\n    /**\\n     * Calculate x - y.  Revert on overflow.\\n     *\\n     * @param x signed 64.64-bit fixed point number\\n     * @param y signed 64.64-bit fixed point number\\n     * @return signed 64.64-bit fixed point number\\n     */\\n    function _sub(int128 x, int128 y) private pure returns (int128) {\\n        unchecked {\\n            int256 result = int256(x) - y;\\n            require(\\n                result >= _MIN64X64 && result <= _MAX64X64,\\n                \\\"LOP: Overflow\\\"\\n            );\\n            return int128(result);\\n        }\\n    }\\n\\n    /**\\n     * Calculate x * y rounding down.  Revert on overflow.\\n     *\\n     * @param x signed 64.64-bit fixed point number\\n     * @param y signed 64.64-bit fixed point number\\n     * @return signed 64.64-bit fixed point number\\n     */\\n    function _mul(int128 x, int128 y) private pure returns (int128) {\\n        unchecked {\\n            int256 result = (int256(x) * y) >> 64;\\n            require(\\n                result >= _MIN64X64 && result <= _MAX64X64,\\n                \\\"LOP: Overflow\\\"\\n            );\\n            return int128(result);\\n        }\\n    }\\n\\n    /**\\n     * Calculate x * y rounding down, where x is signed 64.64 fixed point number\\n     * and y is unsigned 256-bit integer number.  Revert on overflow.\\n     *\\n     * @param x signed 64.64 fixed point number\\n     * @param y unsigned 256-bit integer number\\n     * @return unsigned 256-bit integer number\\n     */\\n    function mulu(int128 x, uint256 y) internal pure returns (uint256) {\\n        unchecked {\\n            if (y == 0) return 0;\\n\\n            require(x >= 0, \\\"LOP: Underflow\\\");\\n\\n            uint256 lo = (uint256(int256(x)) *\\n                (y & 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF)) >> 64;\\n            uint256 hi = uint256(int256(x)) * (y >> 128);\\n\\n            require(\\n                hi <= 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF,\\n                \\\"LOP: Overflow\\\"\\n            );\\n            hi <<= 64;\\n\\n            require(\\n                hi <=\\n                    0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF -\\n                        lo,\\n                \\\"LOP: Overflow\\\"\\n            );\\n            return hi + lo;\\n        }\\n    }\\n\\n    /**\\n     * Calculate x / y rounding towards zero.  Revert on overflow or when y is\\n     * zero.\\n     *\\n     * @param x signed 64.64-bit fixed point number\\n     * @param y signed 64.64-bit fixed point number\\n     * @return signed 64.64-bit fixed point number\\n     */\\n    function _div(int128 x, int128 y) private pure returns (int128) {\\n        unchecked {\\n            require(y != 0, \\\"LOP: Zero divisor\\\");\\n            int256 result = (int256(x) << 64) / y;\\n            require(\\n                result >= _MIN64X64 && result <= _MAX64X64,\\n                \\\"LOP: Overflow\\\"\\n            );\\n            return int128(result);\\n        }\\n    }\\n\\n    /**\\n     * Calculate x / y rounding towards zero, where x and y are unsigned 256-bit\\n     * integer numbers.  Revert on overflow or when y is zero.\\n     *\\n     * @param x unsigned 256-bit integer number\\n     * @param y unsigned 256-bit integer number\\n     * @return signed 64.64-bit fixed point number\\n     */\\n    function _divu(uint256 x, uint256 y) private pure returns (int128) {\\n        unchecked {\\n            require(y != 0, \\\"LOP: Zero divisor\\\");\\n            uint128 result = _divuu(x, y);\\n            require(result <= uint128(_MAX64X64), \\\"LOP: Overflow\\\");\\n            return int128(result);\\n        }\\n    }\\n\\n    /**\\n     * Calculate binary logarithm of x.  Revert if x <= 0.\\n     *\\n     * @param x signed 64.64-bit fixed point number\\n     * @return signed 64.64-bit fixed point number\\n     */\\n    function _log2(int128 x) private pure returns (int128) {\\n        unchecked {\\n            require(x > 0, \\\"LOP: Negative\\\");\\n\\n            int256 msb = 0;\\n            int256 xc = x;\\n            if (xc >= 0x10000000000000000) {\\n                xc >>= 64;\\n                msb += 64;\\n            }\\n            if (xc >= 0x100000000) {\\n                xc >>= 32;\\n                msb += 32;\\n            }\\n            if (xc >= 0x10000) {\\n                xc >>= 16;\\n                msb += 16;\\n            }\\n            if (xc >= 0x100) {\\n                xc >>= 8;\\n                msb += 8;\\n            }\\n            if (xc >= 0x10) {\\n                xc >>= 4;\\n                msb += 4;\\n            }\\n            if (xc >= 0x4) {\\n                xc >>= 2;\\n                msb += 2;\\n            }\\n            if (xc >= 0x2) msb += 1; // No need to shift xc anymore\\n\\n            int256 result = (msb - 64) << 64;\\n            uint256 ux = uint256(int256(x)) << uint256(127 - msb);\\n            for (int256 bit = 0x8000000000000000; bit > 0; bit >>= 1) {\\n                ux *= ux;\\n                uint256 b = ux >> 255;\\n                ux >>= 127 + b;\\n                result += bit * int256(b);\\n            }\\n\\n            return int128(result);\\n        }\\n    }\\n\\n    /**\\n     * Calculate binary exponent of x.  Revert on overflow.\\n     *\\n     * @param x signed 64.64-bit fixed point number\\n     * @return signed 64.64-bit fixed point number\\n     */\\n    function _exp2(int128 x) private pure returns (int128) {\\n        unchecked {\\n            require(x < 0x400000000000000000, \\\"LOP: Overflow\\\"); // Overflow\\n\\n            if (x < -0x400000000000000000) return 0; // Underflow\\n\\n            uint256 result = 0x80000000000000000000000000000000;\\n\\n            if (x & 0x8000000000000000 > 0)\\n                result = (result * 0x16A09E667F3BCC908B2FB1366EA957D3E) >> 128;\\n            if (x & 0x4000000000000000 > 0)\\n                result = (result * 0x1306FE0A31B7152DE8D5A46305C85EDEC) >> 128;\\n            if (x & 0x2000000000000000 > 0)\\n                result = (result * 0x1172B83C7D517ADCDF7C8C50EB14A791F) >> 128;\\n            if (x & 0x1000000000000000 > 0)\\n                result = (result * 0x10B5586CF9890F6298B92B71842A98363) >> 128;\\n            if (x & 0x800000000000000 > 0)\\n                result = (result * 0x1059B0D31585743AE7C548EB68CA417FD) >> 128;\\n            if (x & 0x400000000000000 > 0)\\n                result = (result * 0x102C9A3E778060EE6F7CACA4F7A29BDE8) >> 128;\\n            if (x & 0x200000000000000 > 0)\\n                result = (result * 0x10163DA9FB33356D84A66AE336DCDFA3F) >> 128;\\n            if (x & 0x100000000000000 > 0)\\n                result = (result * 0x100B1AFA5ABCBED6129AB13EC11DC9543) >> 128;\\n            if (x & 0x80000000000000 > 0)\\n                result = (result * 0x10058C86DA1C09EA1FF19D294CF2F679B) >> 128;\\n            if (x & 0x40000000000000 > 0)\\n                result = (result * 0x1002C605E2E8CEC506D21BFC89A23A00F) >> 128;\\n            if (x & 0x20000000000000 > 0)\\n                result = (result * 0x100162F3904051FA128BCA9C55C31E5DF) >> 128;\\n            if (x & 0x10000000000000 > 0)\\n                result = (result * 0x1000B175EFFDC76BA38E31671CA939725) >> 128;\\n            if (x & 0x8000000000000 > 0)\\n                result = (result * 0x100058BA01FB9F96D6CACD4B180917C3D) >> 128;\\n            if (x & 0x4000000000000 > 0)\\n                result = (result * 0x10002C5CC37DA9491D0985C348C68E7B3) >> 128;\\n            if (x & 0x2000000000000 > 0)\\n                result = (result * 0x1000162E525EE054754457D5995292026) >> 128;\\n            if (x & 0x1000000000000 > 0)\\n                result = (result * 0x10000B17255775C040618BF4A4ADE83FC) >> 128;\\n            if (x & 0x800000000000 > 0)\\n                result = (result * 0x1000058B91B5BC9AE2EED81E9B7D4CFAB) >> 128;\\n            if (x & 0x400000000000 > 0)\\n                result = (result * 0x100002C5C89D5EC6CA4D7C8ACC017B7C9) >> 128;\\n            if (x & 0x200000000000 > 0)\\n                result = (result * 0x10000162E43F4F831060E02D839A9D16D) >> 128;\\n            if (x & 0x100000000000 > 0)\\n                result = (result * 0x100000B1721BCFC99D9F890EA06911763) >> 128;\\n            if (x & 0x80000000000 > 0)\\n                result = (result * 0x10000058B90CF1E6D97F9CA14DBCC1628) >> 128;\\n            if (x & 0x40000000000 > 0)\\n                result = (result * 0x1000002C5C863B73F016468F6BAC5CA2B) >> 128;\\n            if (x & 0x20000000000 > 0)\\n                result = (result * 0x100000162E430E5A18F6119E3C02282A5) >> 128;\\n            if (x & 0x10000000000 > 0)\\n                result = (result * 0x1000000B1721835514B86E6D96EFD1BFE) >> 128;\\n            if (x & 0x8000000000 > 0)\\n                result = (result * 0x100000058B90C0B48C6BE5DF846C5B2EF) >> 128;\\n            if (x & 0x4000000000 > 0)\\n                result = (result * 0x10000002C5C8601CC6B9E94213C72737A) >> 128;\\n            if (x & 0x2000000000 > 0)\\n                result = (result * 0x1000000162E42FFF037DF38AA2B219F06) >> 128;\\n            if (x & 0x1000000000 > 0)\\n                result = (result * 0x10000000B17217FBA9C739AA5819F44F9) >> 128;\\n            if (x & 0x800000000 > 0)\\n                result = (result * 0x1000000058B90BFCDEE5ACD3C1CEDC823) >> 128;\\n            if (x & 0x400000000 > 0)\\n                result = (result * 0x100000002C5C85FE31F35A6A30DA1BE50) >> 128;\\n            if (x & 0x200000000 > 0)\\n                result = (result * 0x10000000162E42FF0999CE3541B9FFFCF) >> 128;\\n            if (x & 0x100000000 > 0)\\n                result = (result * 0x100000000B17217F80F4EF5AADDA45554) >> 128;\\n            if (x & 0x80000000 > 0)\\n                result = (result * 0x10000000058B90BFBF8479BD5A81B51AD) >> 128;\\n            if (x & 0x40000000 > 0)\\n                result = (result * 0x1000000002C5C85FDF84BD62AE30A74CC) >> 128;\\n            if (x & 0x20000000 > 0)\\n                result = (result * 0x100000000162E42FEFB2FED257559BDAA) >> 128;\\n            if (x & 0x10000000 > 0)\\n                result = (result * 0x1000000000B17217F7D5A7716BBA4A9AE) >> 128;\\n            if (x & 0x8000000 > 0)\\n                result = (result * 0x100000000058B90BFBE9DDBAC5E109CCE) >> 128;\\n            if (x & 0x4000000 > 0)\\n                result = (result * 0x10000000002C5C85FDF4B15DE6F17EB0D) >> 128;\\n            if (x & 0x2000000 > 0)\\n                result = (result * 0x1000000000162E42FEFA494F1478FDE05) >> 128;\\n            if (x & 0x1000000 > 0)\\n                result = (result * 0x10000000000B17217F7D20CF927C8E94C) >> 128;\\n            if (x & 0x800000 > 0)\\n                result = (result * 0x1000000000058B90BFBE8F71CB4E4B33D) >> 128;\\n            if (x & 0x400000 > 0)\\n                result = (result * 0x100000000002C5C85FDF477B662B26945) >> 128;\\n            if (x & 0x200000 > 0)\\n                result = (result * 0x10000000000162E42FEFA3AE53369388C) >> 128;\\n            if (x & 0x100000 > 0)\\n                result = (result * 0x100000000000B17217F7D1D351A389D40) >> 128;\\n            if (x & 0x80000 > 0)\\n                result = (result * 0x10000000000058B90BFBE8E8B2D3D4EDE) >> 128;\\n            if (x & 0x40000 > 0)\\n                result = (result * 0x1000000000002C5C85FDF4741BEA6E77E) >> 128;\\n            if (x & 0x20000 > 0)\\n                result = (result * 0x100000000000162E42FEFA39FE95583C2) >> 128;\\n            if (x & 0x10000 > 0)\\n                result = (result * 0x1000000000000B17217F7D1CFB72B45E1) >> 128;\\n            if (x & 0x8000 > 0)\\n                result = (result * 0x100000000000058B90BFBE8E7CC35C3F0) >> 128;\\n            if (x & 0x4000 > 0)\\n                result = (result * 0x10000000000002C5C85FDF473E242EA38) >> 128;\\n            if (x & 0x2000 > 0)\\n                result = (result * 0x1000000000000162E42FEFA39F02B772C) >> 128;\\n            if (x & 0x1000 > 0)\\n                result = (result * 0x10000000000000B17217F7D1CF7D83C1A) >> 128;\\n            if (x & 0x800 > 0)\\n                result = (result * 0x1000000000000058B90BFBE8E7BDCBE2E) >> 128;\\n            if (x & 0x400 > 0)\\n                result = (result * 0x100000000000002C5C85FDF473DEA871F) >> 128;\\n            if (x & 0x200 > 0)\\n                result = (result * 0x10000000000000162E42FEFA39EF44D91) >> 128;\\n            if (x & 0x100 > 0)\\n                result = (result * 0x100000000000000B17217F7D1CF79E949) >> 128;\\n            if (x & 0x80 > 0)\\n                result = (result * 0x10000000000000058B90BFBE8E7BCE544) >> 128;\\n            if (x & 0x40 > 0)\\n                result = (result * 0x1000000000000002C5C85FDF473DE6ECA) >> 128;\\n            if (x & 0x20 > 0)\\n                result = (result * 0x100000000000000162E42FEFA39EF366F) >> 128;\\n            if (x & 0x10 > 0)\\n                result = (result * 0x1000000000000000B17217F7D1CF79AFA) >> 128;\\n            if (x & 0x8 > 0)\\n                result = (result * 0x100000000000000058B90BFBE8E7BCD6D) >> 128;\\n            if (x & 0x4 > 0)\\n                result = (result * 0x10000000000000002C5C85FDF473DE6B2) >> 128;\\n            if (x & 0x2 > 0)\\n                result = (result * 0x1000000000000000162E42FEFA39EF358) >> 128;\\n            if (x & 0x1 > 0)\\n                result = (result * 0x10000000000000000B17217F7D1CF79AB) >> 128;\\n\\n            result >>= uint256(int256(63 - (x >> 64)));\\n            require(result <= uint256(int256(_MAX64X64)), \\\"LOP: Overflow\\\");\\n\\n            return int128(int256(result));\\n        }\\n    }\\n\\n    /**\\n     * Calculate x / y rounding towards zero, where x and y are unsigned 256-bit\\n     * integer numbers.  Revert on overflow or when y is zero.\\n     *\\n     * @param x unsigned 256-bit integer number\\n     * @param y unsigned 256-bit integer number\\n     * @return unsigned 64.64-bit fixed point number\\n     */\\n    function _divuu(uint256 x, uint256 y) private pure returns (uint128) {\\n        unchecked {\\n            require(y != 0, \\\"LOP: Zero Divisor\\\");\\n\\n            uint256 result;\\n\\n            if (x <= 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF)\\n                result = (x << 64) / y;\\n            else {\\n                uint256 msb = 192;\\n                uint256 xc = x >> 192;\\n                if (xc >= 0x100000000) {\\n                    xc >>= 32;\\n                    msb += 32;\\n                }\\n                if (xc >= 0x10000) {\\n                    xc >>= 16;\\n                    msb += 16;\\n                }\\n                if (xc >= 0x100) {\\n                    xc >>= 8;\\n                    msb += 8;\\n                }\\n                if (xc >= 0x10) {\\n                    xc >>= 4;\\n                    msb += 4;\\n                }\\n                if (xc >= 0x4) {\\n                    xc >>= 2;\\n                    msb += 2;\\n                }\\n                if (xc >= 0x2) msb += 1; // No need to shift xc anymore\\n\\n                result = (x << (255 - msb)) / (((y - 1) >> (msb - 191)) + 1);\\n                require(\\n                    result <= 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF,\\n                    \\\"LOP: Overflow\\\"\\n                );\\n\\n                uint256 hi = result * (y >> 128);\\n                uint256 lo = result * (y & 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF);\\n\\n                uint256 xh = x >> 192;\\n                uint256 xl = x << 64;\\n\\n                if (xl < lo) xh -= 1;\\n                xl -= lo; // We rely on overflow behavior here\\n                lo = hi << 128;\\n                if (xl < lo) xh -= 1;\\n                xl -= lo; // We rely on overflow behavior here\\n\\n                assert(xh == hi >> 128);\\n\\n                result += xl / y;\\n            }\\n\\n            require(\\n                result <= 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF,\\n                \\\"LOP: Overflow\\\"\\n            );\\n            return uint128(result);\\n        }\\n    }\\n\\n    function _getCIRModelParams(\\n        AssetInfo memory assetInfo,\\n        int128 t,\\n        int128 ewmaAPY\\n    )\\n        private\\n        pure\\n        returns (\\n            int128 k,\\n            int128 lambda,\\n            int128 ct\\n        )\\n    {\\n        int128 beta = assetInfo.beta;\\n        int128 sigma = assetInfo.sigma; \\n        int128 exponent = _exp2(\\n            _mul(\\n                _mul(_mul(-1 * (1 << 64), beta), t),\\n                _LOG2E\\n            )\\n        );\\n        int128 numerator = _mul(\\n            _mul(_mul(4 * (1 << 64), beta), ewmaAPY),\\n            exponent\\n        );\\n        int128 denominator = _mul(\\n            _mul(sigma, sigma),\\n            _sub(1 * (1 << 64), exponent)\\n        );\\n\\n        k = _div(\\n            _mul(4 * (1 << 64), assetInfo.alpha),\\n            _mul(sigma, sigma)\\n        );\\n        lambda = _div(numerator, denominator);\\n        ct = _div(\\n            denominator,\\n            _mul(4 * (1 << 64), beta)\\n        );\\n    }\\n\\n    function _getAPYBounds(\\n        AssetInfo memory assetInfo,\\n        int128 t,\\n        int128 ewma\\n    ) private pure returns (int128, int128) {\\n        (int128 k, int128 lambda, int128 ct) = _getCIRModelParams(\\n            assetInfo,\\n            t,\\n            ewma\\n        );\\n        int128 upperBoundMul = assetInfo.upperBoundMul;\\n        int128 lowerBoundMul = assetInfo.lowerBoundMul;\\n        int128 upperBound;\\n        int128 lowerBound;\\n        {\\n            int128 sqrtTerm = _mul(\\n                2 * (1 << 64),\\n                _add(k, _mul(2 * (1 << 64), lambda))\\n            );\\n            int128 sqrtCal = _exp2(\\n                _mul(_log2(sqrtTerm), _ONEBYTWO)\\n            );\\n            upperBound = _mul(\\n                ct,\\n                _add(\\n                    _add(k, lambda),\\n                    _mul(upperBoundMul, sqrtCal)\\n                )\\n            );\\n            lowerBound = _mul(\\n                ct,\\n                _sub(\\n                    _add(k, lambda),\\n                    _mul(lowerBoundMul, sqrtCal)\\n                )\\n            );\\n        }\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly {\\n            if gt(0, lowerBound) {\\n                lowerBound := 0\\n            }\\n        }\\n        return (lowerBound, upperBound);\\n    }\\n\\n    function getAverageAccruedAPYBetweenTimestamps(\\n        OracleMock oracle,\\n        address asset,\\n        address underlyingAsset,\\n        uint256 startTimestamp,\\n        uint256 endTimestamp\\n    ) public view returns (int128 apy, int128 ewma) {\\n        int256 answer = oracle.getAverageAccruedAPYBetweenTimestamps(\\n            asset,\\n            underlyingAsset,\\n            startTimestamp,\\n            endTimestamp\\n        );\\n        apy = int128((answer << 128) >> 128);\\n        ewma = int128(answer >> 128);\\n    }\\n\\n    function getMarginReqWithMuls(\\n        OracleMock oracle,\\n        OrderInfo memory orderInfo,\\n        AssetInfo memory assetInfo,\\n        int128 tl,\\n        int128 tu\\n    ) public view returns (uint256) {\\n        uint256 beginTimestamp = orderInfo.beginTimestamp;\\n        uint256 endTimestamp = orderInfo.endTimestamp;\\n        int128 apyLower;\\n        int128 apyUpper;\\n        int128 accruedAPY;\\n        {\\n            int128 ewma;\\n            (accruedAPY, ewma) = getAverageAccruedAPYBetweenTimestamps(\\n                oracle,\\n                assetInfo.asset,\\n                assetInfo.underlyingAsset,\\n                beginTimestamp,\\n                block.timestamp // solhint-disable-line\\n            );\\n            (apyLower, apyUpper) = _getAPYBounds(\\n                assetInfo,\\n                _divu(\\n                    endTimestamp - block.timestamp, // solhint-disable-line\\n                    endTimestamp - beginTimestamp\\n                ),\\n                ewma\\n            );\\n        }\\n        {\\n            int128 w1 = _divu(\\n                block.timestamp - beginTimestamp, // solhint-disable-line\\n                endTimestamp - beginTimestamp\\n            ); \\n            int128 w2 = _divu(\\n                endTimestamp - block.timestamp, // solhint-disable-line\\n                endTimestamp - beginTimestamp\\n            ); \\n            apyLower = _add(\\n                _mul(w1, accruedAPY),\\n                _mul(w2, apyLower)\\n            );\\n            apyUpper = _add(\\n                _mul(w1, accruedAPY),\\n                _mul(w2, apyUpper)\\n            );\\n            apyLower = _mul(apyLower, tl);\\n            apyUpper = _mul(apyUpper, tu);\\n        }\\n        uint256 positiveMargin;\\n        uint256 negativeMargin;\\n        if (orderInfo.forFixedTaker) {\\n            positiveMargin = mulu(\\n                _mul(apyUpper, orderInfo.term),\\n                orderInfo.variableTokens\\n            );\\n            negativeMargin = mulu(\\n                _mul(_ONEBYHUNDRED, orderInfo.term),\\n                orderInfo.fixedTokens\\n            );\\n        } else {\\n            positiveMargin = mulu(\\n                _mul(_ONEBYHUNDRED, orderInfo.term),\\n                orderInfo.fixedTokens\\n            );\\n            negativeMargin = mulu(\\n                _mul(apyLower, orderInfo.term),\\n               orderInfo. variableTokens\\n            );\\n        }\\n        uint256 marginReq = 0;\\n        uint256 minMargin = 100;\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly {\\n            if gt(positiveMargin, negativeMargin) {\\n                marginReq := sub(positiveMargin, negativeMargin)\\n            }\\n            if gt(minMargin, marginReq) {\\n                marginReq := minMargin\\n            }\\n        }\\n        return marginReq;\\n    }\\n\\n    function getReturnAfterMaturity(\\n        uint256 onePercentFixedTokens,\\n        uint256 onePercentVariableTokens,\\n        uint256 margin,\\n        bool forFixedTaker,\\n        int128 term\\n    ) public pure returns(uint256 orderReturn) {\\n        if (forFixedTaker) {\\n            if (onePercentFixedTokens >= onePercentVariableTokens) {\\n                uint256 diff = mulu(\\n                    term,\\n                    onePercentFixedTokens - onePercentVariableTokens\\n                ) / 100;\\n                orderReturn = margin + diff;\\n            } else {\\n                uint256 diff = mulu(\\n                    term,\\n                    onePercentVariableTokens - onePercentFixedTokens\\n                ) / 100;\\n                assert(diff <= margin);\\n                orderReturn = margin - diff;\\n            }\\n        } else {\\n            if (onePercentVariableTokens >= onePercentFixedTokens) {\\n                uint256 diff = mulu(\\n                    term,\\n                    onePercentVariableTokens - onePercentFixedTokens\\n                ) / 100;\\n                orderReturn = margin + diff;\\n            } else {\\n                uint256 diff = mulu(\\n                    term,\\n                    onePercentFixedTokens - onePercentVariableTokens\\n                ) / 100;\\n                assert(diff <= margin);\\n                orderReturn = margin - diff;\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xaea7c1d3377c74dc3c854385f67eb6865f13005a3740235581391667aedd65cf\",\"license\":\"BSD-4-Clause\"},\"contracts/libraries/Permitable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.11;\\npragma abicoder v1;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/extensions/draft-IERC20Permit.sol\\\";\\nimport \\\"./RevertReasonParser.sol\\\";\\nimport \\\"../interfaces/IDaiLikePermit.sol\\\";\\n\\n/// @title Base contract with common permit handling logics\\nabstract contract Permitable {\\n    function _permit(address token, bytes calldata permit) internal {\\n        if (permit.length > 0) {\\n            bool success;\\n            bytes memory result;\\n            if (permit.length == 32 * 7) {\\n                // solhint-disable-next-line avoid-low-level-calls\\n                (success, result) = token.call(\\n                    abi.encodePacked(IERC20Permit.permit.selector, permit)\\n                );\\n            } else if (permit.length == 32 * 8) {\\n                // solhint-disable-next-line avoid-low-level-calls\\n                (success, result) = token.call(\\n                    abi.encodePacked(IDaiLikePermit.permit.selector, permit)\\n                );\\n            } else {\\n                revert(\\\"Wrong permit length\\\");\\n            }\\n            if (!success) {\\n                revert(RevertReasonParser.parse(result, \\\"Permit failed: \\\"));\\n            }\\n        }\\n    }\\n\\n    function _permitMemory(address token, bytes memory permit) internal {\\n        if (permit.length > 0) {\\n            bool success;\\n            bytes memory result;\\n            if (permit.length == 32 * 7) {\\n                // solhint-disable-next-line avoid-low-level-calls\\n                (success, result) = token.call(\\n                    abi.encodePacked(IERC20Permit.permit.selector, permit)\\n                );\\n            } else if (permit.length == 32 * 8) {\\n                // solhint-disable-next-line avoid-low-level-calls\\n                (success, result) = token.call(\\n                    abi.encodePacked(IDaiLikePermit.permit.selector, permit)\\n                );\\n            } else {\\n                revert(\\\"Wrong permit length\\\");\\n            }\\n            if (!success) {\\n                revert(RevertReasonParser.parse(result, \\\"Permit failed: \\\"));\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x7cc4c04cd20078a745fd8776c47110721efa55aaf4a71ca979715cb499d11500\",\"license\":\"MIT\"},\"contracts/libraries/RevertReasonParser.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.11;\\npragma abicoder v1;\\n\\n/// @title Library that allows to parse unsuccessful arbitrary calls revert reasons.\\n/// See https://solidity.readthedocs.io/en/latest/control-structures.html#revert for details.\\n/// Note that we assume revert reason being abi-encoded as Error(string) so it may fail to parse reason\\n/// if structured reverts appear in the future.\\n///\\n/// All unsuccessful parsings get encoded as Unknown(data) string\\nlibrary RevertReasonParser {\\n    bytes4 private constant _PANIC_SELECTOR =\\n        bytes4(keccak256(\\\"Panic(uint256)\\\"));\\n    bytes4 private constant _ERROR_SELECTOR =\\n        bytes4(keccak256(\\\"Error(string)\\\"));\\n\\n    function parse(bytes memory data, string memory prefix)\\n        internal\\n        pure\\n        returns (string memory)\\n    {\\n        if (data.length >= 4) {\\n            bytes4 selector;\\n            // solhint-disable-next-line no-inline-assembly\\n            assembly {\\n                selector := mload(add(data, 0x20))\\n            }\\n\\n            // 68 = 4-byte selector + 32 bytes offset + 32 bytes length\\n            if (selector == _ERROR_SELECTOR && data.length >= 68) {\\n                uint256 offset;\\n                bytes memory reason;\\n                // solhint-disable-next-line no-inline-assembly\\n                assembly {\\n                    // 36 = 32 bytes data length + 4-byte selector\\n                    offset := mload(add(data, 36))\\n                    reason := add(data, add(36, offset))\\n                }\\n                /*\\n                    revert reason is padded up to 32 bytes with ABI encoder: Error(string)\\n                    also sometimes there is extra 32 bytes of zeros padded in the end:\\n                    https://github.com/ethereum/solidity/issues/10170\\n                    because of that we can't check for equality and instead check\\n                    that offset + string length + extra 36 bytes is less than overall data length\\n                */\\n                require(\\n                    data.length >= 36 + offset + reason.length,\\n                    \\\"Invalid revert reason\\\"\\n                );\\n                return string(abi.encodePacked(prefix, \\\"Error(\\\", reason, \\\")\\\"));\\n            }\\n            // 36 = 4-byte selector + 32 bytes integer\\n            else if (selector == _PANIC_SELECTOR && data.length == 36) {\\n                uint256 code;\\n                // solhint-disable-next-line no-inline-assembly\\n                assembly {\\n                    // 36 = 32 bytes data length + 4-byte selector\\n                    code := mload(add(data, 36))\\n                }\\n                return\\n                    string(\\n                        abi.encodePacked(prefix, \\\"Panic(\\\", _toHex(code), \\\")\\\")\\n                    );\\n            }\\n        }\\n\\n        return string(abi.encodePacked(prefix, \\\"Unknown(\\\", _toHex(data), \\\")\\\"));\\n    }\\n\\n    function _toHex(uint256 value) private pure returns (string memory) {\\n        return _toHex(abi.encodePacked(value));\\n    }\\n\\n    function _toHex(bytes memory data) private pure returns (string memory) {\\n        bytes16 alphabet = 0x30313233343536373839616263646566;\\n        bytes memory str = new bytes(2 + data.length * 2);\\n        str[0] = \\\"0\\\";\\n        str[1] = \\\"x\\\";\\n        for (uint256 i = 0; i < data.length; i++) {\\n            str[2 * i + 2] = alphabet[uint8(data[i] >> 4)];\\n            str[2 * i + 3] = alphabet[uint8(data[i] & 0x0f)];\\n        }\\n        return string(str);\\n    }\\n}\\n\",\"keccak256\":\"0x5905e9c8cd5f930f1c3aa1ea6dfefcf37e649e92eecd9eea04177b9d26473d31\",\"license\":\"MIT\"},\"contracts/mocks/OracleMock.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.11;\\npragma abicoder v1;\\n\\nimport \\\"@chainlink/contracts/src/v0.8/interfaces/AggregatorV2V3Interface.sol\\\";\\n\\n/// @title Mock oracle that always returns specified token price\\ncontract OracleMock is AggregatorV2V3Interface {\\n    int256 private immutable _answer;\\n\\n    constructor(int256 answer) {\\n        _answer = answer;\\n    }\\n\\n    function decimals() external pure returns (uint8) {\\n        return 18;\\n    }\\n\\n    function description() external pure returns (string memory) {\\n        return \\\"AggregatorMock\\\";\\n    }\\n\\n    function version() external pure returns (uint256) {\\n        return 1;\\n    }\\n\\n    function getRoundData(uint80 _roundId)\\n        external\\n        view\\n        returns (\\n            uint80 roundId,\\n            int256 answer,\\n            uint256 startedAt,\\n            uint256 updatedAt,\\n            uint80 answeredInRound\\n        )\\n    {\\n        require(_roundId == 0, \\\"No data present\\\");\\n        return latestRoundData();\\n    }\\n\\n    function latestRoundData()\\n        public\\n        view\\n        returns (\\n            uint80 roundId,\\n            int256 answer,\\n            uint256 startedAt,\\n            uint256 updatedAt,\\n            uint80 answeredInRound\\n        )\\n    {\\n        // solhint-disable-next-line not-rely-on-time\\n        return (0, _answer, block.timestamp - 100, block.timestamp - 100, 0);\\n    }\\n\\n    function latestAnswer() public view returns (int256) {\\n        return _answer;\\n    }\\n\\n    function latestTimestamp() public view returns (uint256) {\\n        // solhint-disable-next-line not-rely-on-time\\n        return block.timestamp - 100;\\n    }\\n\\n    function latestRound() external pure returns (uint256) {\\n        return 0;\\n    }\\n\\n    function getAnswer(uint256 roundId) external view returns (int256) {\\n        require(roundId == 0, \\\"No data present\\\");\\n        return latestAnswer();\\n    }\\n\\n    function getTimestamp(uint256 roundId) external view returns (uint256) {\\n        require(roundId == 0, \\\"No data present\\\");\\n        return latestTimestamp();\\n    }\\n\\n    function getAverageAccruedAPYBetweenTimestamps(\\n        address, /* asset */\\n        address, /* underlyingAsset */\\n        uint256, /* startTimestamp */\\n        uint256 /* endTimestamp */\\n    ) external view returns (int256) {\\n        return _answer;\\n    }\\n}\\n\",\"keccak256\":\"0x03956443e7e9b6289f84d279bb43859ef7a63cea991e23cba5e12908c5f2768d\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x6101406040526002805460ff60a01b1916600160a01b17905577666666666666666600000000000000003333333333333333600355600480546001600160801b0319166780000000000000001790553480156200005b57600080fd5b5060405162006090380380620060908339810160408190526200007e91620001a7565b604080518082018252601881527f495253204c696d6974204f726465722050726f746f636f6c000000000000000060208083019182528351808501855260018152603160f81b81830152835190922060e08190527fc89efdaa54c0f20c7adf612882df0950f5a951637e0307cdcb4c672f298b8bc66101008190524660a081815287517f8b73c3c69bb8fe3d512ecc4cf759cc79239f7b179b0ffacaa9a75d522b39400f818701819052818a0186905260608201859052608082019390935230818301528851808203909201825260c0019097528651969093019590952086959192906080523060c05261012052505060018054336001600160a01b031991821617909155600280549091166001600160a01b03949094169390931790925550620001d9915050565b600060208284031215620001ba57600080fd5b81516001600160a01b0381168114620001d257600080fd5b9392505050565b60805160a05160c05160e0516101005161012051615e67620002296000396000613cde01526000613d2d01526000613d0801526000613c6101526000613c8b01526000613cb50152615e676000f3fe608060405234801561001057600080fd5b50600436106103625760003560e01c806384ebaa62116101c8578063b890687e11610104578063d9c2427d116100a2578063e61333011161007c578063e61333011461086d578063f4a215c314610880578063f6bc2eee14610893578063fde6f721146108a657600080fd5b8063d9c2427d14610824578063de8925bf14610837578063e0feb2291461085a57600080fd5b8063c05435f1116100de578063c05435f1146107b9578063c53a0292146107cc578063cd6269ea146107d4578063cf6fc6e3146107f757600080fd5b8063b890687e14610768578063bc1ed74c14610793578063bf15fcd8146107a657600080fd5b80639343586511610171578063a24276641161014b578063a24276641461039a578063ada1a1ef1461071d578063b311f62f14610730578063b3bab08b1461074357600080fd5b806393435865146106ea578063952f04e8146106f7578063961d5b1e1461070a57600080fd5b80638da5cb5b116101a25780638da5cb5b146106995780638dd387e9146106c45780639296489f146106d757600080fd5b806384ebaa6214610648578063871919d5146106735780638bc4efcb1461068657600080fd5b80633ba4fbd4116102a257806370ae92d211610240578063792fb31f1161021a578063792fb31f146105ef5780637e54f092146106025780637f29a59d1461062257806381c234d31461063557600080fd5b806370ae92d21461059457806372c244a8146105b457806377421b9e146105c757600080fd5b80634ff1c7e41161027c5780634ff1c7e41461053357806354dd5f741461054757806363592c2b1461056e5780636b0406e41461058157600080fd5b80633ba4fbd4146104da57806343db200c146104fd5780634b9326211461052057600080fd5b8063296637bf1161030f57806332565d61116102e957806332565d6114610481578063331f9d1b14610494578063332f665b146104a75780633644e515146104d257600080fd5b8063296637bf1461042e5780632a732efe14610441578063303081ab1461045457600080fd5b8063148254c111610340578063148254c1146103d05780631b2ea8cb146104065780631dd6179e1461041b57600080fd5b80630154a04a14610367578063025550f21461039a578063057702e9146103ad575b600080fd5b610387610375366004614f00565b600b6020526000908152604090205481565b6040519081526020015b60405180910390f35b6103876103a836600461522b565b6108b3565b6103c06103bb366004615286565b6108d5565b6040519015158152602001610391565b6103f36103de3660046152df565b600e60205260009081526040902054600f0b81565b604051600f9190910b8152602001610391565b6104196104143660046152fc565b6109a2565b005b61038761042936600461534e565b610e50565b61038761043c366004615383565b610f66565b6103c061044f36600461534e565b610f7d565b6104676104623660046153af565b611027565b60408051600f93840b81529190920b602082015201610391565b6103c061048f366004615286565b6110f0565b6103876104a23660046153f5565b6111b8565b6103876104b5366004615446565b600860209081526000928352604080842090915290825290205481565b6103876114b0565b6103f36104e83660046152df565b600d60205260009081526040902054600f0b81565b6103c061050b366004614f00565b600a6020526000908152604090205460ff1681565b61041961052e36600461534e565b6114bf565b6003546103f390600160801b9004600f0b81565b6103877ff7c7de5fedfe85698b956b3fa411f92d1336fc4610e845ed658bbdd19973db0c81565b6103c061057c366004614f00565b421090565b61041961058f36600461546b565b6115da565b6103876105a23660046152df565b60006020819052908152604090205481565b6104196105c2366004615499565b611667565b6105da6105d53660046154fe565b6116d4565b60408051928352602083019190915201610391565b6105da6105fd3660046154fe565b6116f4565b610387610610366004614f00565b60009081526005602052604090205490565b6104196106303660046155c6565b612195565b610419610643366004615632565b6123b5565b610387610656366004615446565b600960209081526000928352604080842090915290825290205481565b6103c0610681366004615286565b612428565b61041961069436600461546b565b6124f0565b6001546106ac906001600160a01b031681565b6040516001600160a01b039091168152602001610391565b6104196106d2366004615632565b61257d565b6105da6106e536600461564f565b6125f3565b6003546103f390600f0b81565b61041961070536600461546b565b612689565b6103c06107183660046155c6565b612716565b61041961072b366004615632565b6128d3565b61041961073e36600461546b565b612949565b6103f36107513660046152df565b600f60208190526000918252604090912054900b81565b610387610776366004615446565b600760209081526000928352604080842090915290825290205481565b6103876107a1366004614f00565b6129d6565b6103876107b4366004615700565b612a3c565b6103876107c7366004615750565b612ab5565b610419612bca565b6103f36107e23660046152df565b600c60205260009081526040902054600f0b81565b6103c0610805366004615785565b6001600160a01b03919091166000908152602081905260409020541490565b6104196108323660046157b1565b612bd6565b6103f36108453660046152df565b601060205260009081526040902054600f0b81565b6103876108683660046152fc565b612e37565b6103c061087b3660046155c6565b6131fa565b61038761088e366004615383565b613391565b6104196108a136600461546b565b6133b5565b6004546103f390600f0b81565b60006108cb8484846801000000000000000080613442565b90505b9392505050565b60008061092b836040518060400160405280600681526020017f50483a2067740000000000000000000000000000000000000000000000000000815250866001600160a01b03166138419092919063ffffffff16565b905080516020146109835760405162461bcd60e51b815260206004820152601760248201527f50483a20696e76616c69642063616c6c20726573756c7400000000000000000060448201526064015b60405180910390fd5b8481806020019051810190610998919061580b565b1195945050505050565b600254600160a01b900460ff166109ef5760405162461bcd60e51b81526020600482015260116024820152704c4f503a204c6f636b656420737461746560781b604482015260640161097a565b6002805460ff60a01b19169055610140820151421115610a465760405162461bcd60e51b81526020600482015260126024820152711313d40e8813dc99195c881b585d1d5c995960721b604482015260640161097a565b6000610a5183610e50565b6000818152600a602052604090205490915060ff1615610ab35760405162461bcd60e51b815260206004820152601760248201527f4c4f503a204f726465722069732064656661756c746564000000000000000000604482015260640161097a565b60008181526007602090815260408083206001600160a01b0386168085529083528184205485855260088452828520828652845282852054868652600985528386209286529190935292205490919080610b4f5760405162461bcd60e51b815260206004820152601760248201527f4c4f503a204d617267696e2063616e6e6f742062652030000000000000000000604482015260640161097a565b6000610b5c8786886108b3565b9050808210610bad5760405162461bcd60e51b815260206004820152601960248201527f4c4f503a204d617267696e2069732073756666696369656e7400000000000000604482015260640161097a565b60006001600160a01b0387163314610bd257600354610bcf90600f0b84613934565b90505b6000610bde828561583a565b905060006001600160a01b0389163314610c1057600354610c0990600160801b9004600f0b83613934565b9050610c23565b600454610c2090600f0b83613934565b90505b600081831115610c3a57610c37828461583a565b90505b8a606001516001600160a01b03168a6001600160a01b03161415610cd25760608b015160008a81526007602090815260408083206001600160a01b039094168084529382528083208390558c83526008825280832084845282528083208390558c8352600982528083209383529281528282208290558b8252600a8152828220805460ff19166001179055600b905220829055610d37565b60008981526007602090815260408083206001600160a01b038e168085529083528184208490558c84526008835281842081855283528184208490558c845260098352818420908452909152812055610d2c8b8a8a613a5a565b610d378b8a89613a9a565b60408b015160608c01518515610da15760405133602482015260448101879052610da190839063a9059cbb60e01b906064015b60408051601f198184030181529190526020810180516001600160e01b03166001600160e01b031990931692909217909152613ad0565b806001600160a01b03168c6001600160a01b031614158015610dc35750600084115b15610df8576040516001600160a01b038216602482015260448101859052610df890839063a9059cbb60e01b90606401610d6a565b8215610e2e576040516001600160a01b038d16602482015260448101849052610e2e90839063a9059cbb60e01b90606401610d6a565b50506002805460ff60a01b1916600160a01b1790555050505050505050505050565b6040805161018081018252600080825260208201819052918101829052606081018290526080810182905260a0810182905260c0810182905260e0810182905261010081018290526101208101829052610140810182905261016081018290528290506108ce7ff7c7de5fedfe85698b956b3fa411f92d1336fc4610e845ed658bbdd19973db0c8285610180015180519060200120866101a0015180519060200120876101c0015180519060200120886101e0015180519060200120896102000151805190602001208a6102200151805190602001208b610240015180519060200120604051602001610f4b99989796959493929190615851565b60405160208183030381529060405280519060200120613b95565b600083610f73848461596e565b6108cb919061598d565b61020081015160408051808201909152601a81527f4c4f503a207072656469636174652063616c6c206661696c656400000000000060208201526000918291610fc7913091613841565b9050805160201461101a5760405162461bcd60e51b815260206004820152601d60248201527f4c4f503a20696e76616c6964207072656469636174652072657475726e000000604482015260640161097a565b60208101516001146108ce565b6002546040517f919726bf0000000000000000000000000000000000000000000000000000000081526001600160a01b0391821660048201528582166024820152908416604482015260648101839052608481018290526000908190736ee892B6DA8de66C83Ad69DD203050CF14ebAfeb9063919726bf9060a4016040805180830381865af41580156110be573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906110e291906159af565b915091505b94509492505050565b600080611146836040518060400160405280600681526020017f50483a2065710000000000000000000000000000000000000000000000000000815250866001600160a01b03166138419092919063ffffffff16565b905080516020146111995760405162461bcd60e51b815260206004820152601760248201527f50483a20696e76616c69642063616c6c20726573756c74000000000000000000604482015260640161097a565b84818060200190518101906111ae919061580b565b1495945050505050565b6000846001600160a01b031663313ce5676040518163ffffffff1660e01b8152600401602060405180830381865afa1580156111f8573d6000803e3d6000fd5b505050506040513d602081101561120e57600080fd5b5051604080517f313ce567000000000000000000000000000000000000000000000000000000008152905160ff909216916001600160a01b0389169163313ce5679160048083019260209291908290030181865afa158015611274573d6000803e3d6000fd5b505050506040513d602081101561128a57600080fd5b505160ff16146112e1576040805162461bcd60e51b815260206004820152601f60248201527f43433a206f7261636c6520646563696d616c7320646f6e2774206d6174636800604482015290519081900360640190fd5b6000866001600160a01b031663feaf968c6040518163ffffffff1660e01b815260040160a060405180830381865afa158015611321573d6000803e3d6000fd5b505050506040513d60a081101561133757600080fd5b5060200151604080517ffeaf968c00000000000000000000000000000000000000000000000000000000815290519192506000916001600160a01b0389169163feaf968c9160048083019260a09291908290030181865afa1580156113a0573d6000803e3d6000fd5b505050506040513d60a08110156113b657600080fd5b50602001519050600085131561142c57633b9aca006113d482613bfe565b6113dd87613bfe565b6113e890600a615ac2565b6113f185613bfe565b6113fb8a8961596e565b611405919061596e565b61140f919061596e565b611419919061598d565b611423919061598d565b925050506114a7565b60008512156114865761144661144186615ace565b613bfe565b61145190600a615ac2565b633b9aca0061145f83613bfe565b61146885613bfe565b6114728a8961596e565b61147c919061596e565b61140f919061598d565b633b9aca0061149482613bfe565b61149d84613bfe565b611405898861596e565b95945050505050565b60006114ba613c54565b905090565b60608101516001600160a01b0316331461151b5760405162461bcd60e51b815260206004820152601260248201527f4c4f503a204163636573732064656e6965640000000000000000000000000000604482015260640161097a565b600061152682610e50565b60008181526005602052604090205490915060018114156115895760405162461bcd60e51b815260206004820152601360248201527f4c4f503a20616c72656164792066696c6c656400000000000000000000000000604482015260640161097a565b604080518381526020810183905233917fcbfa7d191838ece7ba4783ca3a30afd316619b7f368094b57ee7ffde9a923db1910160405180910390a25060009081526005602052604090206001905550565b6001546001600160a01b0316331461162e5760405162461bcd60e51b81526020600482015260176024820152761313d40e8813db9b1e481bdddb995c88185b1b1bddd959604a1b604482015260640161097a565b6001600160a01b0391909116600090815260106020526040902080546001600160801b0319166001600160801b03909216919091179055565b336000908152602081905260408120546116859060ff841690615aeb565b33600081815260208181526040918290208490558151848152915193945091927ffc69110dd11eb791755e4abd6b7d281bae236de95736d38a23782814be5e10db929181900390910190a25050565b6000806116e58888888888886116f4565b91509150965096945050505050565b6002546000908190600160a01b900460ff166117465760405162461bcd60e51b81526020600482015260116024820152704c4f503a204c6f636b656420737461746560781b604482015260640161097a565b6002805460ff60a01b1916905560608801516001600160a01b03163314156117b05760405162461bcd60e51b815260206004820152601960248201527f4c4f503a2073616d65206d616b657220616e642074616b657200000000000000604482015260640161097a565b8761014001514211156118055760405162461bcd60e51b815260206004820152601a60248201527f4c4f503a204f7264657220616c7265616479206d617475726564000000000000604482015260640161097a565b600061181089610e50565b6000818152600a602052604090205490915060ff16156118725760405162461bcd60e51b815260206004820152601460248201527f4c4f503a204f726465722064656661756c746564000000000000000000000000604482015260640161097a565b6000818152600960209081526040808320338452909152902054156118d95760405162461bcd60e51b815260206004820152601c60248201527f4c4f503a2053656e6465722069732061207061727469636970616e7400000000604482015260640161097a565b604080516080810182526060808c01516001600160a01b0390811683526020808e01518216818501528d850151909116838501526101008d0151151591830191909152600084815260059091529190912054600181141561197c5760405162461bcd60e51b815260206004820152601a60248201527f4c4f503a2072656d61696e696e6720616d6f756e742069732030000000000000604482015260640161097a565b60a08b01516001600160a01b031615806119a2575060a08b01516001600160a01b031633145b6119ee5760405162461bcd60e51b815260206004820152601260248201527f4c4f503a2070726976617465206f726465720000000000000000000000000000604482015260640161097a565b80611b3f57611a388b60600151848c8c8080601f016020809104026020016040519081016040528093929190818152602001838380828437600092019190915250613d7b92505050565b611a845760405162461bcd60e51b815260206004820152601260248201527f4c4f503a20626164207369676e61747572650000000000000000000000000000604482015260640161097a565b8a610100015115611a9a575060e08a0151611aa1565b5060c08a01515b60148b61022001515110611b3a57600080611acd8d610220015160148101805191516013190181529091565b91509150611adb8282613ee0565b60008581526005602052604090205415611b375760405162461bcd60e51b815260206004820152601860248201527f4c4f503a207265656e7472616e63792064657465637465640000000000000000604482015260640161097a565b50505b611b44565b600019015b6102008b01515115611ba557611b598b610f7d565b611ba55760405162461bcd60e51b815260206004820152601d60248201527f4c4f503a207072656469636174652072657475726e65642066616c7365000000604482015260640161097a565b871587151415611bf75760405162461bcd60e51b815260206004820181905260248201527f4c4f503a206f6e6c79206f6e6520616d6f756e742073686f756c642062652030604482015260640161097a565b87611d41576101008b0151879015611c975781881115611c15578197505b611c2e8c6101c001518d60e001518e60c001518b61419a565b9850611c3a888861596e565b611c44828b61596e565b1115611c925760405162461bcd60e51b815260206004820152601f60248201527f4c4f503a20546f6b656e73206c657373207468616e207468726573686f6c6400604482015260640161097a565b611d3b565b611cb08c6101e001518d60e001518e60c001518b61419a565b985081891115611cd957819850611cd68c6101c001518d60c001518e60e001518c61419a565b97505b611ce3888861596e565b611ced828b61596e565b1015611d3b5760405162461bcd60e51b815260206004820152601f60248201527f4c4f503a20546f6b656e73206c657373207468616e207468726573686f6c6400604482015260640161097a565b50611e82565b6101008b0151889015611df757611d678c6101e001518d60c001518e60e001518c61419a565b975081881115611d9057819750611d8d8c6101c001518d60e001518e60c001518b61419a565b98505b611d9a898861596e565b611da4828a61596e565b1015611df25760405162461bcd60e51b815260206004820152601f60248201527f4c4f503a20546f6b656e73206c657373207468616e207468726573686f6c6400604482015260640161097a565b611e80565b81891115611e03578198505b611e1c8c6101c001518d60c001518e60e001518c61419a565b9750611e28898861596e565b611e32828a61596e565b1115611e805760405162461bcd60e51b815260206004820152601f60248201527f4c4f503a20546f6b656e73206c657373207468616e207468726573686f6c6400604482015260640161097a565b505b600088118015611e925750600087115b611ede5760405162461bcd60e51b815260206004820152601860248201527f4c4f503a2063616e27742073776170203020616d6f756e740000000000000000604482015260640161097a565b8a610100015115611ef157869003611ef5565b8790035b6000838152600560209081526040808320600185810190915560068352928190208054909301909255815185815290810183905233917fb9ed0243fdf00f0545c63a0af8850c090d86bb46682baec4bf3c496814fe4f02910160405180910390a250600082815260076020818152604080842060608f0180516001600160a01b03908116875282855283872054898852958552815181168752828552838720958e019095558786526008808552838720825187168852808652848820548a895291865282519096168752858552838720908d0190553386529083528185208c905592909152822088905551611fed908c9085906108b3565b90506000611ffc8c85336108b3565b9050600061200d84604001516142b6565b60408581015190516323b872dd60e01b602082015233602482015230604482015260648101859052919250612054916084015b604051602081830303815290604052613ad0565b61206184604001516142b6565b61206b8383615aeb565b11156120b95760405162461bcd60e51b815260206004820152601660248201527f4c4f503a204d617267696e206e6f7420656e6f75676800000000000000000000604482015260640161097a565b6120c684604001516142b6565b604085810151865191516323b872dd60e01b60208201526001600160a01b0390921660248301523060448301526064820186905291925061210a9190608401612040565b61211784604001516142b6565b6121218483615aeb565b111561216f5760405162461bcd60e51b815260206004820152601660248201527f4c4f503a204d617267696e206e6f7420656e6f75676800000000000000000000604482015260640161097a565b50506002805460ff60a01b1916600160a01b179055509599949850939650505050505050565b8281146121e45760405162461bcd60e51b815260206004820152601860248201527f4c4f503a2061727261792073697a65206d69736d617463680000000000000000604482015260640161097a565b60008367ffffffffffffffff8111156121ff576121ff614f19565b6040519080825280601f01601f191660200182016040528015612229576020820181803683370190505b50905060005b8481101561237d5760008087878481811061224c5761224c615b03565b905060200201602081019061226191906152df565b6001600160a01b031686868581811061227c5761227c615b03565b905060200281019061228e9190615b19565b60405161229c929190615b60565b6000604051808303816000865af19150503d80600081146122d9576040519150601f19603f3d011682016040523d82523d6000602084013e6122de565b606091505b50915091508180156122f1575060008151115b1561230e578051602014801561230b575060208101516001145b91505b8161231d57600360fc1b61233f565b7f31000000000000000000000000000000000000000000000000000000000000005b84848151811061235157612351615b03565b60200101906001600160f81b031916908160001a9053505050808061237590615b70565b91505061222f565b508060405160200161238f9190615bb7565b60408051601f198184030181529082905262461bcd60e51b825261097a91600401615c28565b6001546001600160a01b031633146124095760405162461bcd60e51b81526020600482015260176024820152761313d40e8813db9b1e481bdddb995c88185b1b1bddd959604a1b604482015260640161097a565b600380546001600160801b03928316600160801b029216919091179055565b60008061247e836040518060400160405280600681526020017f50483a206c740000000000000000000000000000000000000000000000000000815250866001600160a01b03166138419092919063ffffffff16565b905080516020146124d15760405162461bcd60e51b815260206004820152601760248201527f50483a20696e76616c69642063616c6c20726573756c74000000000000000000604482015260640161097a565b84818060200190518101906124e6919061580b565b1095945050505050565b6001546001600160a01b031633146125445760405162461bcd60e51b81526020600482015260176024820152761313d40e8813db9b1e481bdddb995c88185b1b1bddd959604a1b604482015260640161097a565b6001600160a01b03919091166000908152600c6020526040902080546001600160801b0319166001600160801b03909216919091179055565b6001546001600160a01b031633146125d15760405162461bcd60e51b81526020600482015260176024820152761313d40e8813db9b1e481bdddb995c88185b1b1bddd959604a1b604482015260640161097a565b600380546001600160801b0319166001600160801b0392909216919091179055565b60008060148310156126475760405162461bcd60e51b815260206004820152601a60248201527f4c4f503a207065726d6974206c656e67746820746f6f206c6f77000000000000604482015260640161097a565b6000366000612656878761437f565b9250925092506126678383836143a8565b6126758d8d8d8d8d8d6116f4565b945094505050509850989650505050505050565b6001546001600160a01b031633146126dd5760405162461bcd60e51b81526020600482015260176024820152761313d40e8813db9b1e481bdddb995c88185b1b1bddd959604a1b604482015260640161097a565b6001600160a01b03919091166000908152600e6020526040902080546001600160801b0319166001600160801b03909216919091179055565b60008382146127675760405162461bcd60e51b815260206004820152601d60248201527f50483a20696e7075742061727261792073697a65206d69736d61746368000000604482015260640161097a565b60005b848110156128c557600061283c85858481811061278957612789615b03565b905060200281019061279b9190615b19565b8080601f0160208091040260200160405190810160405280939291908181526020018383808284376000920191909152505060408051808201909152601881527f50483a2027616e64272073756263616c6c206661696c65640000000000000000602082015291508a9050898681811061281757612817615b03565b905060200201602081019061282c91906152df565b6001600160a01b03169190613841565b9050805160201461288f5760405162461bcd60e51b815260206004820152601760248201527f50483a20696e76616c69642063616c6c20726573756c74000000000000000000604482015260640161097a565b808060200190518101906128a39190615c3b565b6128b2576000925050506128cb565b50806128bd81615b70565b91505061276a565b50600190505b949350505050565b6001546001600160a01b031633146129275760405162461bcd60e51b81526020600482015260176024820152761313d40e8813db9b1e481bdddb995c88185b1b1bddd959604a1b604482015260640161097a565b600480546001600160801b0319166001600160801b0392909216919091179055565b6001546001600160a01b0316331461299d5760405162461bcd60e51b81526020600482015260176024820152761313d40e8813db9b1e481bdddb995c88185b1b1bddd959604a1b604482015260640161097a565b6001600160a01b03919091166000908152600d6020526040902080546001600160801b0319166001600160801b03909216919091179055565b60008181526005602052604081205480612a325760405162461bcd60e51b815260206004820152601260248201527f4c4f503a20556e6b6e6f776e206f726465720000000000000000000000000000604482015260640161097a565b6000190192915050565b600080612a92836040518060400160405280601781526020017f41433a2061726269747261727953746174696343616c6c000000000000000000815250866001600160a01b03166138419092919063ffffffff16565b9050808060200190516020811015612aa957600080fd5b50519150505b92915050565b600080846001600160a01b031663feaf968c6040518163ffffffff1660e01b815260040160a060405180830381865afa158015612af6573d6000803e3d6000fd5b505050506040513d60a0811015612b0c57600080fd5b50602001519050600160ff1b8416158015907f7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff861690612b9b57633b9aca00612b5484613bfe565b612b5f90606461596e565b82612b73886801000000000000000061596e565b612b7d919061596e565b612b87919061598d565b612b91919061598d565b93505050506108ce565b633b9aca00680100000000000000008287612bb587613bfe565b612bc090606461596e565b612b73919061596e565b612bd46001611667565b565b60008111612c265760405162461bcd60e51b815260206004820152601060248201527f4c4f503a207a65726f20616d6f756e7400000000000000000000000000000000604482015260640161097a565b826101400151421115612c705760405162461bcd60e51b81526020600482015260126024820152711313d40e8813dc99195c881b585d1d5c995960721b604482015260640161097a565b6000612c7b84610e50565b6000818152600a602052604090205490915060ff1615612cdd5760405162461bcd60e51b815260206004820152601760248201527f4c4f503a204f726465722069732064656661756c746564000000000000000000604482015260640161097a565b60008181526009602090815260408083206001600160a01b0387168452909152902054612d4c5760405162461bcd60e51b815260206004820152601760248201527f4c4f503a204e6f206d617267696e2070726f7669646564000000000000000000604482015260640161097a565b60008181526009602090815260408083206001600160a01b038716845290915281208054849290612d7e908490615aeb565b925050819055506000612d9485604001516142b6565b60408681015190516323b872dd60e01b602082015233602482015230604482015260648101869052919250612dcb91608401612040565b612dd885604001516142b6565b612de28483615aeb565b1115612e305760405162461bcd60e51b815260206004820152601660248201527f4c4f503a204d617267696e206e6f7420656e6f75676800000000000000000000604482015260640161097a565b5050505050565b600254600090600160a01b900460ff16612e875760405162461bcd60e51b81526020600482015260116024820152704c4f503a204c6f636b656420737461746560781b604482015260640161097a565b6002805460ff60a01b191690556000612e9f84610e50565b9050836101400151421180612ec257506000818152600a602052604090205460ff165b612f0e5760405162461bcd60e51b815260206004820152601a60248201527f4c4f503a204f7264657220796574206e6f74206d617475726564000000000000604482015260640161097a565b60008181526007602090815260408083206001600160a01b0387168085529083528184205485855260088452828520828652845282852054868652600985528386209286529190935292205490919080612faa5760405162461bcd60e51b815260206004820152601760248201527f4c4f503a204e6f206d617267696e2070726f7669646564000000000000000000604482015260640161097a565b6000612fca886020015189604001518a61012001518b6101400151611027565b509050836000612fda8386613934565b612fe590606461596e565b6101608b01516000898152600a6020526040812054929350909160ff161561303f57600089815260066020908152604080832054600b90925282205461302b919061598d565b90506130378188615aeb565b915050613154565b60008c6101000151801561306857508c606001516001600160a01b03168c6001600160a01b0316145b15613071575060015b8c610100015115801561309a57508c606001516001600160a01b03168c6001600160a01b031614155b156130a3575060015b6040517fefe540590000000000000000000000000000000000000000000000000000000081526004810186905260248101859052604481018890528115156064820152600f84900b6084820152736ee892B6DA8de66C83Ad69DD203050CF14ebAfeb9063efe540599060a401602060405180830381865af415801561312c573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190613150919061580b565b9150505b60008981526007602090815260408083206001600160a01b038f168085529083528184208490558c84526008835281842081855283528184208490558c8452600983528184209084529091528120556040808d015190516001600160a01b038d166024820152604481018390526131d7919063a9059cbb60e01b90606401610d6a565b985050505050505050506002805460ff60a01b1916600160a01b17905592915050565b600083821461324b5760405162461bcd60e51b815260206004820152601d60248201527f50483a20696e7075742061727261792073697a65206d69736d61746368000000604482015260640161097a565b60005b848110156133855760006132fb85858481811061326d5761326d615b03565b905060200281019061327f9190615b19565b8080601f0160208091040260200160405190810160405280939291908181526020018383808284376000920191909152505060408051808201909152601781527f50483a20276f72272073756263616c6c206661696c6564000000000000000000602082015291508a9050898681811061281757612817615b03565b9050805160201461334e5760405162461bcd60e51b815260206004820152601760248201527f50483a20696e76616c69642063616c6c20726573756c74000000000000000000604482015260640161097a565b808060200190518101906133629190615c3b565b15613372576001925050506128cb565b508061337d81615b70565b91505061324e565b50600095945050505050565b6000826001816133a1878661596e565b6133ab9190615aeb565b610f73919061583a565b6001546001600160a01b031633146134095760405162461bcd60e51b81526020600482015260176024820152761313d40e8813db9b1e481bdddb995c88185b1b1bddd959604a1b604482015260640161097a565b6001600160a01b03919091166000908152600f6020526040902080546001600160801b0319166001600160801b03909216919091179055565b600042866101400151101561348e5760405162461bcd60e51b81526020600482015260126024820152711313d40e8813dc99195c881b585d1d5c995960721b604482015260640161097a565b6000858152600a602052604090205460ff16156134ed5760405162461bcd60e51b815260206004820152601460248201527f4c4f503a204f726465722064656661756c746564000000000000000000000000604482015260640161097a565b60008661010001518015613516575086606001516001600160a01b0316856001600160a01b0316145b1561351f575060015b866101000151158015613548575086606001516001600160a01b0316856001600160a01b031614155b15613551575060015b600060405180610100016040528088815260200189610120015181526020018961014001518152602001600a60008a815260200190815260200160002060009054906101000a900460ff1615158152602001896101600151600f0b8152602001600760008a81526020019081526020016000206000896001600160a01b03166001600160a01b03168152602001908152602001600020548152602001600860008a81526020019081526020016000206000896001600160a01b03166001600160a01b03168152602001908152602001600020548152602001831515815250905060006040518060e001604052808a602001516001600160a01b031681526020018a604001516001600160a01b03168152602001600c60008c602001516001600160a01b03166001600160a01b0316815260200190815260200160002060009054906101000a9004600f0b600f0b8152602001600d60008c602001516001600160a01b03166001600160a01b0316815260200190815260200160002060009054906101000a9004600f0b600f0b8152602001600e60008c602001516001600160a01b03166001600160a01b0316815260200190815260200160002060009054906101000a9004600f0b600f0b8152602001600f60008c602001516001600160a01b03166001600160a01b0316815260200190815260200160002060009054906101000a9004600f0b600f0b8152602001601060008c602001516001600160a01b03166001600160a01b0316815260200190815260200160002060009054906101000a9004600f0b600f0b8152509050736ee892B6DA8de66C83Ad69DD203050CF14ebAfeb63cc160f76600260009054906101000a90046001600160a01b031684848a8a6040518663ffffffff1660e01b81526004016137f3959493929190615c58565b602060405180830381865af4158015613810573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190613834919061580b565b9998505050505050505050565b60606001600160a01b0384163b6138bf5760405162461bcd60e51b8152602060048201526024808201527f416464726573733a207374617469632063616c6c20746f206e6f6e2d636f6e7460448201527f7261637400000000000000000000000000000000000000000000000000000000606482015260840161097a565b600080856001600160a01b0316856040516138da9190615d4b565b600060405180830381855afa9150503d8060008114613915576040519150601f19603f3d011682016040523d82523d6000602084013e61391a565b606091505b509150915061392a828286614594565b9695505050505050565b60008161394357506000612aaf565b600083600f0b12156139975760405162461bcd60e51b815260206004820152600e60248201527f4c4f503a20556e646572666c6f77000000000000000000000000000000000000604482015260640161097a565b600f83900b6001600160801b038316810260401c90608084901c0277ffffffffffffffffffffffffffffffffffffffffffffffff811115613a0a5760405162461bcd60e51b815260206004820152600d60248201526c4c4f503a204f766572666c6f7760981b604482015260640161097a565b60401b8119811115613a4e5760405162461bcd60e51b815260206004820152600d60248201526c4c4f503a204f766572666c6f7760981b604482015260640161097a565b019392505050565b5050565b600082815260076020908152604080832060608701516001600160a01b0316845290915281208054839290613a9090849061583a565b9091555050505050565b600082815260086020908152604080832060608701516001600160a01b0316845290915281208054839290613a9090849061583a565b6000613b25826040518060400160405280601681526020017f4c4f503a2061737365742e63616c6c206661696c656400000000000000000000815250856001600160a01b03166145cd9092919063ffffffff16565b805190915015613b905780516020148015613b44575060208101516001145b613b905760405162461bcd60e51b815260206004820152601a60248201527f4c4f503a2061737365742e63616c6c2062616420726573756c74000000000000604482015260640161097a565b505050565b6000612aaf613ba2613c54565b836040517f19010000000000000000000000000000000000000000000000000000000000006020820152602281018390526042810182905260009060620160405160208183030381529060405280519060200120905092915050565b600080821215613c505760405162461bcd60e51b815260206004820181905260248201527f53616665436173743a2076616c7565206d75737420626520706f736974697665604482015260640161097a565b5090565b6000306001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016148015613cad57507f000000000000000000000000000000000000000000000000000000000000000046145b15613cd757507f000000000000000000000000000000000000000000000000000000000000000090565b50604080517f00000000000000000000000000000000000000000000000000000000000000006020808301919091527f0000000000000000000000000000000000000000000000000000000000000000828401527f000000000000000000000000000000000000000000000000000000000000000060608301524660808301523060a0808401919091528351808403909101815260c0909201909252805191012090565b6000806000613d8a85856145dc565b90925090506000816004811115613da357613da3615d67565b148015613dc15750856001600160a01b0316826001600160a01b0316145b15613dd1576001925050506108ce565b600080876001600160a01b0316631626ba7e60e01b8888604051602401613df9929190615d7d565b60408051601f198184030181529181526020820180516001600160e01b03166001600160e01b0319909416939093179092529051613e379190615d4b565b600060405180830381855afa9150503d8060008114613e72576040519150601f19603f3d011682016040523d82523d6000602084013e613e77565b606091505b5091509150818015613e8a575080516020145b8015613ed4575080517f1626ba7e0000000000000000000000000000000000000000000000000000000090613ec89083016020908101908401615d96565b6001600160e01b031916145b98975050505050505050565b805115613a565760006060825160e0141561402057836001600160a01b031663d505accf60e01b8460405160200180836001600160e01b031916815260040182805190602001908083835b60208310613f4a5780518252601f199092019160209182019101613f2b565b6001836020036101000a038019825116818451168082178552505050505050905001925050506040516020818303038152906040526040518082805190602001908083835b60208310613fae5780518252601f199092019160209182019101613f8f565b6001836020036101000a0380198251168184511680821785525050505050509050019150506000604051808303816000865af19150503d8060008114614010576040519150601f19603f3d011682016040523d82523d6000602084013e614015565b606091505b5090925090506140cc565b8251610100141561407f57836001600160a01b0316638fcbaf0c60e01b8460405160200180836001600160e01b0319168152600401828051906020019080838360208310613f4a5780518252601f199092019160209182019101613f2b565b6040805162461bcd60e51b815260206004820152601360248201527f57726f6e67207065726d6974206c656e67746800000000000000000000000000604482015290519081900360640190fd5b8161419457614110816040518060400160405280600f81526020017f5065726d6974206661696c65643a20000000000000000000000000000000000081525061464c565b60405162461bcd60e51b81526004018080602001828103825283818151815260200191508051906020019080838360005b83811015614159578181015183820152602001614141565b50505050905090810190601f1680156141865780820380516001836020036101000a031916815260200191505b509250505060405180910390fd5b50505050565b60008451600014156141fc578382146141f55760405162461bcd60e51b815260206004820152601160248201527f4c4f503a2077726f6e6720616d6f756e74000000000000000000000000000000604482015260640161097a565b50816128cb565b60006142588684604051602001614214929190615dc0565b60408051601f19818403018152828201909152601a82527f4c4f503a20676574416d6f756e742063616c6c206661696c656400000000000060208301523091613841565b905080516020146142ab5760405162461bcd60e51b815260206004820152601d60248201527f4c4f503a20696e76616c696420676574416d6f756e742072657475726e000000604482015260640161097a565b6020015190506128cb565b60408051306024808301919091528251808303909101815260449091019091526020810180516001600160e01b03167f70a08231000000000000000000000000000000000000000000000000000000001790526000908190614322906001600160a01b03851690614a08565b905080516020146143755760405162461bcd60e51b815260206004820152601860248201527f4c4f503a20696e76616c69642063616c6c20726573756c740000000000000000604482015260640161097a565b60208101516108ce565b60003681843560601c8282614397876014818b615de2565b939650945091925050509250925092565b8015613b90576000606060e08314156144ba576040517fd505accf00000000000000000000000000000000000000000000000000000000602082018181526001600160a01b03881692879187916024018383808284378083019250505093505050506040516020818303038152906040526040518082805190602001908083835b602083106144485780518252601f199092019160209182019101614429565b6001836020036101000a0380198251168184511680821785525050505050509050019150506000604051808303816000865af19150503d80600081146144aa576040519150601f19603f3d011682016040523d82523d6000602084013e6144af565b606091505b509092509050614550565b61010083141561407f576040517f8fcbaf0c00000000000000000000000000000000000000000000000000000000602082018181526001600160a01b0388169287918791602401838380828437808301925050509350505050604051602081830303815290604052604051808280519060200190808383602083106144485780518252601f199092019160209182019101614429565b81612e3057614110816040518060400160405280600f81526020017f5065726d6974206661696c65643a20000000000000000000000000000000000081525061464c565b606083156145a35750816108ce565b8251156145b35782518084602001fd5b8160405162461bcd60e51b815260040161097a9190615c28565b60606108cb8484600085614a2d565b6000808251604114156146135760208301516040840151606085015160001a61460787828585614b75565b94509450505050614645565b82516040141561463d5760208301516040840151614632868383614c5f565b935093505050614645565b506000905060025b9250929050565b606060048351106149125760208301516001600160e01b0319811662461bcd60e51b14801561467d57506044845110155b156147ee5760248481015180860182018051919290919061469f908490615aeb565b6146a99190615aeb565b865110156146fe576040805162461bcd60e51b815260206004820152601560248201527f496e76616c69642072657665727420726561736f6e0000000000000000000000604482015290519081900360640190fd5b84816040516020018083805190602001908083835b602083106147325780518252601f199092019160209182019101614713565b51815160209384036101000a60001901801990921691161790527f4572726f72280000000000000000000000000000000000000000000000000000919093019081528451600690910192850191508083835b602083106147a35780518252601f199092019160209182019101614784565b6001836020036101000a03801982511681845116808217855250505050505090500180602960f81b815250600101925050506040516020818303038152906040529350505050612aaf565b6001600160e01b03198116634e487b7160e01b14801561480f575083516024145b156149105760248401518361482382614cb1565b6040516020018083805190602001908083835b602083106148555780518252601f199092019160209182019101614836565b51815160209384036101000a60001901801990921691161790527f50616e6963280000000000000000000000000000000000000000000000000000919093019081528451600690910192850191508083835b602083106148c65780518252601f1990920191602091820191016148a7565b6001836020036101000a03801982511681845116808217855250505050505090500180602960f81b8152506001019250505060405160208183030381529060405292505050612aaf565b505b8161491c84614cd7565b6040516020018083805190602001908083835b6020831061494e5780518252601f19909201916020918201910161492f565b51815160209384036101000a60001901801990921691161790527f556e6b6e6f776e28000000000000000000000000000000000000000000000000919093019081528451600890910192850191508083835b602083106149bf5780518252601f1990920191602091820191016149a0565b6001836020036101000a03801982511681845116808217855250505050505090500180602960f81b81525060010192505050604051602081830303815290604052905092915050565b60606108ce8383604051806060016040528060258152602001615e0d60259139613841565b606082471015614aa55760405162461bcd60e51b815260206004820152602660248201527f416464726573733a20696e73756666696369656e742062616c616e636520666f60448201527f722063616c6c0000000000000000000000000000000000000000000000000000606482015260840161097a565b6001600160a01b0385163b614afc5760405162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e7472616374000000604482015260640161097a565b600080866001600160a01b03168587604051614b189190615d4b565b60006040518083038185875af1925050503d8060008114614b55576040519150601f19603f3d011682016040523d82523d6000602084013e614b5a565b606091505b5091509150614b6a828286614594565b979650505050505050565b6000807f7fffffffffffffffffffffffffffffff5d576e7357a4501ddfe92f46681b20a0831115614bac57506000905060036110e7565b8460ff16601b14158015614bc457508460ff16601c14155b15614bd557506000905060046110e7565b6040805160008082526020820180845289905260ff881692820192909252606081018690526080810185905260019060a0016020604051602081039080840390855afa158015614c29573d6000803e3d6000fd5b5050604051601f1901519150506001600160a01b038116614c52576000600192509250506110e7565b9660009650945050505050565b6000807f7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff831681614c9560ff86901c601b615aeb565b9050614ca387828885614b75565b935093505050935093915050565b6060612aaf82604051602001808281526020019150506040516020818303038152906040525b80516060907f303132333435363738396162636465660000000000000000000000000000000090600090614d0c90600261596e565b614d17906002615aeb565b67ffffffffffffffff811115614d2f57614d2f614f19565b6040519080825280601f01601f191660200182016040528015614d59576020820181803683370190505b509050600360fc1b81600081518110614d7457614d74615b03565b60200101906001600160f81b031916908160001a9053507f780000000000000000000000000000000000000000000000000000000000000081600181518110614dbf57614dbf615b03565b60200101906001600160f81b031916908160001a90535060005b8451811015614ef857826004868381518110614df757614df7615b03565b01602001517fff0000000000000000000000000000000000000000000000000000000000000016901c60f81c60108110614e3357614e33615b03565b1a60f81b82614e4383600261596e565b614e4e906002615aeb565b81518110614e5e57614e5e615b03565b60200101906001600160f81b031916908160001a90535082858281518110614e8857614e88615b03565b60209101015160f81c600f1660108110614ea457614ea4615b03565b1a60f81b82614eb483600261596e565b614ebf906003615aeb565b81518110614ecf57614ecf615b03565b60200101906001600160f81b031916908160001a90535080614ef081615b70565b915050614dd9565b509392505050565b600060208284031215614f1257600080fd5b5035919050565b634e487b7160e01b600052604160045260246000fd5b604051610260810167ffffffffffffffff81118282101715614f5357614f53614f19565b60405290565b6001600160a01b0381168114614f6e57600080fd5b50565b8035614f7c81614f59565b919050565b8015158114614f6e57600080fd5b8035614f7c81614f81565b80600f0b8114614f6e57600080fd5b8035614f7c81614f9a565b600082601f830112614fc557600080fd5b813567ffffffffffffffff80821115614fe057614fe0614f19565b604051601f8301601f19908116603f0116810190828211818310171561500857615008614f19565b8160405283815286602085880101111561502157600080fd5b836020870160208301376000602085830101528094505050505092915050565b6000610260828403121561505457600080fd5b61505c614f2f565b90508135815261506e60208301614f71565b602082015261507f60408301614f71565b604082015261509060608301614f71565b60608201526150a160808301614f71565b60808201526150b260a08301614f71565b60a082015260c082013560c082015260e082013560e08201526101006150d9818401614f8f565b9082015261012082810135908201526101408083013590820152610160615101818401614fa9565b908201526101808281013567ffffffffffffffff8082111561512257600080fd5b61512e86838701614fb4565b838501526101a092508285013591508082111561514a57600080fd5b61515686838701614fb4565b838501526101c092508285013591508082111561517257600080fd5b61517e86838701614fb4565b838501526101e092508285013591508082111561519a57600080fd5b6151a686838701614fb4565b838501526102009250828501359150808211156151c257600080fd5b6151ce86838701614fb4565b838501526102209250828501359150808211156151ea57600080fd5b6151f686838701614fb4565b8385015261024092508285013591508082111561521257600080fd5b5061521f85828601614fb4565b82840152505092915050565b60008060006060848603121561524057600080fd5b833567ffffffffffffffff81111561525757600080fd5b61526386828701615041565b93505060208401359150604084013561527b81614f59565b809150509250925092565b60008060006060848603121561529b57600080fd5b8335925060208401356152ad81614f59565b9150604084013567ffffffffffffffff8111156152c957600080fd5b6152d586828701614fb4565b9150509250925092565b6000602082840312156152f157600080fd5b81356108ce81614f59565b6000806040838503121561530f57600080fd5b823567ffffffffffffffff81111561532657600080fd5b61533285828601615041565b925050602083013561534381614f59565b809150509250929050565b60006020828403121561536057600080fd5b813567ffffffffffffffff81111561537757600080fd5b6128cb84828501615041565b60008060006060848603121561539857600080fd5b505081359360208301359350604090920135919050565b600080600080608085870312156153c557600080fd5b84356153d081614f59565b935060208501356153e081614f59565b93969395505050506040820135916060013590565b600080600080600060a0868803121561540d57600080fd5b853561541881614f59565b9450602086013561542881614f59565b94979496505050506040830135926060810135926080909101359150565b6000806040838503121561545957600080fd5b82359150602083013561534381614f59565b6000806040838503121561547e57600080fd5b823561548981614f59565b9150602083013561534381614f9a565b6000602082840312156154ab57600080fd5b813560ff811681146108ce57600080fd5b60008083601f8401126154ce57600080fd5b50813567ffffffffffffffff8111156154e657600080fd5b60208301915083602082850101111561464557600080fd5b60008060008060008060a0878903121561551757600080fd5b863567ffffffffffffffff8082111561552f57600080fd5b61553b8a838b01615041565b9750602089013591508082111561555157600080fd5b5061555e89828a016154bc565b979a90995096976040810135976060820135975060809091013595509350505050565b60008083601f84011261559357600080fd5b50813567ffffffffffffffff8111156155ab57600080fd5b6020830191508360208260051b850101111561464557600080fd5b600080600080604085870312156155dc57600080fd5b843567ffffffffffffffff808211156155f457600080fd5b61560088838901615581565b9096509450602087013591508082111561561957600080fd5b5061562687828801615581565b95989497509550505050565b60006020828403121561564457600080fd5b81356108ce81614f9a565b60008060008060008060008060c0898b03121561566b57600080fd5b883567ffffffffffffffff8082111561568357600080fd5b61568f8c838d01615041565b995060208b01359150808211156156a557600080fd5b6156b18c838d016154bc565b909950975060408b0135965060608b0135955060808b0135945060a08b01359150808211156156df57600080fd5b506156ec8b828c016154bc565b999c989b5096995094979396929594505050565b6000806040838503121561571357600080fd5b823561571e81614f59565b9150602083013567ffffffffffffffff81111561573a57600080fd5b61574685828601614fb4565b9150509250929050565b60008060006060848603121561576557600080fd5b833561577081614f59565b95602085013595506040909401359392505050565b6000806040838503121561579857600080fd5b82356157a381614f59565b946020939093013593505050565b6000806000606084860312156157c657600080fd5b833567ffffffffffffffff8111156157dd57600080fd5b6157e986828701615041565b93505060208401356157fa81614f59565b929592945050506040919091013590565b60006020828403121561581d57600080fd5b5051919050565b634e487b7160e01b600052601160045260246000fd5b60008282101561584c5761584c615824565b500390565b6000610280820190508a82528951602083015260208a015161587e60408401826001600160a01b03169052565b5060408a01516001600160a01b03811660608401525060608a01516001600160a01b03811660808401525060808a01516001600160a01b03811660a08401525060a08a01516001600160a01b03811660c08401525060c08a015160e083015260e08a01516101008181850152808c01519150506101206159018185018315159052565b8b0151610140848101919091528b0151610160808501919091528b01519050615930610180840182600f0b9052565b506101a08201989098526101c08101969096526101e08601949094526102008501929092526102208401526102408301526102609091015292915050565b600081600019048311821515161561598857615988615824565b500290565b6000826159aa57634e487b7160e01b600052601260045260246000fd5b500490565b600080604083850312156159c257600080fd5b82516159cd81614f9a565b602084015190925061534381614f9a565b600181815b80851115615a195781600019048211156159ff576159ff615824565b80851615615a0c57918102915b93841c93908002906159e3565b509250929050565b600082615a3057506001612aaf565b81615a3d57506000612aaf565b8160018114615a535760028114615a5d57615a79565b6001915050612aaf565b60ff841115615a6e57615a6e615824565b50506001821b612aaf565b5060208310610133831016604e8410600b8410161715615a9c575081810a612aaf565b615aa683836159de565b8060001904821115615aba57615aba615824565b029392505050565b60006108ce8383615a21565b6000600160ff1b821415615ae457615ae4615824565b5060000390565b60008219821115615afe57615afe615824565b500190565b634e487b7160e01b600052603260045260246000fd5b6000808335601e19843603018112615b3057600080fd5b83018035915067ffffffffffffffff821115615b4b57600080fd5b60200191503681900382131561464557600080fd5b8183823760009101908152919050565b6000600019821415615b8457615b84615824565b5060010190565b60005b83811015615ba6578181015183820152602001615b8e565b838111156141945750506000910152565b7f43414c4c5f524553554c54535f00000000000000000000000000000000000000815260008251615bef81600d850160208701615b8b565b91909101600d0192915050565b60008151808452615c14816020860160208601615b8b565b601f01601f19169290920160200192915050565b6020815260006108ce6020830184615bfc565b600060208284031215615c4d57600080fd5b81516108ce81614f81565b6000610240820190506001600160a01b03871682528551602083015260208601516040830152604086015160608301526060860151151560808301526080860151600f0b60a083015260a086015160c083015260c086015160e083015260e08601511515610100830152615d2b6101208301866001600160a01b03808251168352806020830151166020840152506040810151600f0b60408301526060810151600f0b60608301526080810151600f0b608083015260a0810151600f0b60a083015260c0810151600f0b60c08301525050565b615d3b610200830185600f0b9052565b61392a610220830184600f0b9052565b60008251615d5d818460208701615b8b565b9190910192915050565b634e487b7160e01b600052602160045260246000fd5b8281526040602082015260006108cb6040830184615bfc565b600060208284031215615da857600080fd5b81516001600160e01b0319811681146108ce57600080fd5b60008351615dd2818460208801615b8b565b9190910191825250602001919050565b60008085851115615df257600080fd5b83861115615dff57600080fd5b505082019391909203915056fe416464726573733a206c6f772d6c6576656c207374617469632063616c6c206661696c6564a2646970667358221220ab0d4511637a7ca57f08a99eb4e7abb130fc9cc9ad3fe177d9ba846a766dd5cf64736f6c634300080b0033",
  "deployedBytecode": "$caed8c4ffcf81826f6594109f9ec2a0e3a$__9063919726bf9060a4016040805180830381865af41580156110be573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906110e291906159af565b915091505b94509492505050565b600080611146836040518060400160405280600681526020017f50483a2065710000000000000000000000000000000000000000000000000000815250866001600160a01b03166138419092919063ffffffff16565b905080516020146111995760405162461bcd60e51b815260206004820152601760248201527f50483a20696e76616c69642063616c6c20726573756c74000000000000000000604482015260640161097a565b84818060200190518101906111ae919061580b565b1495945050505050565b6000846001600160a01b031663313ce5676040518163ffffffff1660e01b8152600401602060405180830381865afa1580156111f8573d6000803e3d6000fd5b505050506040513d602081101561120e57600080fd5b5051604080517f313ce567000000000000000000000000000000000000000000000000000000008152905160ff909216916001600160a01b0389169163313ce5679160048083019260209291908290030181865afa158015611274573d6000803e3d6000fd5b505050506040513d602081101561128a57600080fd5b505160ff16146112e1576040805162461bcd60e51b815260206004820152601f60248201527f43433a206f7261636c6520646563696d616c7320646f6e2774206d6174636800604482015290519081900360640190fd5b6000866001600160a01b031663feaf968c6040518163ffffffff1660e01b815260040160a060405180830381865afa158015611321573d6000803e3d6000fd5b505050506040513d60a081101561133757600080fd5b5060200151604080517ffeaf968c00000000000000000000000000000000000000000000000000000000815290519192506000916001600160a01b0389169163feaf968c9160048083019260a09291908290030181865afa1580156113a0573d6000803e3d6000fd5b505050506040513d60a08110156113b657600080fd5b50602001519050600085131561142c57633b9aca006113d482613bfe565b6113dd87613bfe565b6113e890600a615ac2565b6113f185613bfe565b6113fb8a8961596e565b611405919061596e565b61140f919061596e565b611419919061598d565b611423919061598d565b925050506114a7565b60008512156114865761144661144186615ace565b613bfe565b61145190600a615ac2565b633b9aca0061145f83613bfe565b61146885613bfe565b6114728a8961596e565b61147c919061596e565b61140f919061598d565b633b9aca0061149482613bfe565b61149d84613bfe565b611405898861596e565b95945050505050565b60006114ba613c54565b905090565b60608101516001600160a01b0316331461151b5760405162461bcd60e51b815260206004820152601260248201527f4c4f503a204163636573732064656e6965640000000000000000000000000000604482015260640161097a565b600061152682610e50565b60008181526005602052604090205490915060018114156115895760405162461bcd60e51b815260206004820152601360248201527f4c4f503a20616c72656164792066696c6c656400000000000000000000000000604482015260640161097a565b604080518381526020810183905233917fcbfa7d191838ece7ba4783ca3a30afd316619b7f368094b57ee7ffde9a923db1910160405180910390a25060009081526005602052604090206001905550565b6001546001600160a01b0316331461162e5760405162461bcd60e51b81526020600482015260176024820152761313d40e8813db9b1e481bdddb995c88185b1b1bddd959604a1b604482015260640161097a565b6001600160a01b0391909116600090815260106020526040902080546001600160801b0319166001600160801b03909216919091179055565b336000908152602081905260408120546116859060ff841690615aeb565b33600081815260208181526040918290208490558151848152915193945091927ffc69110dd11eb791755e4abd6b7d281bae236de95736d38a23782814be5e10db929181900390910190a25050565b6000806116e58888888888886116f4565b91509150965096945050505050565b6002546000908190600160a01b900460ff166117465760405162461bcd60e51b81526020600482015260116024820152704c4f503a204c6f636b656420737461746560781b604482015260640161097a565b6002805460ff60a01b1916905560608801516001600160a01b03163314156117b05760405162461bcd60e51b815260206004820152601960248201527f4c4f503a2073616d65206d616b657220616e642074616b657200000000000000604482015260640161097a565b8761014001514211156118055760405162461bcd60e51b815260206004820152601a60248201527f4c4f503a204f7264657220616c7265616479206d617475726564000000000000604482015260640161097a565b600061181089610e50565b6000818152600a602052604090205490915060ff16156118725760405162461bcd60e51b815260206004820152601460248201527f4c4f503a204f726465722064656661756c746564000000000000000000000000604482015260640161097a565b6000818152600960209081526040808320338452909152902054156118d95760405162461bcd60e51b815260206004820152601c60248201527f4c4f503a2053656e6465722069732061207061727469636970616e7400000000604482015260640161097a565b604080516080810182526060808c01516001600160a01b0390811683526020808e01518216818501528d850151909116838501526101008d0151151591830191909152600084815260059091529190912054600181141561197c5760405162461bcd60e51b815260206004820152601a60248201527f4c4f503a2072656d61696e696e6720616d6f756e742069732030000000000000604482015260640161097a565b60a08b01516001600160a01b031615806119a2575060a08b01516001600160a01b031633145b6119ee5760405162461bcd60e51b815260206004820152601260248201527f4c4f503a2070726976617465206f726465720000000000000000000000000000604482015260640161097a565b80611b3f57611a388b60600151848c8c8080601f016020809104026020016040519081016040528093929190818152602001838380828437600092019190915250613d7b92505050565b611a845760405162461bcd60e51b815260206004820152601260248201527f4c4f503a20626164207369676e61747572650000000000000000000000000000604482015260640161097a565b8a610100015115611a9a575060e08a0151611aa1565b5060c08a01515b60148b61022001515110611b3a57600080611acd8d610220015160148101805191516013190181529091565b91509150611adb8282613ee0565b60008581526005602052604090205415611b375760405162461bcd60e51b815260206004820152601860248201527f4c4f503a207265656e7472616e63792064657465637465640000000000000000604482015260640161097a565b50505b611b44565b600019015b6102008b01515115611ba557611b598b610f7d565b611ba55760405162461bcd60e51b815260206004820152601d60248201527f4c4f503a207072656469636174652072657475726e65642066616c7365000000604482015260640161097a565b871587151415611bf75760405162461bcd60e51b815260206004820181905260248201527f4c4f503a206f6e6c79206f6e6520616d6f756e742073686f756c642062652030604482015260640161097a565b87611d41576101008b0151879015611c975781881115611c15578197505b611c2e8c6101c001518d60e001518e60c001518b61419a565b9850611c3a888861596e565b611c44828b61596e565b1115611c925760405162461bcd60e51b815260206004820152601f60248201527f4c4f503a20546f6b656e73206c657373207468616e207468726573686f6c6400604482015260640161097a565b611d3b565b611cb08c6101e001518d60e001518e60c001518b61419a565b985081891115611cd957819850611cd68c6101c001518d60c001518e60e001518c61419a565b97505b611ce3888861596e565b611ced828b61596e565b1015611d3b5760405162461bcd60e51b815260206004820152601f60248201527f4c4f503a20546f6b656e73206c657373207468616e207468726573686f6c6400604482015260640161097a565b50611e82565b6101008b0151889015611df757611d678c6101e001518d60c001518e60e001518c61419a565b975081881115611d9057819750611d8d8c6101c001518d60e001518e60c001518b61419a565b98505b611d9a898861596e565b611da4828a61596e565b1015611df25760405162461bcd60e51b815260206004820152601f60248201527f4c4f503a20546f6b656e73206c657373207468616e207468726573686f6c6400604482015260640161097a565b611e80565b81891115611e03578198505b611e1c8c6101c001518d60c001518e60e001518c61419a565b9750611e28898861596e565b611e32828a61596e565b1115611e805760405162461bcd60e51b815260206004820152601f60248201527f4c4f503a20546f6b656e73206c657373207468616e207468726573686f6c6400604482015260640161097a565b505b600088118015611e925750600087115b611ede5760405162461bcd60e51b815260206004820152601860248201527f4c4f503a2063616e27742073776170203020616d6f756e740000000000000000604482015260640161097a565b8a610100015115611ef157869003611ef5565b8790035b6000838152600560209081526040808320600185810190915560068352928190208054909301909255815185815290810183905233917fb9ed0243fdf00f0545c63a0af8850c090d86bb46682baec4bf3c496814fe4f02910160405180910390a250600082815260076020818152604080842060608f0180516001600160a01b03908116875282855283872054898852958552815181168752828552838720958e019095558786526008808552838720825187168852808652848820548a895291865282519096168752858552838720908d0190553386529083528185208c905592909152822088905551611fed908c9085906108b3565b90506000611ffc8c85336108b3565b9050600061200d84604001516142b6565b60408581015190516323b872dd60e01b602082015233602482015230604482015260648101859052919250612054916084015b604051602081830303815290604052613ad0565b61206184604001516142b6565b61206b8383615aeb565b11156120b95760405162461bcd60e51b815260206004820152601660248201527f4c4f503a204d617267696e206e6f7420656e6f75676800000000000000000000604482015260640161097a565b6120c684604001516142b6565b604085810151865191516323b872dd60e01b60208201526001600160a01b0390921660248301523060448301526064820186905291925061210a9190608401612040565b61211784604001516142b6565b6121218483615aeb565b111561216f5760405162461bcd60e51b815260206004820152601660248201527f4c4f503a204d617267696e206e6f7420656e6f75676800000000000000000000604482015260640161097a565b50506002805460ff60a01b1916600160a01b179055509599949850939650505050505050565b8281146121e45760405162461bcd60e51b815260206004820152601860248201527f4c4f503a2061727261792073697a65206d69736d617463680000000000000000604482015260640161097a565b60008367ffffffffffffffff8111156121ff576121ff614f19565b6040519080825280601f01601f191660200182016040528015612229576020820181803683370190505b50905060005b8481101561237d5760008087878481811061224c5761224c615b03565b905060200201602081019061226191906152df565b6001600160a01b031686868581811061227c5761227c615b03565b905060200281019061228e9190615b19565b60405161229c929190615b60565b6000604051808303816000865af19150503d80600081146122d9576040519150601f19603f3d011682016040523d82523d6000602084013e6122de565b606091505b50915091508180156122f1575060008151115b1561230e578051602014801561230b575060208101516001145b91505b8161231d57600360fc1b61233f565b7f31000000000000000000000000000000000000000000000000000000000000005b84848151811061235157612351615b03565b60200101906001600160f81b031916908160001a9053505050808061237590615b70565b91505061222f565b508060405160200161238f9190615bb7565b60408051601f198184030181529082905262461bcd60e51b825261097a91600401615c28565b6001546001600160a01b031633146124095760405162461bcd60e51b81526020600482015260176024820152761313d40e8813db9b1e481bdddb995c88185b1b1bddd959604a1b604482015260640161097a565b600380546001600160801b03928316600160801b029216919091179055565b60008061247e836040518060400160405280600681526020017f50483a206c740000000000000000000000000000000000000000000000000000815250866001600160a01b03166138419092919063ffffffff16565b905080516020146124d15760405162461bcd60e51b815260206004820152601760248201527f50483a20696e76616c69642063616c6c20726573756c74000000000000000000604482015260640161097a565b84818060200190518101906124e6919061580b565b1095945050505050565b6001546001600160a01b031633146125445760405162461bcd60e51b81526020600482015260176024820152761313d40e8813db9b1e481bdddb995c88185b1b1bddd959604a1b604482015260640161097a565b6001600160a01b03919091166000908152600c6020526040902080546001600160801b0319166001600160801b03909216919091179055565b6001546001600160a01b031633146125d15760405162461bcd60e51b81526020600482015260176024820152761313d40e8813db9b1e481bdddb995c88185b1b1bddd959604a1b604482015260640161097a565b600380546001600160801b0319166001600160801b0392909216919091179055565b60008060148310156126475760405162461bcd60e51b815260206004820152601a60248201527f4c4f503a207065726d6974206c656e67746820746f6f206c6f77000000000000604482015260640161097a565b6000366000612656878761437f565b9250925092506126678383836143a8565b6126758d8d8d8d8d8d6116f4565b945094505050509850989650505050505050565b6001546001600160a01b031633146126dd5760405162461bcd60e51b81526020600482015260176024820152761313d40e8813db9b1e481bdddb995c88185b1b1bddd959604a1b604482015260640161097a565b6001600160a01b03919091166000908152600e6020526040902080546001600160801b0319166001600160801b03909216919091179055565b60008382146127675760405162461bcd60e51b815260206004820152601d60248201527f50483a20696e7075742061727261792073697a65206d69736d61746368000000604482015260640161097a565b60005b848110156128c557600061283c85858481811061278957612789615b03565b905060200281019061279b9190615b19565b8080601f0160208091040260200160405190810160405280939291908181526020018383808284376000920191909152505060408051808201909152601881527f50483a2027616e64272073756263616c6c206661696c65640000000000000000602082015291508a9050898681811061281757612817615b03565b905060200201602081019061282c91906152df565b6001600160a01b03169190613841565b9050805160201461288f5760405162461bcd60e51b815260206004820152601760248201527f50483a20696e76616c69642063616c6c20726573756c74000000000000000000604482015260640161097a565b808060200190518101906128a39190615c3b565b6128b2576000925050506128cb565b50806128bd81615b70565b91505061276a565b50600190505b949350505050565b6001546001600160a01b031633146129275760405162461bcd60e51b81526020600482015260176024820152761313d40e8813db9b1e481bdddb995c88185b1b1bddd959604a1b604482015260640161097a565b600480546001600160801b0319166001600160801b0392909216919091179055565b6001546001600160a01b0316331461299d5760405162461bcd60e51b81526020600482015260176024820152761313d40e8813db9b1e481bdddb995c88185b1b1bddd959604a1b604482015260640161097a565b6001600160a01b03919091166000908152600d6020526040902080546001600160801b0319166001600160801b03909216919091179055565b60008181526005602052604081205480612a325760405162461bcd60e51b815260206004820152601260248201527f4c4f503a20556e6b6e6f776e206f726465720000000000000000000000000000604482015260640161097a565b6000190192915050565b600080612a92836040518060400160405280601781526020017f41433a2061726269747261727953746174696343616c6c000000000000000000815250866001600160a01b03166138419092919063ffffffff16565b9050808060200190516020811015612aa957600080fd5b50519150505b92915050565b600080846001600160a01b031663feaf968c6040518163ffffffff1660e01b815260040160a060405180830381865afa158015612af6573d6000803e3d6000fd5b505050506040513d60a0811015612b0c57600080fd5b50602001519050600160ff1b8416158015907f7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff861690612b9b57633b9aca00612b5484613bfe565b612b5f90606461596e565b82612b73886801000000000000000061596e565b612b7d919061596e565b612b87919061598d565b612b91919061598d565b93505050506108ce565b633b9aca00680100000000000000008287612bb587613bfe565b612bc090606461596e565b612b73919061596e565b612bd46001611667565b565b60008111612c265760405162461bcd60e51b815260206004820152601060248201527f4c4f503a207a65726f20616d6f756e7400000000000000000000000000000000604482015260640161097a565b826101400151421115612c705760405162461bcd60e51b81526020600482015260126024820152711313d40e8813dc99195c881b585d1d5c995960721b604482015260640161097a565b6000612c7b84610e50565b6000818152600a602052604090205490915060ff1615612cdd5760405162461bcd60e51b815260206004820152601760248201527f4c4f503a204f726465722069732064656661756c746564000000000000000000604482015260640161097a565b60008181526009602090815260408083206001600160a01b0387168452909152902054612d4c5760405162461bcd60e51b815260206004820152601760248201527f4c4f503a204e6f206d617267696e2070726f7669646564000000000000000000604482015260640161097a565b60008181526009602090815260408083206001600160a01b038716845290915281208054849290612d7e908490615aeb565b925050819055506000612d9485604001516142b6565b60408681015190516323b872dd60e01b602082015233602482015230604482015260648101869052919250612dcb91608401612040565b612dd885604001516142b6565b612de28483615aeb565b1115612e305760405162461bcd60e51b815260206004820152601660248201527f4c4f503a204d617267696e206e6f7420656e6f75676800000000000000000000604482015260640161097a565b5050505050565b600254600090600160a01b900460ff16612e875760405162461bcd60e51b81526020600482015260116024820152704c4f503a204c6f636b656420737461746560781b604482015260640161097a565b6002805460ff60a01b191690556000612e9f84610e50565b9050836101400151421180612ec257506000818152600a602052604090205460ff165b612f0e5760405162461bcd60e51b815260206004820152601a60248201527f4c4f503a204f7264657220796574206e6f74206d617475726564000000000000604482015260640161097a565b60008181526007602090815260408083206001600160a01b0387168085529083528184205485855260088452828520828652845282852054868652600985528386209286529190935292205490919080612faa5760405162461bcd60e51b815260206004820152601760248201527f4c4f503a204e6f206d617267696e2070726f7669646564000000000000000000604482015260640161097a565b6000612fca886020015189604001518a61012001518b6101400151611027565b509050836000612fda8386613934565b612fe590606461596e565b6101608b01516000898152600a6020526040812054929350909160ff161561303f57600089815260066020908152604080832054600b90925282205461302b919061598d565b90506130378188615aeb565b915050613154565b60008c6101000151801561306857508c606001516001600160a01b03168c6001600160a01b0316145b15613071575060015b8c610100015115801561309a57508c606001516001600160a01b03168c6001600160a01b031614155b156130a3575060015b6040517fefe540590000000000000000000000000000000000000000000000000000000081526004810186905260248101859052604481018890528115156064820152600f84900b608482015273__$caed8c4ffcf81826f6594109f9ec2a0e3a$__9063efe540599060a401602060405180830381865af415801561312c573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190613150919061580b565b9150505b60008981526007602090815260408083206001600160a01b038f168085529083528184208490558c84526008835281842081855283528184208490558c8452600983528184209084529091528120556040808d015190516001600160a01b038d166024820152604481018390526131d7919063a9059cbb60e01b90606401610d6a565b985050505050505050506002805460ff60a01b1916600160a01b17905592915050565b600083821461324b5760405162461bcd60e51b815260206004820152601d60248201527f50483a20696e7075742061727261792073697a65206d69736d61746368000000604482015260640161097a565b60005b848110156133855760006132fb85858481811061326d5761326d615b03565b905060200281019061327f9190615b19565b8080601f0160208091040260200160405190810160405280939291908181526020018383808284376000920191909152505060408051808201909152601781527f50483a20276f72272073756263616c6c206661696c6564000000000000000000602082015291508a9050898681811061281757612817615b03565b9050805160201461334e5760405162461bcd60e51b815260206004820152601760248201527f50483a20696e76616c69642063616c6c20726573756c74000000000000000000604482015260640161097a565b808060200190518101906133629190615c3b565b15613372576001925050506128cb565b508061337d81615b70565b91505061324e565b50600095945050505050565b6000826001816133a1878661596e565b6133ab9190615aeb565b610f73919061583a565b6001546001600160a01b031633146134095760405162461bcd60e51b81526020600482015260176024820152761313d40e8813db9b1e481bdddb995c88185b1b1bddd959604a1b604482015260640161097a565b6001600160a01b03919091166000908152600f6020526040902080546001600160801b0319166001600160801b03909216919091179055565b600042866101400151101561348e5760405162461bcd60e51b81526020600482015260126024820152711313d40e8813dc99195c881b585d1d5c995960721b604482015260640161097a565b6000858152600a602052604090205460ff16156134ed5760405162461bcd60e51b815260206004820152601460248201527f4c4f503a204f726465722064656661756c746564000000000000000000000000604482015260640161097a565b60008661010001518015613516575086606001516001600160a01b0316856001600160a01b0316145b1561351f575060015b866101000151158015613548575086606001516001600160a01b0316856001600160a01b031614155b15613551575060015b600060405180610100016040528088815260200189610120015181526020018961014001518152602001600a60008a815260200190815260200160002060009054906101000a900460ff1615158152602001896101600151600f0b8152602001600760008a81526020019081526020016000206000896001600160a01b03166001600160a01b03168152602001908152602001600020548152602001600860008a81526020019081526020016000206000896001600160a01b03166001600160a01b03168152602001908152602001600020548152602001831515815250905060006040518060e001604052808a602001516001600160a01b031681526020018a604001516001600160a01b03168152602001600c60008c602001516001600160a01b03166001600160a01b0316815260200190815260200160002060009054906101000a9004600f0b600f0b8152602001600d60008c602001516001600160a01b03166001600160a01b0316815260200190815260200160002060009054906101000a9004600f0b600f0b8152602001600e60008c602001516001600160a01b03166001600160a01b0316815260200190815260200160002060009054906101000a9004600f0b600f0b8152602001600f60008c602001516001600160a01b03166001600160a01b0316815260200190815260200160002060009054906101000a9004600f0b600f0b8152602001601060008c602001516001600160a01b03166001600160a01b0316815260200190815260200160002060009054906101000a9004600f0b600f0b815250905073__$caed8c4ffcf81826f6594109f9ec2a0e3a$",
  "libraries": {
    "MarginLib": "0x6ee892B6DA8de66C83Ad69DD203050CF14ebAfeb"
  },
  "devdoc": {
    "kind": "dev",
    "methods": {
      "and(address[],bytes[])": {
        "returns": {
          "_0": "Result True if calls to all targets returned True. Otherwise, false"
        }
      },
      "arbitraryStaticCall(address,bytes)": {
        "returns": {
          "_0": "Result Bytes transmuted to uint256"
        }
      },
      "doublePrice(address,address,uint256,int256,uint256)": {
        "returns": {
          "_0": "Result Token A relative price times amount"
        }
      },
      "eq(uint256,address,bytes)": {
        "params": {
          "value": "Value to test"
        },
        "returns": {
          "_0": "Result True if call to target returns the same value as `value`. Otherwise, false"
        }
      },
      "fillOrder((uint256,address,address,address,address,address,uint256,uint256,bool,uint256,uint256,int128,bytes,bytes,bytes,bytes,bytes,bytes,bytes),bytes,uint256,uint256,uint256)": {
        "params": {
          "fixedTokens": "Fixed Tokens",
          "order": "Order quote to fill",
          "signature": "Signature to confirm quote ownership",
          "thresholdTokens": "Specifies maximum allowed takingAmount when takingAmount is zero, otherwise specifies minimum allowed makingAmount",
          "variableTokens": "Variable Tokens"
        }
      },
      "fillOrderTo((uint256,address,address,address,address,address,uint256,uint256,bool,uint256,uint256,int128,bytes,bytes,bytes,bytes,bytes,bytes,bytes),bytes,uint256,uint256,uint256)": {
        "params": {
          "fixedTokens": "Fixed Tokens",
          "order": "Order quote to fill",
          "signature": "Signature to confirm quote ownership",
          "thresholdTokens": "Specifies maximum allowed takingAmount when takingAmount is zero, otherwise specifies minimum allowed makingAmount",
          "variableTokens": "Variable Tokens"
        }
      },
      "fillOrderToWithPermit((uint256,address,address,address,address,address,uint256,uint256,bool,uint256,uint256,int128,bytes,bytes,bytes,bytes,bytes,bytes,bytes),bytes,uint256,uint256,uint256,bytes)": {
        "details": "See tests for examples",
        "params": {
          "fixedTokens": "Fixed Tokens",
          "order": "Order quote to fill",
          "permit": "Should consist of abiencoded token address and encoded `IERC20Permit.permit` call.",
          "signature": "Signature to confirm quote ownership",
          "thresholdTokens": "Specifies maximum allowed takingAmount when takingAmount is zero, otherwise specifies minimum allowed makingAmount",
          "variableTokens": "Variable Tokens"
        }
      },
      "getMakerAmount(uint256,uint256,uint256)": {
        "returns": {
          "_0": "Result Ceiled maker amount"
        }
      },
      "getTakerAmount(uint256,uint256,uint256)": {
        "returns": {
          "_0": "Result Floored taker amount"
        }
      },
      "gt(uint256,address,bytes)": {
        "params": {
          "value": "Value to test"
        },
        "returns": {
          "_0": "Result True if call to target returns value which is bigger than `value`. Otherwise, false"
        }
      },
      "lt(uint256,address,bytes)": {
        "params": {
          "value": "Value to test"
        },
        "returns": {
          "_0": "Result True if call to target returns value which is lower than `value`. Otherwise, false"
        }
      },
      "nonceEquals(address,uint256)": {
        "returns": {
          "_0": "Result True if `makerAddress` has specified nonce. Otherwise, false"
        }
      },
      "or(address[],bytes[])": {
        "returns": {
          "_0": "Result True if call to any target returned True. Otherwise, false"
        }
      },
      "remainingRaw(bytes32)": {
        "returns": {
          "_0": "Result Unfilled amount of order plus one if order exists. Otherwise 0"
        }
      },
      "simulateCalls(address[],bytes[])": {
        "params": {
          "data": "Array of data that will be passed to each call",
          "targets": "Array of addresses that will be called"
        }
      },
      "singlePrice(address,uint256,uint256)": {
        "params": {
          "inverseAndSpread": "concatenated inverse flag and spread. Lowest 254 bits specify spread amount. Spread is scaled by 1e9, i.e. 101% = 1.01e9, 99% = 0.99e9. Highest bit is set when oracle price should be inverted, e.g. for DAI-ETH oracle, inverse=false means that we request DAI price in ETH and inverse=true means that we request ETH price in DAI"
        },
        "returns": {
          "_0": "Amount * spread * oracle price"
        }
      },
      "timestampBelow(uint256)": {
        "returns": {
          "_0": "Result True if current block timestamp is lower than `time`. Otherwise, false"
        }
      }
    },
    "title": "1inch Limit Order Protocol v2",
    "version": 1
  },
  "userdoc": {
    "events": {
      "OrderCanceled(address,bytes32,uint256)": {
        "notice": "Emitted when order gets cancelled"
      },
      "OrderFilled(address,bytes32,uint256)": {
        "notice": "Emitted every time order gets filled, including partial fills"
      }
    },
    "kind": "user",
    "methods": {
      "advanceNonce(uint8)": {
        "notice": "Advances nonce by specified amount"
      },
      "and(address[],bytes[])": {
        "notice": "Calls every target with corresponding data"
      },
      "arbitraryStaticCall(address,bytes)": {
        "notice": "Performs an arbitrary call to target with data"
      },
      "cancelOrder((uint256,address,address,address,address,address,uint256,uint256,bool,uint256,uint256,int128,bytes,bytes,bytes,bytes,bytes,bytes,bytes))": {
        "notice": "Cancels order by setting remaining amount to zero"
      },
      "checkPredicate((uint256,address,address,address,address,address,uint256,uint256,bool,uint256,uint256,int128,bytes,bytes,bytes,bytes,bytes,bytes,bytes))": {
        "notice": "Checks order predicate"
      },
      "doublePrice(address,address,uint256,int256,uint256)": {
        "notice": "Calculates price of token A relative to token B. Note that order is important"
      },
      "eq(uint256,address,bytes)": {
        "notice": "Calls target with specified data and tests if it's equal to the value"
      },
      "fillOrder((uint256,address,address,address,address,address,uint256,uint256,bool,uint256,uint256,int128,bytes,bytes,bytes,bytes,bytes,bytes,bytes),bytes,uint256,uint256,uint256)": {
        "notice": "Fills an order. If one doesn't exist (first fill) it will be created using order.makerAssetData"
      },
      "fillOrderTo((uint256,address,address,address,address,address,uint256,uint256,bool,uint256,uint256,int128,bytes,bytes,bytes,bytes,bytes,bytes,bytes),bytes,uint256,uint256,uint256)": {
        "notice": "Same as `fillOrder` but allows to specify funds destination instead of `msg.sender`"
      },
      "fillOrderToWithPermit((uint256,address,address,address,address,address,uint256,uint256,bool,uint256,uint256,int128,bytes,bytes,bytes,bytes,bytes,bytes,bytes),bytes,uint256,uint256,uint256,bytes)": {
        "notice": "Same as `fillOrder` but calls permit first, allowing to approve token spending and make a swap in one transaction. Also allows to specify funds destination instead of `msg.sender`"
      },
      "getMakerAmount(uint256,uint256,uint256)": {
        "notice": "Calculates maker amount"
      },
      "getTakerAmount(uint256,uint256,uint256)": {
        "notice": "Calculates taker amount"
      },
      "gt(uint256,address,bytes)": {
        "notice": "Calls target with specified data and tests if it's bigger than value"
      },
      "increaseNonce()": {
        "notice": "Advances nonce by one"
      },
      "lt(uint256,address,bytes)": {
        "notice": "Calls target with specified data and tests if it's lower than value"
      },
      "nonceEquals(address,uint256)": {
        "notice": "Checks if `makerAddress` has specified `makerNonce`"
      },
      "or(address[],bytes[])": {
        "notice": "Calls every target with corresponding data"
      },
      "remaining(bytes32)": {
        "notice": "Returns unfilled amount for order. Throws if order does not exist"
      },
      "remainingRaw(bytes32)": {
        "notice": "Returns unfilled amount for order"
      },
      "simulateCalls(address[],bytes[])": {
        "notice": "Calls every target with corresponding data. Then reverts with CALL_RESULTS_0101011 where zeroes and ones denote failure or success of the corresponding call"
      },
      "singlePrice(address,uint256,uint256)": {
        "notice": "Calculates price of token relative to oracle unit (ETH or USD)"
      },
      "timestampBelow(uint256)": {
        "notice": "Checks passed time against block timestamp"
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 5842,
        "contract": "contracts/LimitOrderProtocol.sol:LimitOrderProtocol",
        "label": "nonce",
        "offset": 0,
        "slot": "0",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 3145,
        "contract": "contracts/LimitOrderProtocol.sol:LimitOrderProtocol",
        "label": "owner",
        "offset": 0,
        "slot": "1",
        "type": "t_address"
      },
      {
        "astId": 3148,
        "contract": "contracts/LimitOrderProtocol.sol:LimitOrderProtocol",
        "label": "_oracle",
        "offset": 0,
        "slot": "2",
        "type": "t_contract(OracleMock)9444"
      },
      {
        "astId": 3151,
        "contract": "contracts/LimitOrderProtocol.sol:LimitOrderProtocol",
        "label": "_unlocked",
        "offset": 20,
        "slot": "2",
        "type": "t_bool"
      },
      {
        "astId": 3154,
        "contract": "contracts/LimitOrderProtocol.sol:LimitOrderProtocol",
        "label": "liquidatorMargin",
        "offset": 0,
        "slot": "3",
        "type": "t_int128"
      },
      {
        "astId": 3157,
        "contract": "contracts/LimitOrderProtocol.sol:LimitOrderProtocol",
        "label": "oppositePartyMargin",
        "offset": 16,
        "slot": "3",
        "type": "t_int128"
      },
      {
        "astId": 3160,
        "contract": "contracts/LimitOrderProtocol.sol:LimitOrderProtocol",
        "label": "oppositePartyMarginNoLiquidator",
        "offset": 0,
        "slot": "4",
        "type": "t_int128"
      },
      {
        "astId": 3176,
        "contract": "contracts/LimitOrderProtocol.sol:LimitOrderProtocol",
        "label": "_remaining",
        "offset": 0,
        "slot": "5",
        "type": "t_mapping(t_bytes32,t_uint256)"
      },
      {
        "astId": 3180,
        "contract": "contracts/LimitOrderProtocol.sol:LimitOrderProtocol",
        "label": "_orderNumTakers",
        "offset": 0,
        "slot": "6",
        "type": "t_mapping(t_bytes32,t_uint256)"
      },
      {
        "astId": 3186,
        "contract": "contracts/LimitOrderProtocol.sol:LimitOrderProtocol",
        "label": "orderParticipantFixedTokens",
        "offset": 0,
        "slot": "7",
        "type": "t_mapping(t_bytes32,t_mapping(t_address,t_uint256))"
      },
      {
        "astId": 3192,
        "contract": "contracts/LimitOrderProtocol.sol:LimitOrderProtocol",
        "label": "orderParticipantVariableTokens",
        "offset": 0,
        "slot": "8",
        "type": "t_mapping(t_bytes32,t_mapping(t_address,t_uint256))"
      },
      {
        "astId": 3198,
        "contract": "contracts/LimitOrderProtocol.sol:LimitOrderProtocol",
        "label": "orderParticipantMargin",
        "offset": 0,
        "slot": "9",
        "type": "t_mapping(t_bytes32,t_mapping(t_address,t_uint256))"
      },
      {
        "astId": 3202,
        "contract": "contracts/LimitOrderProtocol.sol:LimitOrderProtocol",
        "label": "isOrderDefaulted",
        "offset": 0,
        "slot": "10",
        "type": "t_mapping(t_bytes32,t_bool)"
      },
      {
        "astId": 3206,
        "contract": "contracts/LimitOrderProtocol.sol:LimitOrderProtocol",
        "label": "defaultedFunds",
        "offset": 0,
        "slot": "11",
        "type": "t_mapping(t_bytes32,t_uint256)"
      },
      {
        "astId": 3210,
        "contract": "contracts/LimitOrderProtocol.sol:LimitOrderProtocol",
        "label": "assetAlpha",
        "offset": 0,
        "slot": "12",
        "type": "t_mapping(t_address,t_int128)"
      },
      {
        "astId": 3214,
        "contract": "contracts/LimitOrderProtocol.sol:LimitOrderProtocol",
        "label": "assetBeta",
        "offset": 0,
        "slot": "13",
        "type": "t_mapping(t_address,t_int128)"
      },
      {
        "astId": 3218,
        "contract": "contracts/LimitOrderProtocol.sol:LimitOrderProtocol",
        "label": "assetSigma",
        "offset": 0,
        "slot": "14",
        "type": "t_mapping(t_address,t_int128)"
      },
      {
        "astId": 3222,
        "contract": "contracts/LimitOrderProtocol.sol:LimitOrderProtocol",
        "label": "assetLowerBoundMul",
        "offset": 0,
        "slot": "15",
        "type": "t_mapping(t_address,t_int128)"
      },
      {
        "astId": 3226,
        "contract": "contracts/LimitOrderProtocol.sol:LimitOrderProtocol",
        "label": "assetUpperBoundMul",
        "offset": 0,
        "slot": "16",
        "type": "t_mapping(t_address,t_int128)"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_bytes32": {
        "encoding": "inplace",
        "label": "bytes32",
        "numberOfBytes": "32"
      },
      "t_contract(OracleMock)9444": {
        "encoding": "inplace",
        "label": "contract OracleMock",
        "numberOfBytes": "20"
      },
      "t_int128": {
        "encoding": "inplace",
        "label": "int128",
        "numberOfBytes": "16"
      },
      "t_mapping(t_address,t_int128)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => int128)",
        "numberOfBytes": "32",
        "value": "t_int128"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_mapping(t_bytes32,t_bool)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_bytes32,t_mapping(t_address,t_uint256))": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => mapping(address => uint256))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_address,t_uint256)"
      },
      "t_mapping(t_bytes32,t_uint256)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}