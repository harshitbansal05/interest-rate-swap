{
  "address": "0x6ee892B6DA8de66C83Ad69DD203050CF14ebAfeb",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "contract OracleMock",
          "name": "oracle",
          "type": "OracleMock"
        },
        {
          "internalType": "address",
          "name": "asset",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "underlyingAsset",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "startTimestamp",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "endTimestamp",
          "type": "uint256"
        }
      ],
      "name": "getAverageAccruedAPYBetweenTimestamps",
      "outputs": [
        {
          "internalType": "int128",
          "name": "apy",
          "type": "int128"
        },
        {
          "internalType": "int128",
          "name": "ewma",
          "type": "int128"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract OracleMock",
          "name": "oracle",
          "type": "OracleMock"
        },
        {
          "components": [
            {
              "internalType": "bytes32",
              "name": "orderHash",
              "type": "bytes32"
            },
            {
              "internalType": "uint256",
              "name": "beginTimestamp",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "endTimestamp",
              "type": "uint256"
            },
            {
              "internalType": "bool",
              "name": "isOrderDefaulted",
              "type": "bool"
            },
            {
              "internalType": "int128",
              "name": "term",
              "type": "int128"
            },
            {
              "internalType": "uint256",
              "name": "fixedTokens",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "variableTokens",
              "type": "uint256"
            },
            {
              "internalType": "bool",
              "name": "forFixedTaker",
              "type": "bool"
            }
          ],
          "internalType": "struct MarginLib.OrderInfo",
          "name": "orderInfo",
          "type": "tuple"
        },
        {
          "components": [
            {
              "internalType": "address",
              "name": "asset",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "underlyingAsset",
              "type": "address"
            },
            {
              "internalType": "int128",
              "name": "alpha",
              "type": "int128"
            },
            {
              "internalType": "int128",
              "name": "beta",
              "type": "int128"
            },
            {
              "internalType": "int128",
              "name": "sigma",
              "type": "int128"
            },
            {
              "internalType": "int128",
              "name": "lowerBoundMul",
              "type": "int128"
            },
            {
              "internalType": "int128",
              "name": "upperBoundMul",
              "type": "int128"
            }
          ],
          "internalType": "struct MarginLib.AssetInfo",
          "name": "assetInfo",
          "type": "tuple"
        },
        {
          "internalType": "int128",
          "name": "tl",
          "type": "int128"
        },
        {
          "internalType": "int128",
          "name": "tu",
          "type": "int128"
        }
      ],
      "name": "getMarginReqWithMuls",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "onePercentFixedTokens",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "onePercentVariableTokens",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "margin",
          "type": "uint256"
        },
        {
          "internalType": "bool",
          "name": "forFixedTaker",
          "type": "bool"
        },
        {
          "internalType": "int128",
          "name": "term",
          "type": "int128"
        }
      ],
      "name": "getReturnAfterMaturity",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "orderReturn",
          "type": "uint256"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    }
  ],
  "transactionHash": "0x1efee54da2065cd0e99d0dd2789347c43c8622510713d56f69344c0cad839078",
  "receipt": {
    "to": null,
    "from": "0x39521925DaF14B0d64452B8A1d14A850f1C75B34",
    "contractAddress": "0x6ee892B6DA8de66C83Ad69DD203050CF14ebAfeb",
    "transactionIndex": 30,
    "gasUsed": "1603651",
    "logsBloom": "0x
    "blockHash": "0x119ac03d35b491cecb05212fed42ceb11c731883fbd8c9830dbca8675e8fe1dd",
    "transactionHash": "0x1efee54da2065cd0e99d0dd2789347c43c8622510713d56f69344c0cad839078",
    "logs": [],
    "blockNumber": 10254585,
    "cumulativeGasUsed": "16046232",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 1,
  "solcInputHash": "b01025ea36ec0f80e317c2f0c40a3cb8",
  "metadata": "{\"compiler\":{\"version\":\"0.8.11+commit.d7f03943\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"contract OracleMock\",\"name\":\"oracle\",\"type\":\"OracleMock\"},{\"internalType\":\"address\",\"name\":\"asset\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"underlyingAsset\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"startTimestamp\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"endTimestamp\",\"type\":\"uint256\"}],\"name\":\"getAverageAccruedAPYBetweenTimestamps\",\"outputs\":[{\"internalType\":\"int128\",\"name\":\"apy\",\"type\":\"int128\"},{\"internalType\":\"int128\",\"name\":\"ewma\",\"type\":\"int128\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract OracleMock\",\"name\":\"oracle\",\"type\":\"OracleMock\"},{\"components\":[{\"internalType\":\"bytes32\",\"name\":\"orderHash\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"beginTimestamp\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"endTimestamp\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"isOrderDefaulted\",\"type\":\"bool\"},{\"internalType\":\"int128\",\"name\":\"term\",\"type\":\"int128\"},{\"internalType\":\"uint256\",\"name\":\"fixedTokens\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"variableTokens\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"forFixedTaker\",\"type\":\"bool\"}],\"internalType\":\"struct MarginLib.OrderInfo\",\"name\":\"orderInfo\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"asset\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"underlyingAsset\",\"type\":\"address\"},{\"internalType\":\"int128\",\"name\":\"alpha\",\"type\":\"int128\"},{\"internalType\":\"int128\",\"name\":\"beta\",\"type\":\"int128\"},{\"internalType\":\"int128\",\"name\":\"sigma\",\"type\":\"int128\"},{\"internalType\":\"int128\",\"name\":\"lowerBoundMul\",\"type\":\"int128\"},{\"internalType\":\"int128\",\"name\":\"upperBoundMul\",\"type\":\"int128\"}],\"internalType\":\"struct MarginLib.AssetInfo\",\"name\":\"assetInfo\",\"type\":\"tuple\"},{\"internalType\":\"int128\",\"name\":\"tl\",\"type\":\"int128\"},{\"internalType\":\"int128\",\"name\":\"tu\",\"type\":\"int128\"}],\"name\":\"getMarginReqWithMuls\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"onePercentFixedTokens\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"onePercentVariableTokens\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"margin\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"forFixedTaker\",\"type\":\"bool\"},{\"internalType\":\"int128\",\"name\":\"term\",\"type\":\"int128\"}],\"name\":\"getReturnAfterMaturity\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"orderReturn\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"notice\":\"Smart contract library of mathematical functions operating with signed 64.64-bit fixed point numbers.  Signed 64.64-bit fixed point number is basically a simple fraction whose numerator is signed 128-bit integer and denominator is 2^64.  As long as denominator is always the same, there is no need to store it, thus in Solidity signed 64.64-bit fixed point numbers are represented by int128 type holding only the numerator.\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/libraries/MarginLib.sol\":\"MarginLib\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":1000},\"remappings\":[]},\"sources\":{\"@chainlink/contracts/src/v0.8/interfaces/AggregatorInterface.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ninterface AggregatorInterface {\\n  function latestAnswer() external view returns (int256);\\n\\n  function latestTimestamp() external view returns (uint256);\\n\\n  function latestRound() external view returns (uint256);\\n\\n  function getAnswer(uint256 roundId) external view returns (int256);\\n\\n  function getTimestamp(uint256 roundId) external view returns (uint256);\\n\\n  event AnswerUpdated(int256 indexed current, uint256 indexed roundId, uint256 updatedAt);\\n\\n  event NewRound(uint256 indexed roundId, address indexed startedBy, uint256 startedAt);\\n}\\n\",\"keccak256\":\"0xb496651006b9a2a07920ffe116928b11e2a6458e21361cecca51409522488ca7\",\"license\":\"MIT\"},\"@chainlink/contracts/src/v0.8/interfaces/AggregatorV2V3Interface.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport \\\"./AggregatorInterface.sol\\\";\\nimport \\\"./AggregatorV3Interface.sol\\\";\\n\\ninterface AggregatorV2V3Interface is AggregatorInterface, AggregatorV3Interface {}\\n\",\"keccak256\":\"0x4a7757ff7bbafe044cd49c2a45c7c18ec50eff7c7af6869face5e1e9cda976f2\",\"license\":\"MIT\"},\"@chainlink/contracts/src/v0.8/interfaces/AggregatorV3Interface.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ninterface AggregatorV3Interface {\\n  function decimals() external view returns (uint8);\\n\\n  function description() external view returns (string memory);\\n\\n  function version() external view returns (uint256);\\n\\n  // getRoundData and latestRoundData should both raise \\\"No data present\\\"\\n  // if they do not have data to report, instead of returning unset values\\n  // which could be misinterpreted as actual reported values.\\n  function getRoundData(uint80 _roundId)\\n    external\\n    view\\n    returns (\\n      uint80 roundId,\\n      int256 answer,\\n      uint256 startedAt,\\n      uint256 updatedAt,\\n      uint80 answeredInRound\\n    );\\n\\n  function latestRoundData()\\n    external\\n    view\\n    returns (\\n      uint80 roundId,\\n      int256 answer,\\n      uint256 startedAt,\\n      uint256 updatedAt,\\n      uint80 answeredInRound\\n    );\\n}\\n\",\"keccak256\":\"0xf2b6c9adb3552254df1445b73563cf014434ff5e78663e9b961b6c059506ceb5\",\"license\":\"MIT\"},\"contracts/libraries/MarginLib.sol\":{\"content\":\"// SPDX-License-Identifier: BSD-4-Clause\\n/*\\n * ABDK Math 64.64 Smart Contract Library.  Copyright \\u00a9 2019 by ABDK Consulting.\\n * Author: Mikhail Vladimirov <mikhail.vladimirov@gmail.com>\\n */\\npragma solidity ^0.8.0;\\n\\nimport \\\"../mocks/OracleMock.sol\\\";\\n\\n/**\\n * Smart contract library of mathematical functions operating with signed\\n * 64.64-bit fixed point numbers.  Signed 64.64-bit fixed point number is\\n * basically a simple fraction whose numerator is signed 128-bit integer and\\n * denominator is 2^64.  As long as denominator is always the same, there is no\\n * need to store it, thus in Solidity signed 64.64-bit fixed point numbers are\\n * represented by int128 type holding only the numerator.\\n */\\nlibrary MarginLib {\\n    /*\\n     * Minimum value signed 64.64-bit fixed point number may have.\\n     */\\n    int128 private constant _MIN64X64 = -0x80000000000000000000000000000000;\\n\\n    /*\\n     * Maximum value signed 64.64-bit fixed point number may have.\\n     */\\n    int128 private constant _MAX64X64 = 0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF;\\n\\n    /*\\n     * Log e with base 2 in signed 64.64-bit fixed point format.\\n     */\\n    int128 private constant _LOG2E = 0x000000000000000171547652B83A2E3E;\\n\\n    /*\\n     * 1 / 2 in signed 64.64-bit fixed point format.\\n     */\\n    int128 private constant _ONEBYTWO = 0x00000000000000008000000000000000;\\n\\n    /*\\n     * 1 / 100 in signed 64.64-bit fixed point format.\\n     */\\n    int128 private constant _ONEBYHUNDRED = 0x0000000000000000028F5C28F5C28F5C;\\n\\n    struct AssetInfo {\\n        address asset;\\n        address underlyingAsset;\\n        int128 alpha;\\n        int128 beta;\\n        int128 sigma;\\n        int128 lowerBoundMul;\\n        int128 upperBoundMul;\\n    }\\n\\n    struct OrderInfo {\\n        bytes32 orderHash;\\n        uint256 beginTimestamp;\\n        uint256 endTimestamp;\\n        bool isOrderDefaulted;\\n        int128 term;\\n        uint256 fixedTokens;\\n        uint256 variableTokens;\\n        bool forFixedTaker;\\n    }\\n\\n    /**\\n     * Calculate x + y.  Revert on overflow.\\n     *\\n     * @param x signed 64.64-bit fixed point number\\n     * @param y signed 64.64-bit fixed point number\\n     * @return signed 64.64-bit fixed point number\\n     */\\n    function _add(int128 x, int128 y) private pure returns (int128) {\\n        unchecked {\\n            int256 result = int256(x) + y;\\n            require(\\n                result >= _MIN64X64 && result <= _MAX64X64,\\n                \\\"LOP: Overflow\\\"\\n            );\\n            return int128(result);\\n        }\\n    }\\n\\n    /**\\n     * Calculate x - y.  Revert on overflow.\\n     *\\n     * @param x signed 64.64-bit fixed point number\\n     * @param y signed 64.64-bit fixed point number\\n     * @return signed 64.64-bit fixed point number\\n     */\\n    function _sub(int128 x, int128 y) private pure returns (int128) {\\n        unchecked {\\n            int256 result = int256(x) - y;\\n            require(\\n                result >= _MIN64X64 && result <= _MAX64X64,\\n                \\\"LOP: Overflow\\\"\\n            );\\n            return int128(result);\\n        }\\n    }\\n\\n    /**\\n     * Calculate x * y rounding down.  Revert on overflow.\\n     *\\n     * @param x signed 64.64-bit fixed point number\\n     * @param y signed 64.64-bit fixed point number\\n     * @return signed 64.64-bit fixed point number\\n     */\\n    function _mul(int128 x, int128 y) private pure returns (int128) {\\n        unchecked {\\n            int256 result = (int256(x) * y) >> 64;\\n            require(\\n                result >= _MIN64X64 && result <= _MAX64X64,\\n                \\\"LOP: Overflow\\\"\\n            );\\n            return int128(result);\\n        }\\n    }\\n\\n    /**\\n     * Calculate x * y rounding down, where x is signed 64.64 fixed point number\\n     * and y is unsigned 256-bit integer number.  Revert on overflow.\\n     *\\n     * @param x signed 64.64 fixed point number\\n     * @param y unsigned 256-bit integer number\\n     * @return unsigned 256-bit integer number\\n     */\\n    function mulu(int128 x, uint256 y) internal pure returns (uint256) {\\n        unchecked {\\n            if (y == 0) return 0;\\n\\n            require(x >= 0, \\\"LOP: Underflow\\\");\\n\\n            uint256 lo = (uint256(int256(x)) *\\n                (y & 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF)) >> 64;\\n            uint256 hi = uint256(int256(x)) * (y >> 128);\\n\\n            require(\\n                hi <= 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF,\\n                \\\"LOP: Overflow\\\"\\n            );\\n            hi <<= 64;\\n\\n            require(\\n                hi <=\\n                    0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF -\\n                        lo,\\n                \\\"LOP: Overflow\\\"\\n            );\\n            return hi + lo;\\n        }\\n    }\\n\\n    /**\\n     * Calculate x / y rounding towards zero.  Revert on overflow or when y is\\n     * zero.\\n     *\\n     * @param x signed 64.64-bit fixed point number\\n     * @param y signed 64.64-bit fixed point number\\n     * @return signed 64.64-bit fixed point number\\n     */\\n    function _div(int128 x, int128 y) private pure returns (int128) {\\n        unchecked {\\n            require(y != 0, \\\"LOP: Zero divisor\\\");\\n            int256 result = (int256(x) << 64) / y;\\n            require(\\n                result >= _MIN64X64 && result <= _MAX64X64,\\n                \\\"LOP: Overflow\\\"\\n            );\\n            return int128(result);\\n        }\\n    }\\n\\n    /**\\n     * Calculate x / y rounding towards zero, where x and y are unsigned 256-bit\\n     * integer numbers.  Revert on overflow or when y is zero.\\n     *\\n     * @param x unsigned 256-bit integer number\\n     * @param y unsigned 256-bit integer number\\n     * @return signed 64.64-bit fixed point number\\n     */\\n    function _divu(uint256 x, uint256 y) private pure returns (int128) {\\n        unchecked {\\n            require(y != 0, \\\"LOP: Zero divisor\\\");\\n            uint128 result = _divuu(x, y);\\n            require(result <= uint128(_MAX64X64), \\\"LOP: Overflow\\\");\\n            return int128(result);\\n        }\\n    }\\n\\n    /**\\n     * Calculate binary logarithm of x.  Revert if x <= 0.\\n     *\\n     * @param x signed 64.64-bit fixed point number\\n     * @return signed 64.64-bit fixed point number\\n     */\\n    function _log2(int128 x) private pure returns (int128) {\\n        unchecked {\\n            require(x > 0, \\\"LOP: Negative\\\");\\n\\n            int256 msb = 0;\\n            int256 xc = x;\\n            if (xc >= 0x10000000000000000) {\\n                xc >>= 64;\\n                msb += 64;\\n            }\\n            if (xc >= 0x100000000) {\\n                xc >>= 32;\\n                msb += 32;\\n            }\\n            if (xc >= 0x10000) {\\n                xc >>= 16;\\n                msb += 16;\\n            }\\n            if (xc >= 0x100) {\\n                xc >>= 8;\\n                msb += 8;\\n            }\\n            if (xc >= 0x10) {\\n                xc >>= 4;\\n                msb += 4;\\n            }\\n            if (xc >= 0x4) {\\n                xc >>= 2;\\n                msb += 2;\\n            }\\n            if (xc >= 0x2) msb += 1; // No need to shift xc anymore\\n\\n            int256 result = (msb - 64) << 64;\\n            uint256 ux = uint256(int256(x)) << uint256(127 - msb);\\n            for (int256 bit = 0x8000000000000000; bit > 0; bit >>= 1) {\\n                ux *= ux;\\n                uint256 b = ux >> 255;\\n                ux >>= 127 + b;\\n                result += bit * int256(b);\\n            }\\n\\n            return int128(result);\\n        }\\n    }\\n\\n    /**\\n     * Calculate binary exponent of x.  Revert on overflow.\\n     *\\n     * @param x signed 64.64-bit fixed point number\\n     * @return signed 64.64-bit fixed point number\\n     */\\n    function _exp2(int128 x) private pure returns (int128) {\\n        unchecked {\\n            require(x < 0x400000000000000000, \\\"LOP: Overflow\\\"); // Overflow\\n\\n            if (x < -0x400000000000000000) return 0; // Underflow\\n\\n            uint256 result = 0x80000000000000000000000000000000;\\n\\n            if (x & 0x8000000000000000 > 0)\\n                result = (result * 0x16A09E667F3BCC908B2FB1366EA957D3E) >> 128;\\n            if (x & 0x4000000000000000 > 0)\\n                result = (result * 0x1306FE0A31B7152DE8D5A46305C85EDEC) >> 128;\\n            if (x & 0x2000000000000000 > 0)\\n                result = (result * 0x1172B83C7D517ADCDF7C8C50EB14A791F) >> 128;\\n            if (x & 0x1000000000000000 > 0)\\n                result = (result * 0x10B5586CF9890F6298B92B71842A98363) >> 128;\\n            if (x & 0x800000000000000 > 0)\\n                result = (result * 0x1059B0D31585743AE7C548EB68CA417FD) >> 128;\\n            if (x & 0x400000000000000 > 0)\\n                result = (result * 0x102C9A3E778060EE6F7CACA4F7A29BDE8) >> 128;\\n            if (x & 0x200000000000000 > 0)\\n                result = (result * 0x10163DA9FB33356D84A66AE336DCDFA3F) >> 128;\\n            if (x & 0x100000000000000 > 0)\\n                result = (result * 0x100B1AFA5ABCBED6129AB13EC11DC9543) >> 128;\\n            if (x & 0x80000000000000 > 0)\\n                result = (result * 0x10058C86DA1C09EA1FF19D294CF2F679B) >> 128;\\n            if (x & 0x40000000000000 > 0)\\n                result = (result * 0x1002C605E2E8CEC506D21BFC89A23A00F) >> 128;\\n            if (x & 0x20000000000000 > 0)\\n                result = (result * 0x100162F3904051FA128BCA9C55C31E5DF) >> 128;\\n            if (x & 0x10000000000000 > 0)\\n                result = (result * 0x1000B175EFFDC76BA38E31671CA939725) >> 128;\\n            if (x & 0x8000000000000 > 0)\\n                result = (result * 0x100058BA01FB9F96D6CACD4B180917C3D) >> 128;\\n            if (x & 0x4000000000000 > 0)\\n                result = (result * 0x10002C5CC37DA9491D0985C348C68E7B3) >> 128;\\n            if (x & 0x2000000000000 > 0)\\n                result = (result * 0x1000162E525EE054754457D5995292026) >> 128;\\n            if (x & 0x1000000000000 > 0)\\n                result = (result * 0x10000B17255775C040618BF4A4ADE83FC) >> 128;\\n            if (x & 0x800000000000 > 0)\\n                result = (result * 0x1000058B91B5BC9AE2EED81E9B7D4CFAB) >> 128;\\n            if (x & 0x400000000000 > 0)\\n                result = (result * 0x100002C5C89D5EC6CA4D7C8ACC017B7C9) >> 128;\\n            if (x & 0x200000000000 > 0)\\n                result = (result * 0x10000162E43F4F831060E02D839A9D16D) >> 128;\\n            if (x & 0x100000000000 > 0)\\n                result = (result * 0x100000B1721BCFC99D9F890EA06911763) >> 128;\\n            if (x & 0x80000000000 > 0)\\n                result = (result * 0x10000058B90CF1E6D97F9CA14DBCC1628) >> 128;\\n            if (x & 0x40000000000 > 0)\\n                result = (result * 0x1000002C5C863B73F016468F6BAC5CA2B) >> 128;\\n            if (x & 0x20000000000 > 0)\\n                result = (result * 0x100000162E430E5A18F6119E3C02282A5) >> 128;\\n            if (x & 0x10000000000 > 0)\\n                result = (result * 0x1000000B1721835514B86E6D96EFD1BFE) >> 128;\\n            if (x & 0x8000000000 > 0)\\n                result = (result * 0x100000058B90C0B48C6BE5DF846C5B2EF) >> 128;\\n            if (x & 0x4000000000 > 0)\\n                result = (result * 0x10000002C5C8601CC6B9E94213C72737A) >> 128;\\n            if (x & 0x2000000000 > 0)\\n                result = (result * 0x1000000162E42FFF037DF38AA2B219F06) >> 128;\\n            if (x & 0x1000000000 > 0)\\n                result = (result * 0x10000000B17217FBA9C739AA5819F44F9) >> 128;\\n            if (x & 0x800000000 > 0)\\n                result = (result * 0x1000000058B90BFCDEE5ACD3C1CEDC823) >> 128;\\n            if (x & 0x400000000 > 0)\\n                result = (result * 0x100000002C5C85FE31F35A6A30DA1BE50) >> 128;\\n            if (x & 0x200000000 > 0)\\n                result = (result * 0x10000000162E42FF0999CE3541B9FFFCF) >> 128;\\n            if (x & 0x100000000 > 0)\\n                result = (result * 0x100000000B17217F80F4EF5AADDA45554) >> 128;\\n            if (x & 0x80000000 > 0)\\n                result = (result * 0x10000000058B90BFBF8479BD5A81B51AD) >> 128;\\n            if (x & 0x40000000 > 0)\\n                result = (result * 0x1000000002C5C85FDF84BD62AE30A74CC) >> 128;\\n            if (x & 0x20000000 > 0)\\n                result = (result * 0x100000000162E42FEFB2FED257559BDAA) >> 128;\\n            if (x & 0x10000000 > 0)\\n                result = (result * 0x1000000000B17217F7D5A7716BBA4A9AE) >> 128;\\n            if (x & 0x8000000 > 0)\\n                result = (result * 0x100000000058B90BFBE9DDBAC5E109CCE) >> 128;\\n            if (x & 0x4000000 > 0)\\n                result = (result * 0x10000000002C5C85FDF4B15DE6F17EB0D) >> 128;\\n            if (x & 0x2000000 > 0)\\n                result = (result * 0x1000000000162E42FEFA494F1478FDE05) >> 128;\\n            if (x & 0x1000000 > 0)\\n                result = (result * 0x10000000000B17217F7D20CF927C8E94C) >> 128;\\n            if (x & 0x800000 > 0)\\n                result = (result * 0x1000000000058B90BFBE8F71CB4E4B33D) >> 128;\\n            if (x & 0x400000 > 0)\\n                result = (result * 0x100000000002C5C85FDF477B662B26945) >> 128;\\n            if (x & 0x200000 > 0)\\n                result = (result * 0x10000000000162E42FEFA3AE53369388C) >> 128;\\n            if (x & 0x100000 > 0)\\n                result = (result * 0x100000000000B17217F7D1D351A389D40) >> 128;\\n            if (x & 0x80000 > 0)\\n                result = (result * 0x10000000000058B90BFBE8E8B2D3D4EDE) >> 128;\\n            if (x & 0x40000 > 0)\\n                result = (result * 0x1000000000002C5C85FDF4741BEA6E77E) >> 128;\\n            if (x & 0x20000 > 0)\\n                result = (result * 0x100000000000162E42FEFA39FE95583C2) >> 128;\\n            if (x & 0x10000 > 0)\\n                result = (result * 0x1000000000000B17217F7D1CFB72B45E1) >> 128;\\n            if (x & 0x8000 > 0)\\n                result = (result * 0x100000000000058B90BFBE8E7CC35C3F0) >> 128;\\n            if (x & 0x4000 > 0)\\n                result = (result * 0x10000000000002C5C85FDF473E242EA38) >> 128;\\n            if (x & 0x2000 > 0)\\n                result = (result * 0x1000000000000162E42FEFA39F02B772C) >> 128;\\n            if (x & 0x1000 > 0)\\n                result = (result * 0x10000000000000B17217F7D1CF7D83C1A) >> 128;\\n            if (x & 0x800 > 0)\\n                result = (result * 0x1000000000000058B90BFBE8E7BDCBE2E) >> 128;\\n            if (x & 0x400 > 0)\\n                result = (result * 0x100000000000002C5C85FDF473DEA871F) >> 128;\\n            if (x & 0x200 > 0)\\n                result = (result * 0x10000000000000162E42FEFA39EF44D91) >> 128;\\n            if (x & 0x100 > 0)\\n                result = (result * 0x100000000000000B17217F7D1CF79E949) >> 128;\\n            if (x & 0x80 > 0)\\n                result = (result * 0x10000000000000058B90BFBE8E7BCE544) >> 128;\\n            if (x & 0x40 > 0)\\n                result = (result * 0x1000000000000002C5C85FDF473DE6ECA) >> 128;\\n            if (x & 0x20 > 0)\\n                result = (result * 0x100000000000000162E42FEFA39EF366F) >> 128;\\n            if (x & 0x10 > 0)\\n                result = (result * 0x1000000000000000B17217F7D1CF79AFA) >> 128;\\n            if (x & 0x8 > 0)\\n                result = (result * 0x100000000000000058B90BFBE8E7BCD6D) >> 128;\\n            if (x & 0x4 > 0)\\n                result = (result * 0x10000000000000002C5C85FDF473DE6B2) >> 128;\\n            if (x & 0x2 > 0)\\n                result = (result * 0x1000000000000000162E42FEFA39EF358) >> 128;\\n            if (x & 0x1 > 0)\\n                result = (result * 0x10000000000000000B17217F7D1CF79AB) >> 128;\\n\\n            result >>= uint256(int256(63 - (x >> 64)));\\n            require(result <= uint256(int256(_MAX64X64)), \\\"LOP: Overflow\\\");\\n\\n            return int128(int256(result));\\n        }\\n    }\\n\\n    /**\\n     * Calculate x / y rounding towards zero, where x and y are unsigned 256-bit\\n     * integer numbers.  Revert on overflow or when y is zero.\\n     *\\n     * @param x unsigned 256-bit integer number\\n     * @param y unsigned 256-bit integer number\\n     * @return unsigned 64.64-bit fixed point number\\n     */\\n    function _divuu(uint256 x, uint256 y) private pure returns (uint128) {\\n        unchecked {\\n            require(y != 0, \\\"LOP: Zero Divisor\\\");\\n\\n            uint256 result;\\n\\n            if (x <= 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF)\\n                result = (x << 64) / y;\\n            else {\\n                uint256 msb = 192;\\n                uint256 xc = x >> 192;\\n                if (xc >= 0x100000000) {\\n                    xc >>= 32;\\n                    msb += 32;\\n                }\\n                if (xc >= 0x10000) {\\n                    xc >>= 16;\\n                    msb += 16;\\n                }\\n                if (xc >= 0x100) {\\n                    xc >>= 8;\\n                    msb += 8;\\n                }\\n                if (xc >= 0x10) {\\n                    xc >>= 4;\\n                    msb += 4;\\n                }\\n                if (xc >= 0x4) {\\n                    xc >>= 2;\\n                    msb += 2;\\n                }\\n                if (xc >= 0x2) msb += 1; // No need to shift xc anymore\\n\\n                result = (x << (255 - msb)) / (((y - 1) >> (msb - 191)) + 1);\\n                require(\\n                    result <= 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF,\\n                    \\\"LOP: Overflow\\\"\\n                );\\n\\n                uint256 hi = result * (y >> 128);\\n                uint256 lo = result * (y & 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF);\\n\\n                uint256 xh = x >> 192;\\n                uint256 xl = x << 64;\\n\\n                if (xl < lo) xh -= 1;\\n                xl -= lo; // We rely on overflow behavior here\\n                lo = hi << 128;\\n                if (xl < lo) xh -= 1;\\n                xl -= lo; // We rely on overflow behavior here\\n\\n                assert(xh == hi >> 128);\\n\\n                result += xl / y;\\n            }\\n\\n            require(\\n                result <= 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF,\\n                \\\"LOP: Overflow\\\"\\n            );\\n            return uint128(result);\\n        }\\n    }\\n\\n    function _getCIRModelParams(\\n        AssetInfo memory assetInfo,\\n        int128 t,\\n        int128 ewmaAPY\\n    )\\n        private\\n        pure\\n        returns (\\n            int128 k,\\n            int128 lambda,\\n            int128 ct\\n        )\\n    {\\n        int128 beta = assetInfo.beta;\\n        int128 sigma = assetInfo.sigma; \\n        int128 exponent = _exp2(\\n            _mul(\\n                _mul(_mul(-1 * (1 << 64), beta), t),\\n                _LOG2E\\n            )\\n        );\\n        int128 numerator = _mul(\\n            _mul(_mul(4 * (1 << 64), beta), ewmaAPY),\\n            exponent\\n        );\\n        int128 denominator = _mul(\\n            _mul(sigma, sigma),\\n            _sub(1 * (1 << 64), exponent)\\n        );\\n\\n        k = _div(\\n            _mul(4 * (1 << 64), assetInfo.alpha),\\n            _mul(sigma, sigma)\\n        );\\n        lambda = _div(numerator, denominator);\\n        ct = _div(\\n            denominator,\\n            _mul(4 * (1 << 64), beta)\\n        );\\n    }\\n\\n    function _getAPYBounds(\\n        AssetInfo memory assetInfo,\\n        int128 t,\\n        int128 ewma\\n    ) private pure returns (int128, int128) {\\n        (int128 k, int128 lambda, int128 ct) = _getCIRModelParams(\\n            assetInfo,\\n            t,\\n            ewma\\n        );\\n        int128 upperBoundMul = assetInfo.upperBoundMul;\\n        int128 lowerBoundMul = assetInfo.lowerBoundMul;\\n        int128 upperBound;\\n        int128 lowerBound;\\n        {\\n            int128 sqrtTerm = _mul(\\n                2 * (1 << 64),\\n                _add(k, _mul(2 * (1 << 64), lambda))\\n            );\\n            int128 sqrtCal = _exp2(\\n                _mul(_log2(sqrtTerm), _ONEBYTWO)\\n            );\\n            upperBound = _mul(\\n                ct,\\n                _add(\\n                    _add(k, lambda),\\n                    _mul(upperBoundMul, sqrtCal)\\n                )\\n            );\\n            lowerBound = _mul(\\n                ct,\\n                _sub(\\n                    _add(k, lambda),\\n                    _mul(lowerBoundMul, sqrtCal)\\n                )\\n            );\\n        }\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly {\\n            if gt(0, lowerBound) {\\n                lowerBound := 0\\n            }\\n        }\\n        return (lowerBound, upperBound);\\n    }\\n\\n    function getAverageAccruedAPYBetweenTimestamps(\\n        OracleMock oracle,\\n        address asset,\\n        address underlyingAsset,\\n        uint256 startTimestamp,\\n        uint256 endTimestamp\\n    ) public view returns (int128 apy, int128 ewma) {\\n        int256 answer = oracle.getAverageAccruedAPYBetweenTimestamps(\\n            asset,\\n            underlyingAsset,\\n            startTimestamp,\\n            endTimestamp\\n        );\\n        apy = int128((answer << 128) >> 128);\\n        ewma = int128(answer >> 128);\\n    }\\n\\n    function getMarginReqWithMuls(\\n        OracleMock oracle,\\n        OrderInfo memory orderInfo,\\n        AssetInfo memory assetInfo,\\n        int128 tl,\\n        int128 tu\\n    ) public view returns (uint256) {\\n        uint256 beginTimestamp = orderInfo.beginTimestamp;\\n        uint256 endTimestamp = orderInfo.endTimestamp;\\n        int128 apyLower;\\n        int128 apyUpper;\\n        int128 accruedAPY;\\n        {\\n            int128 ewma;\\n            (accruedAPY, ewma) = getAverageAccruedAPYBetweenTimestamps(\\n                oracle,\\n                assetInfo.asset,\\n                assetInfo.underlyingAsset,\\n                beginTimestamp,\\n                block.timestamp // solhint-disable-line\\n            );\\n            (apyLower, apyUpper) = _getAPYBounds(\\n                assetInfo,\\n                _divu(\\n                    endTimestamp - block.timestamp, // solhint-disable-line\\n                    endTimestamp - beginTimestamp\\n                ),\\n                ewma\\n            );\\n        }\\n        {\\n            int128 w1 = _divu(\\n                block.timestamp - beginTimestamp, // solhint-disable-line\\n                endTimestamp - beginTimestamp\\n            ); \\n            int128 w2 = _divu(\\n                endTimestamp - block.timestamp, // solhint-disable-line\\n                endTimestamp - beginTimestamp\\n            ); \\n            apyLower = _add(\\n                _mul(w1, accruedAPY),\\n                _mul(w2, apyLower)\\n            );\\n            apyUpper = _add(\\n                _mul(w1, accruedAPY),\\n                _mul(w2, apyUpper)\\n            );\\n            apyLower = _mul(apyLower, tl);\\n            apyUpper = _mul(apyUpper, tu);\\n        }\\n        uint256 positiveMargin;\\n        uint256 negativeMargin;\\n        if (orderInfo.forFixedTaker) {\\n            positiveMargin = mulu(\\n                _mul(apyUpper, orderInfo.term),\\n                orderInfo.variableTokens\\n            );\\n            negativeMargin = mulu(\\n                _mul(_ONEBYHUNDRED, orderInfo.term),\\n                orderInfo.fixedTokens\\n            );\\n        } else {\\n            positiveMargin = mulu(\\n                _mul(_ONEBYHUNDRED, orderInfo.term),\\n                orderInfo.fixedTokens\\n            );\\n            negativeMargin = mulu(\\n                _mul(apyLower, orderInfo.term),\\n               orderInfo. variableTokens\\n            );\\n        }\\n        uint256 marginReq = 0;\\n        uint256 minMargin = 100;\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly {\\n            if gt(positiveMargin, negativeMargin) {\\n                marginReq := sub(positiveMargin, negativeMargin)\\n            }\\n            if gt(minMargin, marginReq) {\\n                marginReq := minMargin\\n            }\\n        }\\n        return marginReq;\\n    }\\n\\n    function getReturnAfterMaturity(\\n        uint256 onePercentFixedTokens,\\n        uint256 onePercentVariableTokens,\\n        uint256 margin,\\n        bool forFixedTaker,\\n        int128 term\\n    ) public pure returns(uint256 orderReturn) {\\n        if (forFixedTaker) {\\n            if (onePercentFixedTokens >= onePercentVariableTokens) {\\n                uint256 diff = mulu(\\n                    term,\\n                    onePercentFixedTokens - onePercentVariableTokens\\n                ) / 100;\\n                orderReturn = margin + diff;\\n            } else {\\n                uint256 diff = mulu(\\n                    term,\\n                    onePercentVariableTokens - onePercentFixedTokens\\n                ) / 100;\\n                assert(diff <= margin);\\n                orderReturn = margin - diff;\\n            }\\n        } else {\\n            if (onePercentVariableTokens >= onePercentFixedTokens) {\\n                uint256 diff = mulu(\\n                    term,\\n                    onePercentVariableTokens - onePercentFixedTokens\\n                ) / 100;\\n                orderReturn = margin + diff;\\n            } else {\\n                uint256 diff = mulu(\\n                    term,\\n                    onePercentFixedTokens - onePercentVariableTokens\\n                ) / 100;\\n                assert(diff <= margin);\\n                orderReturn = margin - diff;\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xaea7c1d3377c74dc3c854385f67eb6865f13005a3740235581391667aedd65cf\",\"license\":\"BSD-4-Clause\"},\"contracts/mocks/OracleMock.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.11;\\npragma abicoder v1;\\n\\nimport \\\"@chainlink/contracts/src/v0.8/interfaces/AggregatorV2V3Interface.sol\\\";\\n\\n/// @title Mock oracle that always returns specified token price\\ncontract OracleMock is AggregatorV2V3Interface {\\n    int256 private immutable _answer;\\n\\n    constructor(int256 answer) {\\n        _answer = answer;\\n    }\\n\\n    function decimals() external pure returns (uint8) {\\n        return 18;\\n    }\\n\\n    function description() external pure returns (string memory) {\\n        return \\\"AggregatorMock\\\";\\n    }\\n\\n    function version() external pure returns (uint256) {\\n        return 1;\\n    }\\n\\n    function getRoundData(uint80 _roundId)\\n        external\\n        view\\n        returns (\\n            uint80 roundId,\\n            int256 answer,\\n            uint256 startedAt,\\n            uint256 updatedAt,\\n            uint80 answeredInRound\\n        )\\n    {\\n        require(_roundId == 0, \\\"No data present\\\");\\n        return latestRoundData();\\n    }\\n\\n    function latestRoundData()\\n        public\\n        view\\n        returns (\\n            uint80 roundId,\\n            int256 answer,\\n            uint256 startedAt,\\n            uint256 updatedAt,\\n            uint80 answeredInRound\\n        )\\n    {\\n        // solhint-disable-next-line not-rely-on-time\\n        return (0, _answer, block.timestamp - 100, block.timestamp - 100, 0);\\n    }\\n\\n    function latestAnswer() public view returns (int256) {\\n        return _answer;\\n    }\\n\\n    function latestTimestamp() public view returns (uint256) {\\n        // solhint-disable-next-line not-rely-on-time\\n        return block.timestamp - 100;\\n    }\\n\\n    function latestRound() external pure returns (uint256) {\\n        return 0;\\n    }\\n\\n    function getAnswer(uint256 roundId) external view returns (int256) {\\n        require(roundId == 0, \\\"No data present\\\");\\n        return latestAnswer();\\n    }\\n\\n    function getTimestamp(uint256 roundId) external view returns (uint256) {\\n        require(roundId == 0, \\\"No data present\\\");\\n        return latestTimestamp();\\n    }\\n\\n    function getAverageAccruedAPYBetweenTimestamps(\\n        address, /* asset */\\n        address, /* underlyingAsset */\\n        uint256, /* startTimestamp */\\n        uint256 /* endTimestamp */\\n    ) external view returns (int256) {\\n        return _answer;\\n    }\\n}\\n\",\"keccak256\":\"0x03956443e7e9b6289f84d279bb43859ef7a63cea991e23cba5e12908c5f2768d\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x611c2f61003a600b82828239805160001a60731461002d57634e487b7160e01b600052600060045260246000fd5b30600052607381538281f3fe730000000000000000000000000000000000000000301460806040526004361061004b5760003560e01c8063919726bf14610050578063cc160f7614610082578063efe54059146100a3575b600080fd5b61006361005e3660046118a9565b6100b6565b60408051600f93840b81529190920b6020820152015b60405180910390f35b610095610090366004611a28565b61017b565b604051908152602001610079565b6100956100b1366004611b09565b610317565b6040517f303081ab00000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff858116600483015284811660248301526044820184905260648201839052600091829182919089169063303081ab90608401602060405180830381865afa158015610140573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906101649190611b4d565b608081811b811d9a91901d98509650505050505050565b600080856020015190506000866040015190506000806000806101a98c8b600001518c6020015189426100b6565b90925090506101d48a6101ce6101bf4289611b7c565b6101c98a8a611b7c565b6103ef565b836104bc565b9094509250600090506101f46101ea8742611b7c565b6101c98888611b7c565b9050600061020f6102054288611b7c565b6101c98989611b7c565b905061022d61021e8385610585565b6102288388610585565b610601565b945061024661023c8385610585565b6102288387610585565b9350610252858b610585565b945061025e848a610585565b935050506000808b60e00151156102b65761028a610280858e60800151610585565b8d60c00151610679565b91506102af6102a567028f5c28f5c28f5c8e60800151610585565b8d60a00151610679565b90506102e5565b6102cf6102a567028f5c28f5c28f5c8e60800151610585565b91506102e2610280868e60800151610585565b90505b60006064828411156102f75782840391505b81811115610303578091505b509750505050505050505b95945050505050565b600082156103935784861061035b576000606461033d84610338898b611b7c565b610679565b6103479190611ba9565b90506103538186611bcb565b91505061030e565b6000606461036d846103388a8a611b7c565b6103779190611ba9565b90508481111561038957610389611be3565b6103538186611b7c565b8585106103ac576000606461033d846103388a8a611b7c565b600060646103be84610338898b611b7c565b6103c89190611ba9565b9050848111156103da576103da611be3565b6103e48186611b7c565b979650505050505050565b6000816104435760405162461bcd60e51b815260206004820152601160248201527f4c4f503a205a65726f2064697669736f7200000000000000000000000000000060448201526064015b60405180910390fd5b600061044f84846107a4565b90506f7fffffffffffffffffffffffffffffff6fffffffffffffffffffffffffffffffff821611156104b35760405162461bcd60e51b815260206004820152600d60248201526c4c4f503a204f766572666c6f7760981b604482015260640161043a565b90505b92915050565b60008060008060006104cf8888886109db565b60c08b015160a08c015193965091945092509060008080610506680200000000000000006105018a610228838c610585565b610585565b9050600061052c61052761051984610acc565b678000000000000000610585565b610bf3565b90506105498761050161053f8c8c610601565b6102288a86610585565b935061056b8761050161055c8c8c610601565b6105668986610585565b61172c565b9250610575915050565b9b909a5098505050505050505050565b6000600f83810b9083900b0260401d6f7fffffffffffffffffffffffffffffff1981128015906105c557506f7fffffffffffffffffffffffffffffff8113155b6104b35760405162461bcd60e51b815260206004820152600d60248201526c4c4f503a204f766572666c6f7760981b604482015260640161043a565b6000600f83810b9083900b016f7fffffffffffffffffffffffffffffff1981128015906105c557506f7fffffffffffffffffffffffffffffff8113156104b35760405162461bcd60e51b815260206004820152600d60248201526c4c4f503a204f766572666c6f7760981b604482015260640161043a565b600081610688575060006104b6565b600083600f0b12156106dc5760405162461bcd60e51b815260206004820152600e60248201527f4c4f503a20556e646572666c6f77000000000000000000000000000000000000604482015260640161043a565b600f83900b6fffffffffffffffffffffffffffffffff8316810260401c90608084901c0277ffffffffffffffffffffffffffffffffffffffffffffffff8111156107585760405162461bcd60e51b815260206004820152600d60248201526c4c4f503a204f766572666c6f7760981b604482015260640161043a565b60401b811981111561079c5760405162461bcd60e51b815260206004820152600d60248201526c4c4f503a204f766572666c6f7760981b604482015260640161043a565b019392505050565b6000816107f35760405162461bcd60e51b815260206004820152601160248201527f4c4f503a205a65726f2044697669736f72000000000000000000000000000000604482015260640161043a565b600077ffffffffffffffffffffffffffffffffffffffffffffffff841161082f5782604085901b8161082757610827611b93565b04905061098b565b60c084811c6401000000008110610848576020918201911c5b62010000811061085a576010918201911c5b610100811061086b576008918201911c5b6010811061087b576004918201911c5b6004811061088b576002918201911c5b6002811061089a576001820191505b60bf820360018603901c6001018260ff0387901b816108bb576108bb611b93565b0492506fffffffffffffffffffffffffffffffff83111561090e5760405162461bcd60e51b815260206004820152600d60248201526c4c4f503a204f766572666c6f7760981b604482015260640161043a565b608085901c83026fffffffffffffffffffffffffffffffff8616840260c088901c604089901b82811015610943576001820391505b608084901b9290038281101561095a576001820391505b829003608084901c821461097057610970611be3565b88818161097f5761097f611b93565b04870196505050505050505b6fffffffffffffffffffffffffffffffff8111156104b35760405162461bcd60e51b815260206004820152600d60248201526c4c4f503a204f766572666c6f7760981b604482015260640161043a565b60608301516080840151600091829182919082610a1f610527610a10610a0a67ffffffffffffffff1987610585565b8b610585565b680171547652b83a2e3e610585565b90506000610a48610a42610a3c6804000000000000000087610585565b8a610585565b83610585565b90506000610a6c610a598586610585565b610501680100000000000000008661172c565b9050610a97610a88680400000000000000008d60400151610585565b610a928687610585565b6117a4565b9750610aa382826117a4565b9650610abc81610a926804000000000000000088610585565b9550505050505093509350939050565b60008082600f0b13610b205760405162461bcd60e51b815260206004820152600d60248201527f4c4f503a204e6567617469766500000000000000000000000000000000000000604482015260640161043a565b6000600f83900b680100000000000000008112610b3f576040918201911d5b6401000000008112610b53576020918201911d5b620100008112610b65576010918201911d5b6101008112610b76576008918201911d5b60108112610b86576004918201911d5b60048112610b96576002918201911d5b60028112610ba5576001820191505b603f19820160401b600f85900b607f8490031b6780000000000000005b6000811315610be85790800260ff81901c8281029390930192607f011c9060011d610bc2565b509095945050505050565b60006840000000000000000082600f0b12610c405760405162461bcd60e51b815260206004820152600d60248201526c4c4f503a204f766572666c6f7760981b604482015260640161043a565b683fffffffffffffffff1982600f0b1215610c5d57506000919050565b6f8000000000000000000000000000000060006780000000000000008416600f0b1315610c9b5770016a09e667f3bcc908b2fb1366ea957d3e0260801c5b60008367400000000000000016600f0b1315610cc8577001306fe0a31b7152de8d5a46305c85edec0260801c5b60008367200000000000000016600f0b1315610cf5577001172b83c7d517adcdf7c8c50eb14a791f0260801c5b60008367100000000000000016600f0b1315610d225770010b5586cf9890f6298b92b71842a983630260801c5b60008367080000000000000016600f0b1315610d4f577001059b0d31585743ae7c548eb68ca417fd0260801c5b60008367040000000000000016600f0b1315610d7c57700102c9a3e778060ee6f7caca4f7a29bde80260801c5b60008367020000000000000016600f0b1315610da95770010163da9fb33356d84a66ae336dcdfa3f0260801c5b60008367010000000000000016600f0b1315610dd657700100b1afa5abcbed6129ab13ec11dc95430260801c5b600083668000000000000016600f0b1315610e025770010058c86da1c09ea1ff19d294cf2f679b0260801c5b600083664000000000000016600f0b1315610e2e577001002c605e2e8cec506d21bfc89a23a00f0260801c5b600083662000000000000016600f0b1315610e5a57700100162f3904051fa128bca9c55c31e5df0260801c5b600083661000000000000016600f0b1315610e86577001000b175effdc76ba38e31671ca9397250260801c5b600083660800000000000016600f0b1315610eb257700100058ba01fb9f96d6cacd4b180917c3d0260801c5b600083660400000000000016600f0b1315610ede5770010002c5cc37da9491d0985c348c68e7b30260801c5b600083660200000000000016600f0b1315610f0a577001000162e525ee054754457d59952920260260801c5b600083660100000000000016600f0b1315610f365770010000b17255775c040618bf4a4ade83fc0260801c5b6000836580000000000016600f0b1315610f61577001000058b91b5bc9ae2eed81e9b7d4cfab0260801c5b6000836540000000000016600f0b1315610f8c57700100002c5c89d5ec6ca4d7c8acc017b7c90260801c5b6000836520000000000016600f0b1315610fb75770010000162e43f4f831060e02d839a9d16d0260801c5b6000836510000000000016600f0b1315610fe257700100000b1721bcfc99d9f890ea069117630260801c5b6000836508000000000016600f0b131561100d5770010000058b90cf1e6d97f9ca14dbcc16280260801c5b6000836504000000000016600f0b1315611038577001000002c5c863b73f016468f6bac5ca2b0260801c5b6000836502000000000016600f0b131561106357700100000162e430e5a18f6119e3c02282a50260801c5b6000836501000000000016600f0b131561108e577001000000b1721835514b86e6d96efd1bfe0260801c5b60008364800000000016600f0b13156110b857700100000058b90c0b48c6be5df846c5b2ef0260801c5b60008364400000000016600f0b13156110e25770010000002c5c8601cc6b9e94213c72737a0260801c5b60008364200000000016600f0b131561110c577001000000162e42fff037df38aa2b219f060260801c5b60008364100000000016600f0b13156111365770010000000b17217fba9c739aa5819f44f90260801c5b60008364080000000016600f0b1315611160577001000000058b90bfcdee5acd3c1cedc8230260801c5b60008364040000000016600f0b131561118a57700100000002c5c85fe31f35a6a30da1be500260801c5b60008364020000000016600f0b13156111b45770010000000162e42ff0999ce3541b9fffcf0260801c5b60008364010000000016600f0b13156111de57700100000000b17217f80f4ef5aadda455540260801c5b600083638000000016600f0b13156112075770010000000058b90bfbf8479bd5a81b51ad0260801c5b600083634000000016600f0b1315611230577001000000002c5c85fdf84bd62ae30a74cc0260801c5b600083632000000016600f0b131561125957700100000000162e42fefb2fed257559bdaa0260801c5b600083631000000016600f0b1315611282577001000000000b17217f7d5a7716bba4a9ae0260801c5b600083630800000016600f0b13156112ab57700100000000058b90bfbe9ddbac5e109cce0260801c5b600083630400000016600f0b13156112d45770010000000002c5c85fdf4b15de6f17eb0d0260801c5b600083630200000016600f0b13156112fd577001000000000162e42fefa494f1478fde050260801c5b600083630100000016600f0b13156113265770010000000000b17217f7d20cf927c8e94c0260801c5b6000836280000016600f0b131561134e577001000000000058b90bfbe8f71cb4e4b33d0260801c5b6000836240000016600f0b131561137657700100000000002c5c85fdf477b662b269450260801c5b6000836220000016600f0b131561139e5770010000000000162e42fefa3ae53369388c0260801c5b6000836210000016600f0b13156113c657700100000000000b17217f7d1d351a389d400260801c5b6000836208000016600f0b13156113ee5770010000000000058b90bfbe8e8b2d3d4ede0260801c5b6000836204000016600f0b1315611416577001000000000002c5c85fdf4741bea6e77e0260801c5b6000836202000016600f0b131561143e57700100000000000162e42fefa39fe95583c20260801c5b6000836201000016600f0b1315611466577001000000000000b17217f7d1cfb72b45e10260801c5b60008361800016600f0b131561148d57700100000000000058b90bfbe8e7cc35c3f00260801c5b60008361400016600f0b13156114b45770010000000000002c5c85fdf473e242ea380260801c5b60008361200016600f0b13156114db577001000000000000162e42fefa39f02b772c0260801c5b60008361100016600f0b13156115025770010000000000000b17217f7d1cf7d83c1a0260801c5b60008361080016600f0b1315611529577001000000000000058b90bfbe8e7bdcbe2e0260801c5b60008361040016600f0b131561155057700100000000000002c5c85fdf473dea871f0260801c5b60008361020016600f0b13156115775770010000000000000162e42fefa39ef44d910260801c5b60008361010016600f0b131561159e57700100000000000000b17217f7d1cf79e9490260801c5b600083608016600f0b13156115c45770010000000000000058b90bfbe8e7bce5440260801c5b600083604016600f0b13156115ea577001000000000000002c5c85fdf473de6eca0260801c5b600083602016600f0b131561161057700100000000000000162e42fefa39ef366f0260801c5b600083601016600f0b1315611636577001000000000000000b17217f7d1cf79afa0260801c5b600083600816600f0b131561165c57700100000000000000058b90bfbe8e7bcd6d0260801c5b600083600416600f0b13156116825770010000000000000002c5c85fdf473de6b20260801c5b600083600216600f0b13156116a8577001000000000000000162e42fefa39ef3580260801c5b600083600116600f0b13156116ce5770010000000000000000b17217f7d1cf79ab0260801c5b600f83810b60401d603f03900b1c6f7fffffffffffffffffffffffffffffff8111156104b65760405162461bcd60e51b815260206004820152600d60248201526c4c4f503a204f766572666c6f7760981b604482015260640161043a565b6000600f82810b9084900b036f7fffffffffffffffffffffffffffffff1981128015906105c557506f7fffffffffffffffffffffffffffffff8113156104b35760405162461bcd60e51b815260206004820152600d60248201526c4c4f503a204f766572666c6f7760981b604482015260640161043a565b600081600f0b600014156117fa5760405162461bcd60e51b815260206004820152601160248201527f4c4f503a205a65726f2064697669736f72000000000000000000000000000000604482015260640161043a565b600082600f0b604085600f0b901b8161181557611815611b93565b0590506f7fffffffffffffffffffffffffffffff1981128015906105c557506f7fffffffffffffffffffffffffffffff8113156104b35760405162461bcd60e51b815260206004820152600d60248201526c4c4f503a204f766572666c6f7760981b604482015260640161043a565b73ffffffffffffffffffffffffffffffffffffffff811681146118a657600080fd5b50565b600080600080600060a086880312156118c157600080fd5b85356118cc81611884565b945060208601356118dc81611884565b935060408601356118ec81611884565b94979396509394606081013594506080013592915050565b604051610100810167ffffffffffffffff8111828210171561193657634e487b7160e01b600052604160045260246000fd5b60405290565b8035801515811461194c57600080fd5b919050565b8035600f81900b811461194c57600080fd5b600060e0828403121561197557600080fd5b60405160e0810181811067ffffffffffffffff821117156119a657634e487b7160e01b600052604160045260246000fd5b60405290508082356119b781611884565b815260208301356119c781611884565b60208201526119d860408401611951565b60408201526119e960608401611951565b60608201526119fa60808401611951565b6080820152611a0b60a08401611951565b60a0820152611a1c60c08401611951565b60c08201525092915050565b6000806000806000858703610240811215611a4257600080fd5b8635611a4d81611884565b9550610100601f198201811315611a6357600080fd5b611a6b611904565b9150602088013582526040880135602083015260608801356040830152611a946080890161193c565b6060830152611aa560a08901611951565b608083015260c088013560a083015260e088013560c0830152611ac981890161193c565b60e0830152509350611adf876101208801611963565b9250611aee6102008701611951565b9150611afd6102208701611951565b90509295509295909350565b600080600080600060a08688031215611b2157600080fd5b853594506020860135935060408601359250611b3f6060870161193c565b9150611afd60808701611951565b600060208284031215611b5f57600080fd5b5051919050565b634e487b7160e01b600052601160045260246000fd5b600082821015611b8e57611b8e611b66565b500390565b634e487b7160e01b600052601260045260246000fd5b600082611bc657634e487b7160e01b600052601260045260246000fd5b500490565b60008219821115611bde57611bde611b66565b500190565b634e487b7160e01b600052600160045260246000fdfea2646970667358221220bb0aa4de2b089fa5136ee17ffbd1682ed11322c87d09cc10e9124083622d0dec64736f6c634300080b0033",
  "deployedBytecode": "0x730000000000000000000000000000000000000000301460806040526004361061004b5760003560e01c8063919726bf14610050578063cc160f7614610082578063efe54059146100a3575b600080fd5b61006361005e3660046118a9565b6100b6565b60408051600f93840b81529190920b6020820152015b60405180910390f35b610095610090366004611a28565b61017b565b604051908152602001610079565b6100956100b1366004611b09565b610317565b6040517f303081ab00000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff858116600483015284811660248301526044820184905260648201839052600091829182919089169063303081ab90608401602060405180830381865afa158015610140573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906101649190611b4d565b608081811b811d9a91901d98509650505050505050565b600080856020015190506000866040015190506000806000806101a98c8b600001518c6020015189426100b6565b90925090506101d48a6101ce6101bf4289611b7c565b6101c98a8a611b7c565b6103ef565b836104bc565b9094509250600090506101f46101ea8742611b7c565b6101c98888611b7c565b9050600061020f6102054288611b7c565b6101c98989611b7c565b905061022d61021e8385610585565b6102288388610585565b610601565b945061024661023c8385610585565b6102288387610585565b9350610252858b610585565b945061025e848a610585565b935050506000808b60e00151156102b65761028a610280858e60800151610585565b8d60c00151610679565b91506102af6102a567028f5c28f5c28f5c8e60800151610585565b8d60a00151610679565b90506102e5565b6102cf6102a567028f5c28f5c28f5c8e60800151610585565b91506102e2610280868e60800151610585565b90505b60006064828411156102f75782840391505b81811115610303578091505b509750505050505050505b95945050505050565b600082156103935784861061035b576000606461033d84610338898b611b7c565b610679565b6103479190611ba9565b90506103538186611bcb565b91505061030e565b6000606461036d846103388a8a611b7c565b6103779190611ba9565b90508481111561038957610389611be3565b6103538186611b7c565b8585106103ac576000606461033d846103388a8a611b7c565b600060646103be84610338898b611b7c565b6103c89190611ba9565b9050848111156103da576103da611be3565b6103e48186611b7c565b979650505050505050565b6000816104435760405162461bcd60e51b815260206004820152601160248201527f4c4f503a205a65726f2064697669736f7200000000000000000000000000000060448201526064015b60405180910390fd5b600061044f84846107a4565b90506f7fffffffffffffffffffffffffffffff6fffffffffffffffffffffffffffffffff821611156104b35760405162461bcd60e51b815260206004820152600d60248201526c4c4f503a204f766572666c6f7760981b604482015260640161043a565b90505b92915050565b60008060008060006104cf8888886109db565b60c08b015160a08c015193965091945092509060008080610506680200000000000000006105018a610228838c610585565b610585565b9050600061052c61052761051984610acc565b678000000000000000610585565b610bf3565b90506105498761050161053f8c8c610601565b6102288a86610585565b935061056b8761050161055c8c8c610601565b6105668986610585565b61172c565b9250610575915050565b9b909a5098505050505050505050565b6000600f83810b9083900b0260401d6f7fffffffffffffffffffffffffffffff1981128015906105c557506f7fffffffffffffffffffffffffffffff8113155b6104b35760405162461bcd60e51b815260206004820152600d60248201526c4c4f503a204f766572666c6f7760981b604482015260640161043a565b6000600f83810b9083900b016f7fffffffffffffffffffffffffffffff1981128015906105c557506f7fffffffffffffffffffffffffffffff8113156104b35760405162461bcd60e51b815260206004820152600d60248201526c4c4f503a204f766572666c6f7760981b604482015260640161043a565b600081610688575060006104b6565b600083600f0b12156106dc5760405162461bcd60e51b815260206004820152600e60248201527f4c4f503a20556e646572666c6f77000000000000000000000000000000000000604482015260640161043a565b600f83900b6fffffffffffffffffffffffffffffffff8316810260401c90608084901c0277ffffffffffffffffffffffffffffffffffffffffffffffff8111156107585760405162461bcd60e51b815260206004820152600d60248201526c4c4f503a204f766572666c6f7760981b604482015260640161043a565b60401b811981111561079c5760405162461bcd60e51b815260206004820152600d60248201526c4c4f503a204f766572666c6f7760981b604482015260640161043a565b019392505050565b6000816107f35760405162461bcd60e51b815260206004820152601160248201527f4c4f503a205a65726f2044697669736f72000000000000000000000000000000604482015260640161043a565b600077ffffffffffffffffffffffffffffffffffffffffffffffff841161082f5782604085901b8161082757610827611b93565b04905061098b565b60c084811c6401000000008110610848576020918201911c5b62010000811061085a576010918201911c5b610100811061086b576008918201911c5b6010811061087b576004918201911c5b6004811061088b576002918201911c5b6002811061089a576001820191505b60bf820360018603901c6001018260ff0387901b816108bb576108bb611b93565b0492506fffffffffffffffffffffffffffffffff83111561090e5760405162461bcd60e51b815260206004820152600d60248201526c4c4f503a204f766572666c6f7760981b604482015260640161043a565b608085901c83026fffffffffffffffffffffffffffffffff8616840260c088901c604089901b82811015610943576001820391505b608084901b9290038281101561095a576001820391505b829003608084901c821461097057610970611be3565b88818161097f5761097f611b93565b04870196505050505050505b6fffffffffffffffffffffffffffffffff8111156104b35760405162461bcd60e51b815260206004820152600d60248201526c4c4f503a204f766572666c6f7760981b604482015260640161043a565b60608301516080840151600091829182919082610a1f610527610a10610a0a67ffffffffffffffff1987610585565b8b610585565b680171547652b83a2e3e610585565b90506000610a48610a42610a3c6804000000000000000087610585565b8a610585565b83610585565b90506000610a6c610a598586610585565b610501680100000000000000008661172c565b9050610a97610a88680400000000000000008d60400151610585565b610a928687610585565b6117a4565b9750610aa382826117a4565b9650610abc81610a926804000000000000000088610585565b9550505050505093509350939050565b60008082600f0b13610b205760405162461bcd60e51b815260206004820152600d60248201527f4c4f503a204e6567617469766500000000000000000000000000000000000000604482015260640161043a565b6000600f83900b680100000000000000008112610b3f576040918201911d5b6401000000008112610b53576020918201911d5b620100008112610b65576010918201911d5b6101008112610b76576008918201911d5b60108112610b86576004918201911d5b60048112610b96576002918201911d5b60028112610ba5576001820191505b603f19820160401b600f85900b607f8490031b6780000000000000005b6000811315610be85790800260ff81901c8281029390930192607f011c9060011d610bc2565b509095945050505050565b60006840000000000000000082600f0b12610c405760405162461bcd60e51b815260206004820152600d60248201526c4c4f503a204f766572666c6f7760981b604482015260640161043a565b683fffffffffffffffff1982600f0b1215610c5d57506000919050565b6f8000000000000000000000000000000060006780000000000000008416600f0b1315610c9b5770016a09e667f3bcc908b2fb1366ea957d3e0260801c5b60008367400000000000000016600f0b1315610cc8577001306fe0a31b7152de8d5a46305c85edec0260801c5b60008367200000000000000016600f0b1315610cf5577001172b83c7d517adcdf7c8c50eb14a791f0260801c5b60008367100000000000000016600f0b1315610d225770010b5586cf9890f6298b92b71842a983630260801c5b60008367080000000000000016600f0b1315610d4f577001059b0d31585743ae7c548eb68ca417fd0260801c5b60008367040000000000000016600f0b1315610d7c57700102c9a3e778060ee6f7caca4f7a29bde80260801c5b60008367020000000000000016600f0b1315610da95770010163da9fb33356d84a66ae336dcdfa3f0260801c5b60008367010000000000000016600f0b1315610dd657700100b1afa5abcbed6129ab13ec11dc95430260801c5b600083668000000000000016600f0b1315610e025770010058c86da1c09ea1ff19d294cf2f679b0260801c5b600083664000000000000016600f0b1315610e2e577001002c605e2e8cec506d21bfc89a23a00f0260801c5b600083662000000000000016600f0b1315610e5a57700100162f3904051fa128bca9c55c31e5df0260801c5b600083661000000000000016600f0b1315610e86577001000b175effdc76ba38e31671ca9397250260801c5b600083660800000000000016600f0b1315610eb257700100058ba01fb9f96d6cacd4b180917c3d0260801c5b600083660400000000000016600f0b1315610ede5770010002c5cc37da9491d0985c348c68e7b30260801c5b600083660200000000000016600f0b1315610f0a577001000162e525ee054754457d59952920260260801c5b600083660100000000000016600f0b1315610f365770010000b17255775c040618bf4a4ade83fc0260801c5b6000836580000000000016600f0b1315610f61577001000058b91b5bc9ae2eed81e9b7d4cfab0260801c5b6000836540000000000016600f0b1315610f8c57700100002c5c89d5ec6ca4d7c8acc017b7c90260801c5b6000836520000000000016600f0b1315610fb75770010000162e43f4f831060e02d839a9d16d0260801c5b6000836510000000000016600f0b1315610fe257700100000b1721bcfc99d9f890ea069117630260801c5b6000836508000000000016600f0b131561100d5770010000058b90cf1e6d97f9ca14dbcc16280260801c5b6000836504000000000016600f0b1315611038577001000002c5c863b73f016468f6bac5ca2b0260801c5b6000836502000000000016600f0b131561106357700100000162e430e5a18f6119e3c02282a50260801c5b6000836501000000000016600f0b131561108e577001000000b1721835514b86e6d96efd1bfe0260801c5b60008364800000000016600f0b13156110b857700100000058b90c0b48c6be5df846c5b2ef0260801c5b60008364400000000016600f0b13156110e25770010000002c5c8601cc6b9e94213c72737a0260801c5b60008364200000000016600f0b131561110c577001000000162e42fff037df38aa2b219f060260801c5b60008364100000000016600f0b13156111365770010000000b17217fba9c739aa5819f44f90260801c5b60008364080000000016600f0b1315611160577001000000058b90bfcdee5acd3c1cedc8230260801c5b60008364040000000016600f0b131561118a57700100000002c5c85fe31f35a6a30da1be500260801c5b60008364020000000016600f0b13156111b45770010000000162e42ff0999ce3541b9fffcf0260801c5b60008364010000000016600f0b13156111de57700100000000b17217f80f4ef5aadda455540260801c5b600083638000000016600f0b13156112075770010000000058b90bfbf8479bd5a81b51ad0260801c5b600083634000000016600f0b1315611230577001000000002c5c85fdf84bd62ae30a74cc0260801c5b600083632000000016600f0b131561125957700100000000162e42fefb2fed257559bdaa0260801c5b600083631000000016600f0b1315611282577001000000000b17217f7d5a7716bba4a9ae0260801c5b600083630800000016600f0b13156112ab57700100000000058b90bfbe9ddbac5e109cce0260801c5b600083630400000016600f0b13156112d45770010000000002c5c85fdf4b15de6f17eb0d0260801c5b600083630200000016600f0b13156112fd577001000000000162e42fefa494f1478fde050260801c5b600083630100000016600f0b13156113265770010000000000b17217f7d20cf927c8e94c0260801c5b6000836280000016600f0b131561134e577001000000000058b90bfbe8f71cb4e4b33d0260801c5b6000836240000016600f0b131561137657700100000000002c5c85fdf477b662b269450260801c5b6000836220000016600f0b131561139e5770010000000000162e42fefa3ae53369388c0260801c5b6000836210000016600f0b13156113c657700100000000000b17217f7d1d351a389d400260801c5b6000836208000016600f0b13156113ee5770010000000000058b90bfbe8e8b2d3d4ede0260801c5b6000836204000016600f0b1315611416577001000000000002c5c85fdf4741bea6e77e0260801c5b6000836202000016600f0b131561143e57700100000000000162e42fefa39fe95583c20260801c5b6000836201000016600f0b1315611466577001000000000000b17217f7d1cfb72b45e10260801c5b60008361800016600f0b131561148d57700100000000000058b90bfbe8e7cc35c3f00260801c5b60008361400016600f0b13156114b45770010000000000002c5c85fdf473e242ea380260801c5b60008361200016600f0b13156114db577001000000000000162e42fefa39f02b772c0260801c5b60008361100016600f0b13156115025770010000000000000b17217f7d1cf7d83c1a0260801c5b60008361080016600f0b1315611529577001000000000000058b90bfbe8e7bdcbe2e0260801c5b60008361040016600f0b131561155057700100000000000002c5c85fdf473dea871f0260801c5b60008361020016600f0b13156115775770010000000000000162e42fefa39ef44d910260801c5b60008361010016600f0b131561159e57700100000000000000b17217f7d1cf79e9490260801c5b600083608016600f0b13156115c45770010000000000000058b90bfbe8e7bce5440260801c5b600083604016600f0b13156115ea577001000000000000002c5c85fdf473de6eca0260801c5b600083602016600f0b131561161057700100000000000000162e42fefa39ef366f0260801c5b600083601016600f0b1315611636577001000000000000000b17217f7d1cf79afa0260801c5b600083600816600f0b131561165c57700100000000000000058b90bfbe8e7bcd6d0260801c5b600083600416600f0b13156116825770010000000000000002c5c85fdf473de6b20260801c5b600083600216600f0b13156116a8577001000000000000000162e42fefa39ef3580260801c5b600083600116600f0b13156116ce5770010000000000000000b17217f7d1cf79ab0260801c5b600f83810b60401d603f03900b1c6f7fffffffffffffffffffffffffffffff8111156104b65760405162461bcd60e51b815260206004820152600d60248201526c4c4f503a204f766572666c6f7760981b604482015260640161043a565b6000600f82810b9084900b036f7fffffffffffffffffffffffffffffff1981128015906105c557506f7fffffffffffffffffffffffffffffff8113156104b35760405162461bcd60e51b815260206004820152600d60248201526c4c4f503a204f766572666c6f7760981b604482015260640161043a565b600081600f0b600014156117fa5760405162461bcd60e51b815260206004820152601160248201527f4c4f503a205a65726f2064697669736f72000000000000000000000000000000604482015260640161043a565b600082600f0b604085600f0b901b8161181557611815611b93565b0590506f7fffffffffffffffffffffffffffffff1981128015906105c557506f7fffffffffffffffffffffffffffffff8113156104b35760405162461bcd60e51b815260206004820152600d60248201526c4c4f503a204f766572666c6f7760981b604482015260640161043a565b73ffffffffffffffffffffffffffffffffffffffff811681146118a657600080fd5b50565b600080600080600060a086880312156118c157600080fd5b85356118cc81611884565b945060208601356118dc81611884565b935060408601356118ec81611884565b94979396509394606081013594506080013592915050565b604051610100810167ffffffffffffffff8111828210171561193657634e487b7160e01b600052604160045260246000fd5b60405290565b8035801515811461194c57600080fd5b919050565b8035600f81900b811461194c57600080fd5b600060e0828403121561197557600080fd5b60405160e0810181811067ffffffffffffffff821117156119a657634e487b7160e01b600052604160045260246000fd5b60405290508082356119b781611884565b815260208301356119c781611884565b60208201526119d860408401611951565b60408201526119e960608401611951565b60608201526119fa60808401611951565b6080820152611a0b60a08401611951565b60a0820152611a1c60c08401611951565b60c08201525092915050565b6000806000806000858703610240811215611a4257600080fd5b8635611a4d81611884565b9550610100601f198201811315611a6357600080fd5b611a6b611904565b9150602088013582526040880135602083015260608801356040830152611a946080890161193c565b6060830152611aa560a08901611951565b608083015260c088013560a083015260e088013560c0830152611ac981890161193c565b60e0830152509350611adf876101208801611963565b9250611aee6102008701611951565b9150611afd6102208701611951565b90509295509295909350565b600080600080600060a08688031215611b2157600080fd5b853594506020860135935060408601359250611b3f6060870161193c565b9150611afd60808701611951565b600060208284031215611b5f57600080fd5b5051919050565b634e487b7160e01b600052601160045260246000fd5b600082821015611b8e57611b8e611b66565b500390565b634e487b7160e01b600052601260045260246000fd5b600082611bc657634e487b7160e01b600052601260045260246000fd5b500490565b60008219821115611bde57611bde611b66565b500190565b634e487b7160e01b600052600160045260246000fdfea2646970667358221220bb0aa4de2b089fa5136ee17ffbd1682ed11322c87d09cc10e9124083622d0dec64736f6c634300080b0033",
  "devdoc": {
    "kind": "dev",
    "methods": {},
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "notice": "Smart contract library of mathematical functions operating with signed 64.64-bit fixed point numbers.  Signed 64.64-bit fixed point number is basically a simple fraction whose numerator is signed 128-bit integer and denominator is 2^64.  As long as denominator is always the same, there is no need to store it, thus in Solidity signed 64.64-bit fixed point numbers are represented by int128 type holding only the numerator.",
    "version": 1
  },
  "storageLayout": {
    "storage": [],
    "types": null
  }
}