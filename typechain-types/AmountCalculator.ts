/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import { FunctionFragment, Result } from "@ethersproject/abi";
import { Listener, Provider } from "@ethersproject/providers";
import { TypedEventFilter, TypedEvent, TypedListener, OnEvent } from "./common";

export interface AmountCalculatorInterface extends utils.Interface {
  contractName: "AmountCalculator";
  functions: {
    "arbitraryStaticCall(address,bytes)": FunctionFragment;
    "getMakerAmount(uint256,uint256,uint256)": FunctionFragment;
    "getTakerAmount(uint256,uint256,uint256)": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "arbitraryStaticCall",
    values: [string, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getMakerAmount",
    values: [BigNumberish, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getTakerAmount",
    values: [BigNumberish, BigNumberish, BigNumberish]
  ): string;

  decodeFunctionResult(
    functionFragment: "arbitraryStaticCall",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getMakerAmount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getTakerAmount",
    data: BytesLike
  ): Result;

  events: {};
}

export interface AmountCalculator extends BaseContract {
  contractName: "AmountCalculator";
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: AmountCalculatorInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    arbitraryStaticCall(
      target: string,
      data: BytesLike,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    getMakerAmount(
      orderMakerAmount: BigNumberish,
      orderTakerAmount: BigNumberish,
      swapTakerAmount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    getTakerAmount(
      orderMakerAmount: BigNumberish,
      orderTakerAmount: BigNumberish,
      swapMakerAmount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;
  };

  arbitraryStaticCall(
    target: string,
    data: BytesLike,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getMakerAmount(
    orderMakerAmount: BigNumberish,
    orderTakerAmount: BigNumberish,
    swapTakerAmount: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getTakerAmount(
    orderMakerAmount: BigNumberish,
    orderTakerAmount: BigNumberish,
    swapMakerAmount: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  callStatic: {
    arbitraryStaticCall(
      target: string,
      data: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getMakerAmount(
      orderMakerAmount: BigNumberish,
      orderTakerAmount: BigNumberish,
      swapTakerAmount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getTakerAmount(
      orderMakerAmount: BigNumberish,
      orderTakerAmount: BigNumberish,
      swapMakerAmount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;
  };

  filters: {};

  estimateGas: {
    arbitraryStaticCall(
      target: string,
      data: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getMakerAmount(
      orderMakerAmount: BigNumberish,
      orderTakerAmount: BigNumberish,
      swapTakerAmount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getTakerAmount(
      orderMakerAmount: BigNumberish,
      orderTakerAmount: BigNumberish,
      swapMakerAmount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    arbitraryStaticCall(
      target: string,
      data: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getMakerAmount(
      orderMakerAmount: BigNumberish,
      orderTakerAmount: BigNumberish,
      swapTakerAmount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getTakerAmount(
      orderMakerAmount: BigNumberish,
      orderTakerAmount: BigNumberish,
      swapMakerAmount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;
  };
}
