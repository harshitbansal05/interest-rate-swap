/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import { FunctionFragment, Result, EventFragment } from "@ethersproject/abi";
import { Listener, Provider } from "@ethersproject/providers";
import { TypedEventFilter, TypedEvent, TypedListener, OnEvent } from "./common";

export interface NonceManagerInterface extends utils.Interface {
  contractName: "NonceManager";
  functions: {
    "advanceNonce(uint8)": FunctionFragment;
    "increaseNonce()": FunctionFragment;
    "nonce(address)": FunctionFragment;
    "nonceEquals(address,uint256)": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "advanceNonce",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "increaseNonce",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "nonce", values: [string]): string;
  encodeFunctionData(
    functionFragment: "nonceEquals",
    values: [string, BigNumberish]
  ): string;

  decodeFunctionResult(
    functionFragment: "advanceNonce",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "increaseNonce",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "nonce", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "nonceEquals",
    data: BytesLike
  ): Result;

  events: {
    "NonceIncreased(address,uint256)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "NonceIncreased"): EventFragment;
}

export type NonceIncreasedEvent = TypedEvent<
  [string, BigNumber],
  { maker: string; newNonce: BigNumber }
>;

export type NonceIncreasedEventFilter = TypedEventFilter<NonceIncreasedEvent>;

export interface NonceManager extends BaseContract {
  contractName: "NonceManager";
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: NonceManagerInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    advanceNonce(
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    increaseNonce(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    nonce(arg0: string, overrides?: CallOverrides): Promise<[BigNumber]>;

    nonceEquals(
      makerAddress: string,
      makerNonce: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[boolean]>;
  };

  advanceNonce(
    amount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  increaseNonce(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  nonce(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

  nonceEquals(
    makerAddress: string,
    makerNonce: BigNumberish,
    overrides?: CallOverrides
  ): Promise<boolean>;

  callStatic: {
    advanceNonce(
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    increaseNonce(overrides?: CallOverrides): Promise<void>;

    nonce(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    nonceEquals(
      makerAddress: string,
      makerNonce: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;
  };

  filters: {
    "NonceIncreased(address,uint256)"(
      maker?: string | null,
      newNonce?: null
    ): NonceIncreasedEventFilter;
    NonceIncreased(
      maker?: string | null,
      newNonce?: null
    ): NonceIncreasedEventFilter;
  };

  estimateGas: {
    advanceNonce(
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    increaseNonce(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    nonce(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    nonceEquals(
      makerAddress: string,
      makerNonce: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    advanceNonce(
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    increaseNonce(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    nonce(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    nonceEquals(
      makerAddress: string,
      makerNonce: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;
  };
}
