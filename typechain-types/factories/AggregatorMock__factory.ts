/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
  Signer,
  utils,
  Contract,
  ContractFactory,
  Overrides,
  BigNumberish,
} from "ethers";
import { Provider, TransactionRequest } from "@ethersproject/providers";
import type {
  AggregatorMock,
  AggregatorMockInterface,
} from "../AggregatorMock";

const _abi = [
  {
    inputs: [
      {
        internalType: "int256",
        name: "answer",
        type: "int256",
      },
    ],
    stateMutability: "nonpayable",
    type: "constructor",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "int256",
        name: "current",
        type: "int256",
      },
      {
        indexed: true,
        internalType: "uint256",
        name: "roundId",
        type: "uint256",
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "updatedAt",
        type: "uint256",
      },
    ],
    name: "AnswerUpdated",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "uint256",
        name: "roundId",
        type: "uint256",
      },
      {
        indexed: true,
        internalType: "address",
        name: "startedBy",
        type: "address",
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "startedAt",
        type: "uint256",
      },
    ],
    name: "NewRound",
    type: "event",
  },
  {
    inputs: [],
    name: "decimals",
    outputs: [
      {
        internalType: "uint8",
        name: "",
        type: "uint8",
      },
    ],
    stateMutability: "pure",
    type: "function",
  },
  {
    inputs: [],
    name: "description",
    outputs: [
      {
        internalType: "string",
        name: "",
        type: "string",
      },
    ],
    stateMutability: "pure",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "roundId",
        type: "uint256",
      },
    ],
    name: "getAnswer",
    outputs: [
      {
        internalType: "int256",
        name: "",
        type: "int256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint80",
        name: "_roundId",
        type: "uint80",
      },
    ],
    name: "getRoundData",
    outputs: [
      {
        internalType: "uint80",
        name: "roundId",
        type: "uint80",
      },
      {
        internalType: "int256",
        name: "answer",
        type: "int256",
      },
      {
        internalType: "uint256",
        name: "startedAt",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "updatedAt",
        type: "uint256",
      },
      {
        internalType: "uint80",
        name: "answeredInRound",
        type: "uint80",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "roundId",
        type: "uint256",
      },
    ],
    name: "getTimestamp",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "latestAnswer",
    outputs: [
      {
        internalType: "int256",
        name: "",
        type: "int256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "latestRound",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "pure",
    type: "function",
  },
  {
    inputs: [],
    name: "latestRoundData",
    outputs: [
      {
        internalType: "uint80",
        name: "roundId",
        type: "uint80",
      },
      {
        internalType: "int256",
        name: "answer",
        type: "int256",
      },
      {
        internalType: "uint256",
        name: "startedAt",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "updatedAt",
        type: "uint256",
      },
      {
        internalType: "uint80",
        name: "answeredInRound",
        type: "uint80",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "latestTimestamp",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "version",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "pure",
    type: "function",
  },
];

const _bytecode =
  "0x60a060405234801561001057600080fd5b506040516104e83803806104e88339818101604052602081101561003357600080fd5b50516080526080516104886100606000396000818160dd0152818161034f01526103cd01526104886000f3fe608060405234801561001057600080fd5b50600436106100be5760003560e01c80638205bf6a11610076578063b5ab58dc1161005b578063b5ab58dc14610241578063b633620c1461025e578063feaf968c1461027b57600080fd5b80638205bf6a146101c65780639a6fc8f5146101ce57600080fd5b806354fd4d50116100a757806354fd4d501461010f578063668a0f02146101165780637284e4161461011d57600080fd5b8063313ce567146100c357806350d25bcd146100db575b600080fd5b60126040805160ff9092168252519081900360200190f35b7f00000000000000000000000000000000000000000000000000000000000000005b60408051918252519081900360200190f35b60016100fd565b60006100fd565b60408051808201909152600e81527f41676772656761746f724d6f636b00000000000000000000000000000000000060208201526040805160208082528351818301528351919283929083019185019080838360005b8381101561018b578181015183820152602001610173565b50505050905090810190601f1680156101b85780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b6100fd610283565b6101f7600480360360208110156101e457600080fd5b503569ffffffffffffffffffff16610295565b604051808669ffffffffffffffffffff1681526020018581526020018481526020018381526020018269ffffffffffffffffffff1681526020019550505050505060405180910390f35b6100fd6004803603602081101561025757600080fd5b5035610306565b6100fd6004803603602081101561027457600080fd5b5035610375565b6101f76103c4565b6000610290606442610414565b905090565b60008080808069ffffffffffffffffffff8616156102ec576040805162461bcd60e51b815260206004820152600f60248201526e139bc819185d18481c1c995cd95b9d608a1b604482015290519081900360640190fd5b6102f46103c4565b939a9299509097509550909350915050565b6000811561034d576040805162461bcd60e51b815260206004820152600f60248201526e139bc819185d18481c1c995cd95b9d608a1b604482015290519081900360640190fd5b7f00000000000000000000000000000000000000000000000000000000000000005b92915050565b600081156103bc576040805162461bcd60e51b815260206004820152600f60248201526e139bc819185d18481c1c995cd95b9d608a1b604482015290519081900360640190fd5b61036f610283565b600080808080807f00000000000000000000000000000000000000000000000000000000000000006103f7606442610414565b610402606442610414565b92989197509550909350600092509050565b60008282101561044d577f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b50039056fea2646970667358221220f42608498c33eeb73a1351cca30b35cc947c7fe7289d9fc37ab7f177cccf61cd64736f6c634300080b0033";

type AggregatorMockConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: AggregatorMockConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class AggregatorMock__factory extends ContractFactory {
  constructor(...args: AggregatorMockConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
    this.contractName = "AggregatorMock";
  }

  deploy(
    answer: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<AggregatorMock> {
    return super.deploy(answer, overrides || {}) as Promise<AggregatorMock>;
  }
  getDeployTransaction(
    answer: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(answer, overrides || {});
  }
  attach(address: string): AggregatorMock {
    return super.attach(address) as AggregatorMock;
  }
  connect(signer: Signer): AggregatorMock__factory {
    return super.connect(signer) as AggregatorMock__factory;
  }
  static readonly contractName: "AggregatorMock";
  public readonly contractName: "AggregatorMock";
  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): AggregatorMockInterface {
    return new utils.Interface(_abi) as AggregatorMockInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): AggregatorMock {
    return new Contract(address, _abi, signerOrProvider) as AggregatorMock;
  }
}
