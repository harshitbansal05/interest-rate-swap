/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import { Provider, TransactionRequest } from "@ethersproject/providers";
import type { ERC1155Proxy, ERC1155ProxyInterface } from "../ERC1155Proxy";

const _abi = [
  {
    inputs: [
      {
        internalType: "address",
        name: "_immutableOwner",
        type: "address",
      },
    ],
    stateMutability: "nonpayable",
    type: "constructor",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "from",
        type: "address",
      },
      {
        internalType: "address",
        name: "to",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "amount",
        type: "uint256",
      },
      {
        internalType: "contract IERC1155",
        name: "token",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "tokenId",
        type: "uint256",
      },
      {
        internalType: "bytes",
        name: "data",
        type: "bytes",
      },
    ],
    name: "func_301JL5R",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "immutableOwner",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
];

const _bytecode =
  "0x60a060405234801561001057600080fd5b5060405161030e38038061030e8339818101604052602081101561003357600080fd5b50516001600160a01b031660808190526102ad6100616000396000818160dd015261012601526102ad6000f3fe608060405234801561001057600080fd5b50600436106100365760003560e01c806323b872dd1461003b5780638ec73568146100d8575b600080fd5b6100d6600480360360c081101561005157600080fd5b6001600160a01b03823581169260208101358216926040820135926060830135169160808101359181019060c0810160a082013564010000000081111561009757600080fd5b8201836020820111156100a957600080fd5b803590602001918460018302840111640100000000831117156100cb57600080fd5b50909250905061011b565b005b6100ff7f000000000000000000000000000000000000000000000000000000000000000081565b604080516001600160a01b039092168252519081900360200190f35b336001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016146101b257604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601160248201527f494f3a204163636573732064656e696564000000000000000000000000000000604482015290519081900360640190fd5b836001600160a01b031663f242432a8888868987876040518763ffffffff1660e01b815260040180876001600160a01b03168152602001866001600160a01b03168152602001858152602001848152602001806020018281038252848482818152602001925080828437600081840152601f19601f820116905080830192505050975050505050505050600060405180830381600087803b15801561025657600080fd5b505af115801561026a573d6000803e3d6000fd5b505050505050505050505056fea2646970667358221220e7b78fdd3259cffe35e9965cc4c96c004877542af0cba9f66f357c87ec2e741c64736f6c634300080b0033";

type ERC1155ProxyConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: ERC1155ProxyConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class ERC1155Proxy__factory extends ContractFactory {
  constructor(...args: ERC1155ProxyConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
    this.contractName = "ERC1155Proxy";
  }

  deploy(
    _immutableOwner: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ERC1155Proxy> {
    return super.deploy(
      _immutableOwner,
      overrides || {}
    ) as Promise<ERC1155Proxy>;
  }
  getDeployTransaction(
    _immutableOwner: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(_immutableOwner, overrides || {});
  }
  attach(address: string): ERC1155Proxy {
    return super.attach(address) as ERC1155Proxy;
  }
  connect(signer: Signer): ERC1155Proxy__factory {
    return super.connect(signer) as ERC1155Proxy__factory;
  }
  static readonly contractName: "ERC1155Proxy";
  public readonly contractName: "ERC1155Proxy";
  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): ERC1155ProxyInterface {
    return new utils.Interface(_abi) as ERC1155ProxyInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): ERC1155Proxy {
    return new Contract(address, _abi, signerOrProvider) as ERC1155Proxy;
  }
}
