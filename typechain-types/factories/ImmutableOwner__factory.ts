/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import { Provider, TransactionRequest } from "@ethersproject/providers";
import type {
  ImmutableOwner,
  ImmutableOwnerInterface,
} from "../ImmutableOwner";

const _abi = [
  {
    inputs: [
      {
        internalType: "address",
        name: "_immutableOwner",
        type: "address",
      },
    ],
    stateMutability: "nonpayable",
    type: "constructor",
  },
  {
    inputs: [],
    name: "immutableOwner",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
];

const _bytecode =
  "0x60a060405234801561001057600080fd5b5060405161010b38038061010b8339818101604052602081101561003357600080fd5b50516001600160a01b031660805260805160b261005960003960006031015260b26000f3fe6080604052348015600f57600080fd5b506004361060285760003560e01c80638ec7356814602d575b600080fd5b60537f000000000000000000000000000000000000000000000000000000000000000081565b6040805173ffffffffffffffffffffffffffffffffffffffff9092168252519081900360200190f3fea264697066735822122076ded322cbcf630ec02b74d6982ac4849e8bbe0260a156e1388dae8bce76211464736f6c634300080b0033";

type ImmutableOwnerConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: ImmutableOwnerConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class ImmutableOwner__factory extends ContractFactory {
  constructor(...args: ImmutableOwnerConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
    this.contractName = "ImmutableOwner";
  }

  deploy(
    _immutableOwner: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ImmutableOwner> {
    return super.deploy(
      _immutableOwner,
      overrides || {}
    ) as Promise<ImmutableOwner>;
  }
  getDeployTransaction(
    _immutableOwner: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(_immutableOwner, overrides || {});
  }
  attach(address: string): ImmutableOwner {
    return super.attach(address) as ImmutableOwner;
  }
  connect(signer: Signer): ImmutableOwner__factory {
    return super.connect(signer) as ImmutableOwner__factory;
  }
  static readonly contractName: "ImmutableOwner";
  public readonly contractName: "ImmutableOwner";
  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): ImmutableOwnerInterface {
    return new utils.Interface(_abi) as ImmutableOwnerInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): ImmutableOwner {
    return new Contract(address, _abi, signerOrProvider) as ImmutableOwner;
  }
}
