/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import { Provider, TransactionRequest } from "@ethersproject/providers";
import type {
  PredicateHelper,
  PredicateHelperInterface,
} from "../PredicateHelper";

const _abi = [
  {
    inputs: [
      {
        internalType: "address[]",
        name: "targets",
        type: "address[]",
      },
      {
        internalType: "bytes[]",
        name: "data",
        type: "bytes[]",
      },
    ],
    name: "and",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "value",
        type: "uint256",
      },
      {
        internalType: "address",
        name: "target",
        type: "address",
      },
      {
        internalType: "bytes",
        name: "data",
        type: "bytes",
      },
    ],
    name: "eq",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "value",
        type: "uint256",
      },
      {
        internalType: "address",
        name: "target",
        type: "address",
      },
      {
        internalType: "bytes",
        name: "data",
        type: "bytes",
      },
    ],
    name: "gt",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "value",
        type: "uint256",
      },
      {
        internalType: "address",
        name: "target",
        type: "address",
      },
      {
        internalType: "bytes",
        name: "data",
        type: "bytes",
      },
    ],
    name: "lt",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address[]",
        name: "targets",
        type: "address[]",
      },
      {
        internalType: "bytes[]",
        name: "data",
        type: "bytes[]",
      },
    ],
    name: "or",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "time",
        type: "uint256",
      },
    ],
    name: "timestampBelow",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
];

const _bytecode =
  "0x608060405234801561001057600080fd5b50610b3b806100206000396000f3fe608060405234801561001057600080fd5b50600436106100725760003560e01c8063871919d511610050578063871919d5146100c4578063961d5b1e146100d7578063e6133301146100ea57600080fd5b8063057702e91461007757806332565d611461009e57806363592c2b146100b1575b600080fd5b61008a61008536600461080e565b6100fd565b604051901515815260200160405180910390f35b61008a6100ac36600461080e565b6101cc565b61008a6100bf3660046108d9565b421090565b61008a6100d236600461080e565b610294565b61008a6100e536600461093e565b61035c565b61008a6100f836600461093e565b610519565b600080610153836040518060400160405280600681526020017f50483a2067740000000000000000000000000000000000000000000000000000815250866001600160a01b03166106b09092919063ffffffff16565b905080516020146101ab5760405162461bcd60e51b815260206004820152601760248201527f50483a20696e76616c69642063616c6c20726573756c7400000000000000000060448201526064015b60405180910390fd5b84818060200190518101906101c091906109aa565b119150505b9392505050565b600080610222836040518060400160405280600681526020017f50483a2065710000000000000000000000000000000000000000000000000000815250866001600160a01b03166106b09092919063ffffffff16565b905080516020146102755760405162461bcd60e51b815260206004820152601760248201527f50483a20696e76616c69642063616c6c20726573756c7400000000000000000060448201526064016101a2565b848180602001905181019061028a91906109aa565b1495945050505050565b6000806102ea836040518060400160405280600681526020017f50483a206c740000000000000000000000000000000000000000000000000000815250866001600160a01b03166106b09092919063ffffffff16565b9050805160201461033d5760405162461bcd60e51b815260206004820152601760248201527f50483a20696e76616c69642063616c6c20726573756c7400000000000000000060448201526064016101a2565b848180602001905181019061035291906109aa565b1095945050505050565b60008382146103ad5760405162461bcd60e51b815260206004820152601d60248201527f50483a20696e7075742061727261792073697a65206d69736d6174636800000060448201526064016101a2565b60005b8481101561050b5760006104828585848181106103cf576103cf6109c3565b90506020028101906103e191906109d9565b8080601f0160208091040260200160405190810160405280939291908181526020018383808284376000920191909152505060408051808201909152601881527f50483a2027616e64272073756263616c6c206661696c65640000000000000000602082015291508a9050898681811061045d5761045d6109c3565b90506020020160208101906104729190610a20565b6001600160a01b031691906106b0565b905080516020146104d55760405162461bcd60e51b815260206004820152601760248201527f50483a20696e76616c69642063616c6c20726573756c7400000000000000000060448201526064016101a2565b808060200190518101906104e99190610a3b565b6104f857600092505050610511565b508061050381610a5d565b9150506103b0565b50600190505b949350505050565b600083821461056a5760405162461bcd60e51b815260206004820152601d60248201527f50483a20696e7075742061727261792073697a65206d69736d6174636800000060448201526064016101a2565b60005b848110156106a457600061061a85858481811061058c5761058c6109c3565b905060200281019061059e91906109d9565b8080601f0160208091040260200160405190810160405280939291908181526020018383808284376000920191909152505060408051808201909152601781527f50483a20276f72272073756263616c6c206661696c6564000000000000000000602082015291508a9050898681811061045d5761045d6109c3565b9050805160201461066d5760405162461bcd60e51b815260206004820152601760248201527f50483a20696e76616c69642063616c6c20726573756c7400000000000000000060448201526064016101a2565b808060200190518101906106819190610a3b565b1561069157600192505050610511565b508061069c81610a5d565b91505061056d565b50600095945050505050565b60606001600160a01b0384163b61072e5760405162461bcd60e51b8152602060048201526024808201527f416464726573733a207374617469632063616c6c20746f206e6f6e2d636f6e7460448201527f726163740000000000000000000000000000000000000000000000000000000060648201526084016101a2565b600080856001600160a01b0316856040516107499190610ab6565b600060405180830381855afa9150503d8060008114610784576040519150601f19603f3d011682016040523d82523d6000602084013e610789565b606091505b50915091506107998282866107a3565b9695505050505050565b606083156107b25750816101c5565b8251156107c25782518084602001fd5b8160405162461bcd60e51b81526004016101a29190610ad2565b80356001600160a01b03811681146107f357600080fd5b919050565b634e487b7160e01b600052604160045260246000fd5b60008060006060848603121561082357600080fd5b83359250610833602085016107dc565b9150604084013567ffffffffffffffff8082111561085057600080fd5b818601915086601f83011261086457600080fd5b813581811115610876576108766107f8565b604051601f8201601f19908116603f0116810190838211818310171561089e5761089e6107f8565b816040528281528960208487010111156108b757600080fd5b8260208601602083013760006020848301015280955050505050509250925092565b6000602082840312156108eb57600080fd5b5035919050565b60008083601f84011261090457600080fd5b50813567ffffffffffffffff81111561091c57600080fd5b6020830191508360208260051b850101111561093757600080fd5b9250929050565b6000806000806040858703121561095457600080fd5b843567ffffffffffffffff8082111561096c57600080fd5b610978888389016108f2565b9096509450602087013591508082111561099157600080fd5b5061099e878288016108f2565b95989497509550505050565b6000602082840312156109bc57600080fd5b5051919050565b634e487b7160e01b600052603260045260246000fd5b6000808335601e198436030181126109f057600080fd5b83018035915067ffffffffffffffff821115610a0b57600080fd5b60200191503681900382131561093757600080fd5b600060208284031215610a3257600080fd5b6101c5826107dc565b600060208284031215610a4d57600080fd5b815180151581146101c557600080fd5b6000600019821415610a7f57634e487b7160e01b600052601160045260246000fd5b5060010190565b60005b83811015610aa1578181015183820152602001610a89565b83811115610ab0576000848401525b50505050565b60008251610ac8818460208701610a86565b9190910192915050565b6020815260008251806020840152610af1816040850160208701610a86565b601f01601f1916919091016040019291505056fea264697066735822122044ff209a9fd0971e25847554e5353077de720828b8cff836ba8e4b93c292b3b764736f6c634300080b0033";

type PredicateHelperConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: PredicateHelperConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class PredicateHelper__factory extends ContractFactory {
  constructor(...args: PredicateHelperConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
    this.contractName = "PredicateHelper";
  }

  deploy(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<PredicateHelper> {
    return super.deploy(overrides || {}) as Promise<PredicateHelper>;
  }
  getDeployTransaction(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  attach(address: string): PredicateHelper {
    return super.attach(address) as PredicateHelper;
  }
  connect(signer: Signer): PredicateHelper__factory {
    return super.connect(signer) as PredicateHelper__factory;
  }
  static readonly contractName: "PredicateHelper";
  public readonly contractName: "PredicateHelper";
  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): PredicateHelperInterface {
    return new utils.Interface(_abi) as PredicateHelperInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): PredicateHelper {
    return new Contract(address, _abi, signerOrProvider) as PredicateHelper;
  }
}
